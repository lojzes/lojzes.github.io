import{_ as i}from"./mysql-frame-65a9e63d.js";import{_ as c,X as r,Y as d,Z as s,a1 as n,$ as a,a0 as p,a2 as e,C as l}from"./framework-0b23a550.js";const u="/assets/engines-83be14a2.png",k="/assets/engines-default-13fe2e11.png",m="/assets/1-353444c7.png",v="/assets/2-fd9e6345.png",y={},h={class:"hint-container info"},b=s("p",{class:"hint-container-title"},"参考",-1),M={href:"https://blog.csdn.net/fdipzone/article/details/49532127",target:"_blank",rel:"noopener noreferrer"},g={href:"https://developer.aliyun.com/article/552852",target:"_blank",rel:"noopener noreferrer"},S=e('<h2 id="mysql-基础" tabindex="-1"><a class="header-anchor" href="#mysql-基础" aria-hidden="true">#</a> MySQL 基础</h2><h3 id="什么是关系型数据库" tabindex="-1"><a class="header-anchor" href="#什么是关系型数据库" aria-hidden="true">#</a> 什么是关系型数据库？</h3><p>顾名思义，关系型数据库（<code>RDBMS，Relational Database Management System</code>）就是一种建立在关系模型的基础上的数据库。关系模型表明了数据库中所存储的数据之间的联系（<code>一对一、一对多、多对多</code>）。</p><p>关系型数据库中，我们的数据都被存放在了各种表中（比如用户表），表中的每一行就存放着一条数据（比如一个用户的信息）。</p><p>大部分关系型数据库都使用 <code>SQL</code> 来操作数据库中的数据。并且，大部分关系型数据库都支持事务的四大特性(<code>ACID</code>)。</p><p><strong>有哪些常见的关系型数据库呢？</strong></p><p><code>MySQL、PostgreSQL、Oracle、SQL Server、SQLite</code>（微信本地的聊天记录的存储就是用的 SQLite） ......。</p><h3 id="mysql-有什么优点" tabindex="-1"><a class="header-anchor" href="#mysql-有什么优点" aria-hidden="true">#</a> MySQL 有什么优点？</h3><p>这个问题本质上是在问 MySQL 如此流行的原因。</p><p>MySQL 主要具有下面这些优点：</p><ol><li>成熟稳定，功能完善。</li><li>开源免费。</li><li>文档丰富，既有详细的官方文档，又有非常多优质文章可供参考学习。</li><li>开箱即用，操作简单，维护成本低。</li><li>兼容性好，支持常见的操作系统，支持多种开发语言。</li><li>社区活跃，生态完善。</li><li>事务支持优秀， InnoDB 存储引擎默认使用 REPEATABLE-READ 并不会有任何性能损失，并且，InnoDB 实现的 REPEATABLE-READ 隔离级别其实是可以解决幻读问题发生的。</li><li>支持分库分表、读写分离、高可用。</li></ol><h2 id="mysql-基础架构" tabindex="-1"><a class="header-anchor" href="#mysql-基础架构" aria-hidden="true">#</a> MySQL 基础架构</h2>',12),L=e('<p>下图是 MySQL 的一个简要架构图，从下图你可以很清晰的看到客户端的一条 SQL 语句在 MySQL 内部是如何执行的。</p><p><img src="'+i+'" alt="mysql架构图" loading="lazy"></p><p>从上图可以看出， MySQL 主要由下面几部分构成：</p><ul><li><strong>连接器：</strong> 身份认证和权限相关(登录 MySQL 的时候)。</li><li><strong>查询缓存：</strong> 执行查询语句的时候，会先查询缓存（MySQL 8.0 版本后移除，因为这个功能不太实用）。</li><li><strong>分析器：</strong> 没有命中缓存的话，SQL 语句就会经过分析器，分析器说白了就是要先看你的 SQL 语句要干嘛，再检查你的 SQL 语句语法是否正确。</li><li><strong>优化器：</strong> 按照 MySQL 认为最优的方案去执行。</li><li><strong>执行器：</strong> 执行语句，然后从存储引擎返回数据。 执行语句之前会先判断是否有权限，如果没有权限的话，就会报错。</li><li><strong>插件式存储引擎</strong> ： 主要负责数据的存储和读取，采用的是插件式架构，支持 InnoDB、MyISAM、Memory 等多种存储引擎。</li></ul><h2 id="mysql-存储引擎" tabindex="-1"><a class="header-anchor" href="#mysql-存储引擎" aria-hidden="true">#</a> MySQL 存储引擎</h2><p>MySQL 核心在于存储引擎，想要深入学习 MySQL，必定要深入研究 MySQL 存储引擎。</p><h3 id="mysql-支持哪些存储引擎-默认使用哪个" tabindex="-1"><a class="header-anchor" href="#mysql-支持哪些存储引擎-默认使用哪个" aria-hidden="true">#</a> MySQL 支持哪些存储引擎？默认使用哪个？</h3><p>MySQL 支持多种存储引擎，你可以通过 <code>show engines</code> 命令来查看 MySQL 支持的所有存储引擎。</p><p><img src="'+u+`" alt="数据库引擎" loading="lazy"></p><p>从上图我们可以查看出， MySQL 当前默认的存储引擎是 InnoDB。并且，所有的存储引擎中只有 InnoDB 是事务性存储引擎，也就是说只有 InnoDB 支持事务。</p><p>我这里使用的 MySQL 版本是 8.x，不同的 MySQL 版本之间可能会有差别。</p><p>MySQL 5.5.5 之前，MyISAM 是 MySQL 的默认存储引擎。5.5.5 版本之后，InnoDB 是 MySQL 的默认存储引擎。</p><p>你可以通过 <code>select version()</code> 命令查看你的 MySQL 版本。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> mysql<span class="token operator">&gt;</span> <span class="token keyword">select</span> version<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
+-----------+
<span class="token operator">|</span> version<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">|</span>
+-----------+
<span class="token operator">|</span> <span class="token number">8.0</span>.27    <span class="token operator">|</span>
+-----------+
<span class="token number">1</span> row <span class="token keyword">in</span> <span class="token builtin class-name">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你也可以通过 <code>show variables like &#39;%storage_engine%&#39;</code> 命令直接查看 MySQL 当前默认的存储引擎。</p><p><img src="`+k+'" alt="数据库默认引擎" loading="lazy"></p><h3 id="mysql-存储引擎架构了解吗" tabindex="-1"><a class="header-anchor" href="#mysql-存储引擎架构了解吗" aria-hidden="true">#</a> MySQL 存储引擎架构了解吗？</h3><p>MySQL 存储引擎采用的是 <strong>插件式架构</strong> ，支持多种存储引擎，我们甚至可以为不同的数据库表设置不同的存储引擎以适应不同场景的需要。<strong>存储引擎是基于表的，而不是数据库。</strong></p><p>并且，你还可以根据 MySQL 定义的存储引擎实现标准接口来编写一个属于自己的存储引擎。这些非官方提供的存储引擎可以称为第三方存储引擎，区别于官方存储引擎。像目前最常用的 InnoDB 其实刚开始就是一个第三方存储引擎，后面由于过于优秀，其被 Oracle 直接收购了。</p><h3 id="myisam-和-innodb-有什么区别" tabindex="-1"><a class="header-anchor" href="#myisam-和-innodb-有什么区别" aria-hidden="true">#</a> MyISAM 和 InnoDB 有什么区别？</h3><p>MySQL 5.5 之前，MyISAM 引擎是 MySQL 的默认存储引擎，可谓是风光一时。</p><p>虽然，MyISAM 的性能还行，各种特性也还不错（比如全文索引、压缩、空间函数等）。但是，MyISAM 不支持事务和行级锁，而且最大的缺陷就是崩溃后无法安全恢复。</p><p>MySQL 5.5 版本之后，InnoDB 是 MySQL 的默认存储引擎。</p><p>言归正传！咱们下面还是来简单对比一下两者：</p><p><strong>1.是否支持行级锁</strong></p><p>MyISAM 只有表级锁(table-level locking)，而 InnoDB 支持行级锁(row-level locking)和表级锁,默认为行级锁。</p><p>也就说，MyISAM 一锁就是锁住了整张表，这在并发写的情况下是多么滴憨憨啊！这也是为什么 InnoDB 在并发写的时候，性能更牛皮了！</p><p><strong>2.是否支持事务</strong></p><p>MyISAM 不提供事务支持。</p><p>InnoDB 提供事务支持，实现了 SQL 标准定义了四个隔离级别，具有提交(commit)和回滚(rollback)事务的能力。并且，<u>InnoDB 默认使用的 REPEATABLE-READ（可重读）隔离级别是可以解决幻读问题发生的（基于 MVCC 和 Next-Key Lock）</u>。</p><p><strong>3.是否支持外键</strong></p><p>MyISAM 不支持，而 InnoDB 支持。</p><p><u>外键对于维护数据一致性非常有帮助，但是对性能有一定的损耗</u>。因此，通常情况下，我们是不建议在实际生产项目中使用外键的，<u>在业务代码中进行约束即可！</u></p><p>阿里的《Java 开发手册》也是明确规定禁止使用外键的。</p><p>不过，在代码中进行约束的话，对程序员的能力要求更高，具体是否要采用外键还是要根据你的项目实际情况而定。</p><p>总结：一般我们也是不建议在数据库层面使用外键的，应用层面可以解决。不过，这样会对数据的一致性造成威胁。具体要不要使用外键还是要根据你的项目来决定。</p><p><strong>4.是否支持数据库异常崩溃后的安全恢复</strong></p><p>MyISAM 不支持，而 InnoDB 支持。</p><p>使用 InnoDB 的数据库在异常崩溃后，数据库重新启动的时候会保证数据库恢复到崩溃前的状态。这个恢复的过程依赖于 <code>redo log</code> 。</p><p><strong>5.是否支持 MVCC</strong></p><p>MyISAM 不支持，而 InnoDB 支持。</p><p>讲真，这个对比有点废话，毕竟 MyISAM 连行级锁都不支持。MVCC 可以看作是行级锁的一个升级，可以有效减少加锁操作，提高性能。</p><p><strong>6.索引实现不一样。</strong></p><p>虽然 MyISAM 引擎和 InnoDB 引擎都是使用 B+Tree 作为索引结构，但是两者的实现方式不太一样。</p><p>InnoDB 引擎中，其数据文件本身就是索引文件。相比 MyISAM，索引文件和数据文件是分离的，其表数据文件本身就是按 B+Tree 组织的一个索引结构，树的叶节点 data 域保存了完整的数据记录。</p>',45),I=e('<p><strong>7.性能有差别。</strong></p><p>InnoDB 的性能比 MyISAM 更强大，不管是在读写混合模式下还是只读模式下，随着 CPU 核数的增加，InnoDB 的读写能力呈线性增长。MyISAM 因为读写不能并发，它的处理能力跟核数没关系。</p><p><strong>总结</strong> ：</p><ul><li>InnoDB 支持行级别的锁粒度，MyISAM 不支持，只支持表级别的锁粒度。</li><li>MyISAM 不提供事务支持。InnoDB 提供事务支持，实现了 SQL 标准定义了四个隔离级别。</li><li>MyISAM 不支持外键，而 InnoDB 支持。</li><li>MyISAM 不支持 MVCC，而 InnoDB 支持。</li><li>虽然 MyISAM 引擎和 InnoDB 引擎都是使用 B+Tree 作为索引结构，但是两者的实现方式不太一样。</li><li>MyISAM 不支持数据库异常崩溃后的安全恢复，而 InnoDB 支持。</li><li>InnoDB 的性能比 MyISAM 更强大。</li></ul><h3 id="myisam-和-innodb-如何选择" tabindex="-1"><a class="header-anchor" href="#myisam-和-innodb-如何选择" aria-hidden="true">#</a> MyISAM 和 InnoDB 如何选择？</h3><p>大多数时候我们使用的都是 InnoDB 存储引擎，在某些读密集的情况下，使用 MyISAM 也是合适的。不过，前提是你的项目不介意 MyISAM 不支持事务、崩溃恢复等缺点（可是~我们一般都会介意啊！）。</p><p>《MySQL 高性能》上面有一句话这样写到:</p><blockquote><p>不要轻易相信“MyISAM 比 InnoDB 快”之类的经验之谈，这个结论往往不是绝对的。在很多我们已知场景中，InnoDB 的速度都可以让 MyISAM 望尘莫及，尤其是用到了聚簇索引，或者需要访问的数据都可以放入内存的应用。</p></blockquote><p>一般情况下我们选择 InnoDB 都是没有问题的，但是某些情况下你并不在乎可扩展能力和并发能力，也不需要事务支持，也不在乎崩溃后的安全恢复问题的话，选择 MyISAM 也是一个不错的选择。但是一般情况下，我们都是需要考虑到这些问题的。</p><p>因此，对于咱们日常开发的业务系统来说，你几乎找不到什么理由再使用 MyISAM 作为自己的 MySQL 数据库的存储引擎。</p><h2 id="mysql-索引" tabindex="-1"><a class="header-anchor" href="#mysql-索引" aria-hidden="true">#</a> MySQL 索引</h2>',11),_=e(`<h2 id="mysql-查询缓存" tabindex="-1"><a class="header-anchor" href="#mysql-查询缓存" aria-hidden="true">#</a> MySQL 查询缓存</h2><p>执行查询语句的时候，会先查询缓存。不过，MySQL 8.0 版本后移除，因为这个功能不太实用</p><p><code>my.cnf</code> 加入以下配置，重启 MySQL 开启查询缓存</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">query_cache_type</span><span class="token punctuation">=</span><span class="token value attr-value">1</span>
<span class="token key attr-name">query_cache_size</span><span class="token punctuation">=</span><span class="token value attr-value">600000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>MySQL 执行以下命令也可以开启查询缓存</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">set</span> <span class="token value attr-value">global  query_cache_type=1;</span>
<span class="token key attr-name">set</span> <span class="token value attr-value">global  query_cache_size=600000;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如上，<strong>开启查询缓存后在同样的查询条件以及数据情况下，会直接在缓存中返回结果</strong>。这里的查询条件包括查询本身、当前要查询的数据库、客户端协议版本号等一些可能影响结果的信息。</p><p><strong>查询缓存不命中的情况：</strong></p><ol><li>任何两个查询在任何字符上的不同都会导致缓存不命中。</li><li>如果查询中包含任何用户自定义函数、存储函数、用户变量、临时表、MySQL 库中的系统表，其查询结果也不会被缓存。</li><li>缓存建立之后，MySQL 的查询缓存系统会跟踪查询中涉及的每张表，如果这些表（数据或结构）发生变化，那么和这张表相关的所有缓存数据都将失效。</li></ol><p><strong>缓存虽然能够提升数据库的查询性能，但是缓存同时也带来了额外的开销，每次查询后都要做一次缓存操作，失效后还要销毁。</strong> 因此，开启查询缓存要谨慎，尤其对于写密集的应用来说更是如此。如果开启，要注意合理控制缓存空间大小，一般来说其大小设置为几十 MB 比较合适。此外，<strong>还可以通过 <code>sql_cache</code> 和 <code>sql_no_cache</code> 来控制某个查询语句是否需要缓存：</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> sql_no_cache <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> usr<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="mysql-日志" tabindex="-1"><a class="header-anchor" href="#mysql-日志" aria-hidden="true">#</a> MySQL 日志</h2><ul><li>MySQL 中常见的日志有哪些？</li><li>慢查询日志有什么用？</li><li>binlog 主要记录了什么？</li><li>redo log 如何保证事务的持久性？</li><li>页修改之后为什么不直接刷盘呢？</li><li>binlog 和 redolog 有什么区别？</li><li>undo log 如何保证事务的原子性？</li><li>......</li></ul><h2 id="mysql-性能优化" tabindex="-1"><a class="header-anchor" href="#mysql-性能优化" aria-hidden="true">#</a> MySQL 性能优化</h2>`,14),q=e(`<h3 id="能用-mysql-直接存储文件-比如图片-吗" tabindex="-1"><a class="header-anchor" href="#能用-mysql-直接存储文件-比如图片-吗" aria-hidden="true">#</a> 能用 MySQL 直接存储文件（比如图片）吗？</h3><p>可以是可以，直接存储文件对应的二进制数据即可。不过，还是建议不要在数据库中存储文件，会严重影响数据库性能，消耗过多存储空间。</p><h3 id="mysql-如何存储-ip-地址" tabindex="-1"><a class="header-anchor" href="#mysql-如何存储-ip-地址" aria-hidden="true">#</a> MySQL 如何存储 IP 地址？</h3><p>可以将 IP 地址转换成整形数据存储，性能更好，占用空间也更小。</p><p>MySQL 提供了两个方法来处理 ip 地址</p><ul><li><code>INET_ATON()</code> ： 把 ip 转为无符号整型 (4-8 位)</li><li><code>INET_NTOA()</code> :把整型的 ip 转为地址</li></ul><p>插入数据前，先用 <code>INET_ATON()</code> 把 ip 地址转为整型，显示数据时，使用 <code>INET_NTOA()</code> 把整型的 ip 地址转为地址显示即可。</p><p>数据库中保存ip地址，字段一般会定义为：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token identifier"><span class="token punctuation">\`</span>ip<span class="token punctuation">\`</span></span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>因为ip地址<code>(255.255.255.255)</code>的最大长度是<code>15</code>，使用<code>15</code>位<code>char</code>已足够。</p><p><code>inet_aton</code> 把<code>ip</code>转为无符号整型(<code>4-8位</code>)</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>
<span class="token keyword">insert</span> <span class="token keyword">into</span> t_user<span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">\`</span>age<span class="token punctuation">\`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">\`</span>ip_info<span class="token punctuation">\`</span></span><span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span>

<span class="token string">&#39;liaoyy&#39;</span><span class="token punctuation">,</span><span class="token number">35</span><span class="token punctuation">,</span>INET_ATON<span class="token punctuation">(</span><span class="token string">&#39;192.168.1.11&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span>

<span class="token keyword">SELECT</span> ip_info<span class="token punctuation">,</span>INET_NTOA<span class="token punctuation">(</span>ip_info<span class="token punctuation">)</span> <span class="token keyword">from</span> t_user

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="mysql-数据类型及长度" tabindex="-1"><a class="header-anchor" href="#mysql-数据类型及长度" aria-hidden="true">#</a> mysql 数据类型及长度</h2><p>mysql有几种数据类型可以限制类型的&quot;长度&quot;，有 <code>CHAR(Length)</code>、<code>VARCHAR(Length)</code>、</p><p><code>TINYINT(Length)</code>、<code>SMALLINT(Length)</code>、<code>MEDIUMINT(Length)</code>、<code>INT(Length)</code>、<code>BIGINT(Length)</code>、</p><p><code>FLOAT(Length, Decimals)</code>、<code>DOUBLE(Length, Decimals)</code>和<code>DECIMAL(Length, Decimals)</code>。</p><p>然而，这些<u>数据类型的长度，并不是都指数据的大小</u>。具体说就是：</p><p>（1）<code>CHAR、VARCAHR</code>的长度是指<code>字符的长度</code>，例如<code>CHAR[3]</code>则只能放字符串&quot;123&quot;，如果插入数据&quot;1234&quot;，则从高位截取，变为&quot;123&quot;。 VARCAHR同理。</p><p>（2）<code>TINYINT、SMALLINT、MEDIUMINT、INT</code>和<code>BIGINT</code>的长度，其实和数据的大小无关！Length指的是显示宽度，</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">table</span> test<span class="token punctuation">(</span>id <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> zerofill<span class="token punctuation">)</span><span class="token punctuation">;</span>  

<span class="token keyword">insert</span> <span class="token keyword">into</span> test<span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">1234</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  

<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> test<span class="token punctuation">;</span>  

<span class="token operator">+</span><span class="token comment">------+  </span>

<span class="token operator">|</span> id   <span class="token operator">|</span>  

<span class="token operator">+</span><span class="token comment">------+  </span>

<span class="token operator">|</span>  <span class="token number">001</span> <span class="token operator">|</span>  

<span class="token operator">|</span> <span class="token number">1234</span> <span class="token operator">|</span>  

<span class="token operator">+</span><span class="token comment">------+  </span>

<span class="token number">2</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>  

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>id的显示宽度为3，不足的左边补0，数据长度超过的则原样输出。如果没有zerofill，则看不出显示宽度，没有前导零。</p><p>3）<code>FLOAT、DOUBLE</code>和<code>DECIMAL</code>的长度指的是<code>全部数位（包括小数点后面的）</code>，例如<code>DECIMAL(4,1)</code>指的是<code>全部位数为4</code>，<code>小数点后1位</code>，如果插入<code>1234</code>，则查询的数据是<code>999.9</code>。过程如下</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">alter</span> <span class="token keyword">table</span> test <span class="token keyword">add</span> realnum <span class="token keyword">decimal</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  

<span class="token keyword">insert</span> <span class="token keyword">into</span> test<span class="token punctuation">(</span>id<span class="token punctuation">,</span>realnum<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1234</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 

<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> test<span class="token punctuation">;</span>  

<span class="token operator">+</span><span class="token comment">------+---------+  </span>

<span class="token operator">|</span> id   <span class="token operator">|</span> realnum <span class="token operator">|</span>  

<span class="token operator">+</span><span class="token comment">------+---------+  </span>

<span class="token operator">|</span>  <span class="token number">001</span> <span class="token operator">|</span>    <span class="token boolean">NULL</span> <span class="token operator">|</span>  

<span class="token operator">|</span> <span class="token number">1234</span> <span class="token operator">|</span>    <span class="token boolean">NULL</span> <span class="token operator">|</span>  

<span class="token operator">|</span>  <span class="token number">002</span> <span class="token operator">|</span>   <span class="token number">999.9</span> <span class="token operator">|</span>  

<span class="token operator">+</span><span class="token comment">------+---------+  </span>

<span class="token number">3</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.02</span> sec<span class="token punctuation">)</span>  

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+m+'" alt="" loading="lazy"></p><p><img src="'+v+'" alt="" loading="lazy"></p>',25);function Q(A,f){const t=l("ExternalLinkIcon"),o=l("RouterLink");return r(),d("div",null,[s("div",h,[b,s("p",null,[s("a",M,[n("mysql 使用inet_aton和inet_ntoa处理ip地址数据"),a(t)])]),s("p",null,[s("a",g,[n("分析MySQL数据类型的长度"),a(t)])])]),S,s("blockquote",null,[s("p",null,[n("建议配合 "),a(o,{to:"/interview/db/mysql/emphasis/mysql-execute.html"},{default:p(()=>[n("SQL的执行过程")]),_:1}),n(" 这篇文章来理解 MySQL 基础架构。另外，“一个 SQL 语句在 MySQL 中的执行流程”也是面试中比较常问的一个问题。")])]),L,s("p",null,[n("详细区别："),a(o,{to:"/interview/db/mysql/emphasis/mysql-index.html"},{default:p(()=>[n("MySQL索引详解")]),_:1}),n("。")]),I,s("p",null,[n("MySQL 索引相关的问题比较多，对于面试和工作都比较重要，于是，我单独抽了一篇文章专门来总结 MySQL 索引相关的知识点和问题： "),a(o,{to:"/interview/db/mysql/emphasis/mysql-index.html"},{default:p(()=>[n("MySQL索引详解")]),_:1}),n(" 。")]),_,s("p",null,[n("关于 MySQL 性能优化的建议总结，请看这篇文章："),a(o,{to:"/interview/db/mysql/mysql-optimization.html"},{default:p(()=>[n("MySQL高性能优化")]),_:1}),n(" 。")]),q])}const w=c(y,[["render",Q],["__file","常见面试题.html.vue"]]);export{w as default};
