const e=JSON.parse('{"key":"v-b4c37aa8","path":"/interview/java/concurrency/lock.html","title":"锁相关","lang":"zh-CN","frontmatter":{"title":"锁相关","icon":"markdown","order":1,"category":["面试"],"tag":["并发编程"],"description":"synchronized 关键字 synchronized 是什么？有什么用？ synchronized 是 Java 中的一个关键字，翻译成中文是同步的意思，主要解决的是多个线程之间访问资源的同步性， 可以保证被它修饰的方法或者代码块在任意时刻只能有一个线程执行。 在 Java 早期版本中，synchronized 属于 重量级锁，效率低下。这是因为监视器锁（monitor）是依赖于底层的操作系统的 Mutex Lock 来实现的，Java 的线程是映射到操作系统的原生线程之上的。如果要挂起或者唤醒一个线程，都需要操作系统帮忙完成，而操作系统实现线程之间的切换时需要从用户态转换到内核态，这个状态之间的转换需要相对比较长的时间，时间成本相对较高。","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/interview/java/concurrency/lock.html"}],["meta",{"property":"og:site_name","content":"JavaNative"}],["meta",{"property":"og:title","content":"锁相关"}],["meta",{"property":"og:description","content":"synchronized 关键字 synchronized 是什么？有什么用？ synchronized 是 Java 中的一个关键字，翻译成中文是同步的意思，主要解决的是多个线程之间访问资源的同步性， 可以保证被它修饰的方法或者代码块在任意时刻只能有一个线程执行。 在 Java 早期版本中，synchronized 属于 重量级锁，效率低下。这是因为监视器锁（monitor）是依赖于底层的操作系统的 Mutex Lock 来实现的，Java 的线程是映射到操作系统的原生线程之上的。如果要挂起或者唤醒一个线程，都需要操作系统帮忙完成，而操作系统实现线程之间的切换时需要从用户态转换到内核态，这个状态之间的转换需要相对比较长的时间，时间成本相对较高。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://vuepress-theme-hope-docs-demo.netlify.app/"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"锁相关"}],["meta",{"property":"article:author","content":"lojzes"}],["meta",{"property":"article:tag","content":"并发编程"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"锁相关\\",\\"image\\":[\\"https://vuepress-theme-hope-docs-demo.netlify.app/\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"lojzes\\",\\"url\\":\\"\\"}]}"]]},"headers":[{"level":2,"title":"synchronized 关键字","slug":"synchronized-关键字","link":"#synchronized-关键字","children":[{"level":3,"title":"synchronized 是什么？有什么用？","slug":"synchronized-是什么-有什么用","link":"#synchronized-是什么-有什么用","children":[]},{"level":3,"title":"如何使用 synchronized?","slug":"如何使用-synchronized","link":"#如何使用-synchronized","children":[]},{"level":3,"title":"构造方法可以用 synchronized 修饰么？","slug":"构造方法可以用-synchronized-修饰么","link":"#构造方法可以用-synchronized-修饰么","children":[]},{"level":3,"title":"synchronized 底层原理了解吗？","slug":"synchronized-底层原理了解吗","link":"#synchronized-底层原理了解吗","children":[]},{"level":3,"title":"JDK1.6 之后的 synchronized 底层做了哪些优化？","slug":"jdk1-6-之后的-synchronized-底层做了哪些优化","link":"#jdk1-6-之后的-synchronized-底层做了哪些优化","children":[]},{"level":3,"title":"synchronized 和 volatile 有什么区别？","slug":"synchronized-和-volatile-有什么区别","link":"#synchronized-和-volatile-有什么区别","children":[]}]},{"level":2,"title":"ReentrantLock","slug":"reentrantlock","link":"#reentrantlock","children":[{"level":3,"title":"ReentrantLock 是什么？","slug":"reentrantlock-是什么","link":"#reentrantlock-是什么","children":[]},{"level":3,"title":"公平锁和非公平锁有什么区别？","slug":"公平锁和非公平锁有什么区别","link":"#公平锁和非公平锁有什么区别","children":[]},{"level":3,"title":"synchronized 和 ReentrantLock 有什么区别？","slug":"synchronized-和-reentrantlock-有什么区别","link":"#synchronized-和-reentrantlock-有什么区别","children":[]},{"level":3,"title":"可中断锁和不可中断锁有什么区别？","slug":"可中断锁和不可中断锁有什么区别","link":"#可中断锁和不可中断锁有什么区别","children":[]}]},{"level":2,"title":"ReentrantReadWriteLock","slug":"reentrantreadwritelock","link":"#reentrantreadwritelock","children":[{"level":3,"title":"ReentrantReadWriteLock 是什么？","slug":"reentrantreadwritelock-是什么","link":"#reentrantreadwritelock-是什么","children":[]},{"level":3,"title":"ReentrantReadWriteLock 适合什么场景？","slug":"reentrantreadwritelock-适合什么场景","link":"#reentrantreadwritelock-适合什么场景","children":[]},{"level":3,"title":"共享锁和独占锁有什么区别？","slug":"共享锁和独占锁有什么区别","link":"#共享锁和独占锁有什么区别","children":[]},{"level":3,"title":"线程持有读锁还能获取写锁吗？","slug":"线程持有读锁还能获取写锁吗","link":"#线程持有读锁还能获取写锁吗","children":[]},{"level":3,"title":"读锁为什么不能升级为写锁？","slug":"读锁为什么不能升级为写锁","link":"#读锁为什么不能升级为写锁","children":[]}]},{"level":2,"title":"StampedLock","slug":"stampedlock","link":"#stampedlock","children":[{"level":3,"title":"StampedLock 是什么？","slug":"stampedlock-是什么","link":"#stampedlock-是什么","children":[]},{"level":3,"title":"StampedLock 的性能为什么更好？","slug":"stampedlock-的性能为什么更好","link":"#stampedlock-的性能为什么更好","children":[]},{"level":3,"title":"StampedLock 适合什么场景？","slug":"stampedlock-适合什么场景","link":"#stampedlock-适合什么场景","children":[]}]}],"readingTime":{"minutes":15.95,"words":4785},"filePathRelative":"interview/java/concurrency/lock.md","excerpt":"<h2> synchronized 关键字</h2>\\n<h3> synchronized 是什么？有什么用？</h3>\\n<p><code>synchronized</code> 是 Java 中的一个关键字，翻译成中文是同步的意思，主要解决的是多个线程之间访问资源的同步性，\\n可以保证被它修饰的方法或者代码块在任意时刻只能有一个线程执行。</p>\\n<p>在 Java 早期版本中，<code>synchronized</code> 属于 <strong>重量级锁</strong>，效率低下。这是因为监视器锁（monitor）是依赖于底层的操作系统的\\n<code>Mutex Lock</code> 来实现的，Java 的线程是映射到操作系统的原生线程之上的。如果要挂起或者唤醒一个线程，都需要操作系统帮忙完成，而操作系统实现线程之间的切换时需要从用户态转换到内核态，这个状态之间的转换需要相对比较长的时间，时间成本相对较高。</p>","copyright":{"author":"lojzes","license":"MIT"},"autoDesc":true,"git":{}}');export{e as data};
