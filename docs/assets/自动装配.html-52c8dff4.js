import{_ as e,X as t,Y as p,Z as n,a1 as s,$ as o,a2 as c,C as i}from"./framework-0b23a550.js";const r={},d={class:"hint-container tip"},l=n("p",{class:"hint-container-title"},"参考",-1),u={href:"https://juejin.cn/post/7162568709955911717",target:"_blank",rel:"noopener noreferrer"},k={href:"https://juejin.cn/post/7149896017574363166",target:"_blank",rel:"noopener noreferrer"},m=c(`<blockquote><p>早期的Spring项目需要添加需要配置繁琐的xml,比如MVC、事务、数据库连接等繁琐的配置。Spring Boot的出现就无需这些繁琐的配置，因为Spring Boot基于约定大于配置的理念，在项目启动时候，将约定的配置类自动配置到IOC容器里。这些都因为Spring Boot有自动配置的特性。</p></blockquote><p>自动配置主要由 <code>@EnableAutoConfiguration</code> 实现，添加了 <code>@EnableAutoConfiguration</code> 注解， 会导入 <code>AutoConfigurationImportSelector</code> 类，里面的 <code>selectImports</code> 方法通过 <code>SpringFactoriesLoader.loadFactoryNames()</code> 扫描所有含有 <code>META-INF/spring.factories</code> 的 <code>jar</code> 包,将对应 <code>key</code> 为 <code>@EnableAutoConfiguration</code> 注解全名对应的 <code>value</code> 类全部装配到 <code>IOC</code> 容器中。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>Spring Boot自动配置原理</p><p>1、<code>@SpringBootApplication</code> 的 <code>@EnableAutoConfiguration</code>注解导入<code>AutoConfigurationImportSelector</code>类。</p><p>2、执行<code>selectImports</code>方法调用<code>SpringFactoriesLoader.loadFactoryNames()</code>扫描</p><p>所有<code>jar</code>下面的对应的<code>META-INF/spring.factories</code>文件.</p><p>3、限定为<code>@EnableAutoConfiguration</code>对应的<code>value</code>，将这些装配条件的装配到IOC容器中。</p><p>自动装配简单来说就是自动将第三方的组件的bean装载到IOC容器内，不需要再去写bean相关的配置，符合约定大于配置理念。</p><p><code>Spring Boot</code>基于约定大于配置的理念，配置如果没有额外的配置的话，就给按照默认的配置使用约定的默认值，</p><p>按照约定配置到<code>IOC</code>容器中，无需开发人员手动添加配置，加快开发效率。</p><h2 id="常用注解" tabindex="-1"><a class="header-anchor" href="#常用注解" aria-hidden="true">#</a> 常用注解</h2><p><code>@ConditionalOnBean</code>：当SpringIoc容器内存在指定Bean的条件</p><p><code>@ConditionalOnSingleCandidate</code>：当指定Bean在SpringIoc容器内只有一个，或者虽然有多个但是指定首选的Bean</p><p><code>@ConditionalOnMissingBean</code>：当SpringIoc容器内不存在指定Bean的条件</p><p><code>@ConditionalOnClass</code>：当SpringIoc容器内存在指定Class的条件</p><p><code>@ConditionalOnMissingClass</code>：当SpringIoc容器内不存在指定Class的条件</p><p><code>@ConditionalOnExpression</code>：基于SpEL表达式作为判断条件</p><p><code>@ConditionalOnJava</code>：基于JVM版本作为判断条件</p><p><code>@ConditionalOnJndi</code>：在JNDI存在时查找指定的位置</p><p><code>@ConditionalOnResource</code>：类路径是否有指定的值</p><p><code>@ConditionalOnProperty</code>：指定的属性是否有指定的值</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">ConditionalOnProperty</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">//数组，获取对应property名称的值，与name不可同时使用  </span>
    <span class="token class-name">String</span> <span class="token function">prefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span><span class="token comment">//property名称的前缀，可有可无  </span>
    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//数组，property完整名称或部分名称（可与prefix组合使用，组成完整的property名称），与value不可同时使用  </span>
    <span class="token class-name">String</span> <span class="token function">havingValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span><span class="token comment">//可与name组合使用，比较获取到的属性值与havingValue给定的值是否相同，相同才加载配置  </span>
    <span class="token keyword">boolean</span> <span class="token function">matchIfMissing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">//缺少该property时是否可以加载。如果为true，没有该property也会正常加载；反之报错  </span>
    <span class="token keyword">boolean</span> <span class="token function">relaxedNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">//是否可以松散匹配，至今不知道怎么使用的  </span>
<span class="token punctuation">}</span> 

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>@ConditionalOnNotWebApplication</code>：当前项目不是Web项目的条件</p><p><code>@ConditionalOnWebApplication</code>：当前项目是Web项目的条件</p><p><code>@AutoConfigureBefore</code></p><p><code>@AutoConfigureAfter</code></p><p><code>@AutoConfigureOrder</code></p><p><code>@EnableConfigurationProperties</code></p><p><code>@ConfigurationProperties</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token class-name">KafkaProperties</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token class-name">KafkaAnnotationDrivenConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">KafkaStreamsAnnotationDrivenConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">KafkaAutoConfiguration</span> <span class="token punctuation">{</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>

<span class="token class-name">KafkaProperties</span><span class="token operator">:</span>

<span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;spring.kafka&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">KafkaProperties</span> <span class="token punctuation">{</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="starter" tabindex="-1"><a class="header-anchor" href="#starter" aria-hidden="true">#</a> starter</h2><p><code>starter</code> 就是整理了依赖的 <code>maven</code> 配置，主要指 <code>maven</code> 相关依赖配置到单独的一个工程以避免引入过多的 <code>maven</code> 配置</p><h3 id="为什么要用starter" tabindex="-1"><a class="header-anchor" href="#为什么要用starter" aria-hidden="true">#</a> 为什么要用starter？</h3><p>开发具体的操作步骤如下：</p><ul><li>到maven仓库去找需要引入的<code>mybatis jar</code>包，选取合适的版本。</li><li>到maven仓库去找 <code>mybatis-spring</code> 整合的<code>jar</code>包，选取合适的版本。</li><li>在<code>spring</code>的<code>applicationContext.xml</code>文件中配置<code>dataSource</code>和<code>mybatis</code>相关信息。</li></ul><p>需要再把上面的<code>步骤再重复</code>一次，工作量无形当中增加了不少，而且有很多重复的工作。</p><p>另外，还是有个问题，每次到要到maven中找合适的版本，如果哪次找的mybatis.jar包 和 mybatis-spring.jar包<code>版本不兼容</code>，程序不是会出现问题？</p><p>SpringBoot为了解决以上两个问题引入了starter机制。</p><h3 id="starter有哪些要素" tabindex="-1"><a class="header-anchor" href="#starter有哪些要素" aria-hidden="true">#</a> starter有哪些要素？</h3><p><code>mybatis-spring-boot-starter.jar</code>是如何定义的</p><pre><code>pom.protperties 配置maven所需的项目version、groupId和artifactId。
pom.xml 配置所依赖的jar包。
MANIFEST.MF 这个文件描述了该Jar文件的很多信息。
spring.provides 配置所依赖的artifactId，给IDE使用的，没有其他的作用。
</code></pre><p><code>mybatis-spring-boot-autoconfigure.jar</code></p><pre><code>pom.properties 配置maven所需的项目version、groupId和artifactId
pom.xml 配置所依赖的jar包
additional-spring-configuration-metadata.json 手动添加IDE提示功能
MANIFEST.MF 这个文件描述了该Jar文件的很多信息
spring.factories SPI会读取的文件
spring-configuration-metadata.json 系统自动生成的IDE提示功能
ConfigurationCustomizer 自定义Configuration回调接口
MybatisAutoConfiguration mybatis配置类
MybatisProperties mybatis属性类
SpringBootVFS 扫描嵌套的jar包中的类
</code></pre><p><code>spring-configuration-metadata.json</code> 和 <code>additional-spring-configuration-metadata.json</code> 的功能差不多，我们在<code>applicationContext.properties</code>文件中输入<code>spring</code>时，会自动出现下面的配置信息可供选择，就是这个功能了。</p><p>这两个文件有什么区别?</p><p>答：如果 <code>pom.xml </code>中引入了 <code>spring-boot-configuration-processor </code>包，则会自动生成<code>spring-configuration-metadata.json</code>。</p><p>如果需要<code>手动修改里面的元数据</code>，则可以在<code>additional-spring-configuration-metadata.json</code>中编辑，最终两个文件中的元数据会合并到一起。</p><h2 id="如何定义自己的starter" tabindex="-1"><a class="header-anchor" href="#如何定义自己的starter" aria-hidden="true">#</a> 如何定义自己的starter？</h2><p>1 创建一个空的项目</p><p>命名规则： xxx-spring-boot-starter.jar</p><p>2 pom 引用 xxx-spring-boot-autoconfigure</p><p>3 创建 xxx-spring-boot-autoconfigure 项目</p><p>使用 引用 xxx-spring-boot-starter.jar</p>`,54);function g(v,f){const a=i("ExternalLinkIcon");return t(),p("div",null,[n("div",d,[l,n("p",null,[n("a",u,[s(" SpringBoot 自动装配原理 "),o(a)])]),n("p",null,[n("a",k,[s("SpringBoot的starter到底是什么？ "),o(a)])])]),m])}const h=e(r,[["render",g],["__file","自动装配.html.vue"]]);export{h as default};
