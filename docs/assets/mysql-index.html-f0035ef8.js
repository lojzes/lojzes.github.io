import{_ as p,X as t,Y as o,Z as n,a1 as a,$ as e,a2 as c,C as l}from"./framework-0b23a550.js";const i="/assets/5-504599f9.webp",r="/assets/6-2e4947e8.webp",k="/assets/7-c2eb2c20.webp",d="/assets/8-964f1cec.webp",u="/assets/4-60635b6b.webp",m={},v={class:"hint-container info"},b=n("p",{class:"hint-container-title"},"参考",-1),y={href:"https://segmentfault.com/a/1190000021464570",target:"_blank",rel:"noopener noreferrer"},E={href:"https://blog.csdn.net/qq_38688267/article/details/104900507",target:"_blank",rel:"noopener noreferrer"},w={href:"https://juejin.cn/post/6844904062329028621",target:"_blank",rel:"noopener noreferrer"},h=c(`<h2 id="回表" tabindex="-1"><a class="header-anchor" href="#回表" aria-hidden="true">#</a> 回表</h2><p>使用的存储引擎：MySQL5.7 InnoDB</p><h3 id="聚簇索引" tabindex="-1"><a class="header-anchor" href="#聚簇索引" aria-hidden="true">#</a> 聚簇索引</h3><ul><li>如果表设置了主键，则主键就是聚簇索引</li><li>如果表没有主键，则会默认第一个NOT NULL，且唯一（UNIQUE）的列作为聚簇索引</li><li>以上都没有，则会默认创建一个隐藏的row_id作为聚簇索引</li></ul><blockquote><p>InnoDB的聚簇索引的叶子节点存储的是行记录（其实是页结构，一个页包含多行数据），InnoDB必须要有至少一个聚簇索引。 由此可见，使用聚簇索引查询会很快，因为可以直接定位到行记录。</p></blockquote><h3 id="普通索引" tabindex="-1"><a class="header-anchor" href="#普通索引" aria-hidden="true">#</a> 普通索引</h3><pre><code>普通索引也叫二级索引，除聚簇索引外的索引，即非聚簇索引。
InnoDB的普通索引叶子节点存储的是主键（聚簇索引）的值，而MyISAM的普通索引存储的是记录指针。
</code></pre><h2 id="索引存储结构" tabindex="-1"><a class="header-anchor" href="#索引存储结构" aria-hidden="true">#</a> 索引存储结构</h2><p>id 是主键，所以是聚簇索引，其叶子节点存储的是对应行记录的数据</p><p><img src="`+i+'" alt="" loading="lazy"></p><p>age 是普通索引（二级索引），非聚簇索引，其叶子节点存储的是聚簇索引的的值</p><p><img src="'+r+'" alt="" loading="lazy"></p><h3 id="聚簇索引查找过程" tabindex="-1"><a class="header-anchor" href="#聚簇索引查找过程" aria-hidden="true">#</a> 聚簇索引查找过程</h3><p>如果查询条件为普通索引（非聚簇索引），需要扫描两次B+树，第一次扫描通过普通索引定位到聚簇索引的值， 然后第二次扫描通过聚簇索引的值定位到要查找的行记录数据。 如：<code>select * from user where age = 30;</code></p><ol><li>先通过普通索引 age=30 定位到主键值 id=1</li><li>再通过聚集索引 id=1 定位到行记录数据</li></ol><p><img src="'+k+'" alt="" loading="lazy"></p><p>普通索引查找过程第一步</p><p><img src="'+d+'" alt="" loading="lazy"></p><h3 id="回表-1" tabindex="-1"><a class="header-anchor" href="#回表-1" aria-hidden="true">#</a> 回表</h3><p>先通过普通索引的值定位聚簇索引值，再通过聚簇索引的值定位行记录数据，需要扫描两次索引B+树，它的性能较扫一遍索引树更低。</p><h2 id="索引失效" tabindex="-1"><a class="header-anchor" href="#索引失效" aria-hidden="true">#</a> 索引失效</h2><p><img src="'+u+`" alt="" loading="lazy"></p><h2 id="测试数据" tabindex="-1"><a class="header-anchor" href="#测试数据" aria-hidden="true">#</a> 测试数据</h2><p>默认 mysql8</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 创建测试表</span>
<span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token identifier"><span class="token punctuation">\`</span>test_idx<span class="token punctuation">\`</span></span><span class="token punctuation">;</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">\`</span>test_idx<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span>
  <span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>unique_idx<span class="token punctuation">\`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>notnull_idx<span class="token punctuation">\`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>str_idx<span class="token punctuation">\`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>normal_idx<span class="token punctuation">\`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>str_col<span class="token punctuation">\`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token keyword">UNIQUE</span> <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">\`</span>idx_unique_idx<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>unique_idx<span class="token punctuation">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">\`</span>idx_str_idx<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>str_idx<span class="token punctuation">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">\`</span>idx_normal_idx<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>normal_idx<span class="token punctuation">\`</span></span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span>
<span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span>

<span class="token comment">-- 插入几条测试数据，因为当表里没有数据时，部分使用到索引的情况会失效。</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> test_idx <span class="token keyword">VALUES</span> 
<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&#39;111&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">&#39;2&#39;</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">&#39;222&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">&#39;3&#39;</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">&#39;333&#39;</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="一个独立索引" tabindex="-1"><a class="header-anchor" href="#一个独立索引" aria-hidden="true">#</a> 一个独立索引</h2><h3 id="like" tabindex="-1"><a class="header-anchor" href="#like" aria-hidden="true">#</a> like</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 无法使用索引</span>
    <span class="token keyword">EXPLAIN</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> test_idx <span class="token keyword">where</span> bid <span class="token operator">like</span> <span class="token string">&#39;%1%&#39;</span><span class="token punctuation">;</span>
<span class="token comment">-- 可以使用索引</span>
    <span class="token keyword">EXPLAIN</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> test_idx <span class="token keyword">where</span> bid <span class="token operator">like</span> <span class="token string">&#39;1%&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="条件中对索引列进行运算或使用函数" tabindex="-1"><a class="header-anchor" href="#条件中对索引列进行运算或使用函数" aria-hidden="true">#</a> 条件中对索引列进行运算或使用函数</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 无法使用索引</span>
    <span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> test_idx <span class="token keyword">WHERE</span> SUBSTR<span class="token punctuation">(</span>bid<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> test_idx <span class="token keyword">WHERE</span> id <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

<span class="token comment">-- 可以使用索引</span>
    <span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> test_idx <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">4</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> test_idx <span class="token keyword">WHERE</span> id <span class="token operator">=</span> TIME_TO_SEC<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="不可空索引使用-is-not-null-仅当查询列只有该索引列时会使用索引" tabindex="-1"><a class="header-anchor" href="#不可空索引使用-is-not-null-仅当查询列只有该索引列时会使用索引" aria-hidden="true">#</a> 不可空索引使用 is not null，仅当查询列只有该索引列时会使用索引</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 无法使用索引</span>
    <span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> test_idx <span class="token keyword">WHERE</span> notnull_idx <span class="token operator">IS</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span>
<span class="token comment">-- 可以使用索引</span>
    <span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> notnull_idx <span class="token keyword">FROM</span> test_idx <span class="token keyword">WHERE</span> notnull_idx <span class="token operator">IS</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> test_idx <span class="token keyword">WHERE</span> normal_idx <span class="token operator">IS</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用or且存在非索引列" tabindex="-1"><a class="header-anchor" href="#使用or且存在非索引列" aria-hidden="true">#</a> 使用OR且存在非索引列</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>
<span class="token comment">-- 无法使用索引</span>
<span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> test_idx <span class="token keyword">WHERE</span> id <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">OR</span> str_col <span class="token operator">=</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">;</span>
<span class="token comment">-- 使用OR时，OR包含的所有列必须都是独立索引才有可能用到索引</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用-not-in、in、is-null、is-not-null-且返回值中不止包含条件索引列。" tabindex="-1"><a class="header-anchor" href="#使用-not-in、in、is-null、is-not-null-且返回值中不止包含条件索引列。" aria-hidden="true">#</a> 使用 NOT IN、IN、IS NULL、IS NOT NULL，且返回值中不止包含条件索引列。</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>
<span class="token comment">-- 部分情况下可以使用索引 </span>
<span class="token comment">-- 当表里没有数据时不使用索引</span>
<span class="token comment">-- 本次测试当后面的条件查询的返回值大于等于总数据50%时不使用索引;少于总数据50%则使用索引</span>
<span class="token comment">-- 该数据不一定准，这跟数据总量、表统计信息等会有不同的表现，因此还是得看最终优化器的选择！</span>
    <span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> test_idx <span class="token keyword">WHERE</span> normal_idx <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> test_idx <span class="token keyword">WHERE</span> normal_idx <span class="token operator">NOT</span> <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> test_idx <span class="token keyword">WHERE</span> normal_idx <span class="token operator">IS</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> test_idx <span class="token keyword">WHERE</span> normal_idx <span class="token operator">IS</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">拓展</p><p>MySQL环境变量<code>eq_range_index_dive_limit</code>的值对IN语法有很大影响，该参数表示使用索引情况下IN中参数的最大数量。 MySQL 5.7.3以及之前的版本中，<code>eq_range_index_dive_limit</code> 的默认值为10，之后的版本默认值为<code>200</code>。 我们拿MySQL8.0.19举例，<code>eq_range_index_dive_limit=200</code>表示当IN (...)中的值 &gt;200个时，该查询一定不会走索引。 &lt;=200则可能用到索引。</p></div><h3 id="使用非主键范围条件查询时-部分情况索引失效。" tabindex="-1"><a class="header-anchor" href="#使用非主键范围条件查询时-部分情况索引失效。" aria-hidden="true">#</a> 使用非主键范围条件查询时，部分情况索引失效。</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 部分情况下可以使用索引 </span>
<span class="token comment">-- 当表里没有数据时不使用索引</span>
<span class="token comment">-- 本次测试当范围条件查询的返回值大于等于总数据50%时不使用索引;少于总数据50%则使用索引</span>
<span class="token comment">-- 该数据不一定准，这跟数据总量、表统计信息等会有不同的表现，因此还是得看最终优化器的选择！</span>
    <span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> test_idx <span class="token keyword">WHERE</span> normal_idx <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> test_idx <span class="token keyword">WHERE</span> normal_idx <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> test_idx <span class="token keyword">WHERE</span> normal_idx <span class="token operator">BETWEEN</span> <span class="token number">0</span> <span class="token operator">AND</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> test_idx <span class="token keyword">WHERE</span> normal_idx <span class="token operator">BETWEEN</span> <span class="token number">2</span> <span class="token operator">AND</span> <span class="token number">5</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="mysql5-7-使用-is-not-null或-is-null-部分情况下索引失效。" tabindex="-1"><a class="header-anchor" href="#mysql5-7-使用-is-not-null或-is-null-部分情况下索引失效。" aria-hidden="true">#</a> MySQL5.7，使用 IS NOT NULL或 IS NULL 部分情况下索引失效。</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 部分情况下可以使用索引 </span>
<span class="token comment">-- 当表里没有数据时索引失效</span>
<span class="token comment">-- 本次测试条件查询的返回值大于等于总数据50%时不使用索引;少于总数据50%则使用索引</span>
<span class="token comment">-- 该数据不一定准，这跟数据总量、表统计信息等会有不同的表现，因此还是得看最终优化器的选择！</span>
    <span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> normal_idx <span class="token keyword">FROM</span> test_idx <span class="token keyword">WHERE</span> normal_idx <span class="token operator">IS</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> normal_idx <span class="token keyword">FROM</span> test_idx <span class="token keyword">WHERE</span> normal_idx <span class="token operator">IS</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="mysql5-7-使用-或-in-或-not-in-部分情况下索引失效" tabindex="-1"><a class="header-anchor" href="#mysql5-7-使用-或-in-或-not-in-部分情况下索引失效" aria-hidden="true">#</a> MySQL5.7，使用 != 或 IN 或 NOT IN 部分情况下索引失效</h2><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>
<span class="token comment">-- 部分情况下可以使用索引 </span>
<span class="token comment">-- 本次测试当条件查询的返回值大于等于总数据50%时不使用索引;少于总数据50%则使用索引</span>
<span class="token comment">-- 该数据不一定准，这跟数据总量、表统计信息等会有不同的表现，因此还是得看最终优化器的选择！</span>
    <span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> test_idx <span class="token keyword">WHERE</span> normal_idx <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> test_idx <span class="token keyword">WHERE</span> normal_idx <span class="token operator">NOT</span> <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 使用 != 也跟数据的筛选率有关，具体数值不能确定(但肯定筛选率要&gt;50%)。视实际情况而定，还得看优化器的选择。</span>
<span class="token comment">-- 可能使用索引，也可能不使用：</span>
	 <span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> test_idx <span class="token keyword">WHERE</span> normal_idx <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 可以使用索引,但是这里不是使用索引去查数据，而且是去查索引键值。</span>
<span class="token comment">-- 即先根据该索引去查其他索引的值，再根据查出来的索引值去查数据。</span>
<span class="token comment">-- extra中显示 Using index 均表示该情况。</span>
    <span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> normal_idx <span class="token keyword">FROM</span> test_idx <span class="token keyword">WHERE</span> normal_idx <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> normal_idx <span class="token keyword">FROM</span> test_idx <span class="token keyword">WHERE</span> normal_idx <span class="token operator">NOT</span> <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="mysql5-7-表关联时-关联字段字符集不一致会导致索引失效。" tabindex="-1"><a class="header-anchor" href="#mysql5-7-表关联时-关联字段字符集不一致会导致索引失效。" aria-hidden="true">#</a> MySQL5.7，表关联时，关联字段字符集不一致会导致索引失效。</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>
<span class="token comment">-- 创建一个字符集与之前的表不一致的表</span>
 <span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">\`</span>test_idx2<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span>
      <span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>
      <span class="token identifier"><span class="token punctuation">\`</span>unique_idx<span class="token punctuation">\`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
      <span class="token identifier"><span class="token punctuation">\`</span>notnull_idx<span class="token punctuation">\`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
      <span class="token identifier"><span class="token punctuation">\`</span>str_idx<span class="token punctuation">\`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
      <span class="token identifier"><span class="token punctuation">\`</span>normal_idx<span class="token punctuation">\`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
      <span class="token identifier"><span class="token punctuation">\`</span>str_col<span class="token punctuation">\`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
      <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span><span class="token punctuation">,</span>
      <span class="token keyword">UNIQUE</span> <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">\`</span>idx_unique_idx<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>unique_idx<span class="token punctuation">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">\`</span>idx_str_idx<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>str_idx<span class="token punctuation">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">\`</span>idx_normal_idx<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>normal_idx<span class="token punctuation">\`</span></span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span>
    <span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8mb4<span class="token punctuation">;</span>
<span class="token comment">-- 插入数据，如果没有数据，在MySQL8.0中索引也会失效</span>
    <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> test_idx2 <span class="token keyword">values</span> 
    <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&#39;11&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">&#39;2&#39;</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">&#39;22&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">&#39;3&#39;</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">&#39;33&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 无法使用索引</span>
    <span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> test_idx t1 
    <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> test_idx2 t2 <span class="token keyword">ON</span> t1<span class="token punctuation">.</span>str_idx <span class="token operator">=</span> t2<span class="token punctuation">.</span>str_idx<span class="token punctuation">;</span>

<span class="token comment">-- 子查询可以使用索引,但是这里不是使用索引去查数据，而且是去查索引键值。</span>
<span class="token comment">-- 即先根据该索引去查其他索引的值，再根据查出来的索引值去查数据。</span>
<span class="token comment">-- extra中显示 Using index 均表示该情况。</span>
    <span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> test_idx t1 <span class="token keyword">WHERE</span> t1<span class="token punctuation">.</span>id <span class="token operator">=</span> 
    <span class="token punctuation">(</span><span class="token keyword">SELECT</span> id <span class="token keyword">FROM</span> test_idx2 <span class="token keyword">WHERE</span> t1<span class="token punctuation">.</span>str_idx <span class="token operator">=</span> str_idx <span class="token keyword">LIMIT</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="mysql5-7-表关联时-关联字段字符集排序规则不一致会导致索引失效。" tabindex="-1"><a class="header-anchor" href="#mysql5-7-表关联时-关联字段字符集排序规则不一致会导致索引失效。" aria-hidden="true">#</a> MySQL5.7，表关联时，关联字段字符集排序规则不一致会导致索引失效。</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>
<span class="token comment">-- 当使用字符串类型索引进行关联或用于子查询时会报错：</span>
<span class="token comment">-- 1267 - Illegal mix of collations (utf8mb4_german2_ci,IMPLICIT) and (utf8mb4_general_ci,IMPLICIT) for operation &#39;=&#39;</span>
<span class="token comment">-- 翻译：操作“=”的排序规则（utf8mb4_german2_ci，隐式）和（utf8mb4_general_ci，隐式）的非法混合</span>

<span class="token comment">-- 使用其他类型索引进行关联时，索引失效。</span>
<span class="token comment">-- 使用其他类型索引进行子查询时，可以使用索引。</span>
<span class="token comment">-- 这里就不做举例了，实际情况下出现的可能性不大。</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="多个独立索引" tabindex="-1"><a class="header-anchor" href="#多个独立索引" aria-hidden="true">#</a> 多个独立索引</h2><h3 id="使用or且第一个条件是范围查询-且返回值中不止包含条件索引列。" tabindex="-1"><a class="header-anchor" href="#使用or且第一个条件是范围查询-且返回值中不止包含条件索引列。" aria-hidden="true">#</a> 使用OR且第一个条件是范围查询，且返回值中不止包含条件索引列。</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 无法使用索引</span>
    <span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> test_idx <span class="token keyword">WHERE</span> id <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">OR</span> normal_idx <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token comment">-- 部分情况下可以使用索引 </span>
<span class="token comment">-- 当表里没有数据时不使用索引</span>
<span class="token comment">-- 当后面的条件查询的返回值超过总数据50%时不使用索引;少于总数据50%则使用索引</span>
    <span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> test_idx <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">OR</span> normal_idx <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">;</span>
    
<span class="token comment">-- 由于一次查询中一张表只能使用一个索引，所以优化器是将该sql优化成UNION执行的。</span>
<span class="token comment">-- 因此我们可以直接将OR语句改成UNION语句(如果肯定两个条件不会出现重复返回值，则可以使用UNION ALL，UNOIN在查询后还需要做一次去重操作，UNOIN ALL则不需要，可以进一步提高查询速度)。</span>
	<span class="token keyword">EXPLAIN</span> 
	<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> test_idx <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">1</span>
	<span class="token keyword">UNION</span> <span class="token keyword">ALL</span>
	<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> test_idx <span class="token keyword">WHERE</span> normal_idx <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="mysql5-7-使用or且存在条件是范围查询-且返回值中不止包含条件索引列。" tabindex="-1"><a class="header-anchor" href="#mysql5-7-使用or且存在条件是范围查询-且返回值中不止包含条件索引列。" aria-hidden="true">#</a> MySQL5.7，使用OR且存在条件是范围查询，且返回值中不止包含条件索引列。</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 无法使用索引</span>
    <span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> test_idx <span class="token keyword">WHERE</span> id <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">OR</span> normal_idx <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> test_idx <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">OR</span> normal_idx <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="组合索引" tabindex="-1"><a class="header-anchor" href="#组合索引" aria-hidden="true">#</a> 组合索引</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>
<span class="token comment">-- 创建测试表</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> test_idx4 <span class="token punctuation">(</span>
    id <span class="token keyword">INT</span> <span class="token punctuation">(</span> <span class="token number">11</span> <span class="token punctuation">)</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">auto_increment</span><span class="token punctuation">,</span>
    col1 <span class="token keyword">VARCHAR</span> <span class="token punctuation">(</span> <span class="token number">11</span> <span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    col2 <span class="token keyword">VARCHAR</span> <span class="token punctuation">(</span> <span class="token number">11</span> <span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    col3 <span class="token keyword">VARCHAR</span> <span class="token punctuation">(</span> <span class="token number">11</span> <span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    col4 <span class="token keyword">VARCHAR</span> <span class="token punctuation">(</span> <span class="token number">11</span> <span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token keyword">KEY</span> idx_col1_col2_col3<span class="token punctuation">(</span> col1<span class="token punctuation">,</span> col2<span class="token punctuation">,</span> col3 <span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span> 
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">-- 插入测试数据</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> test_idx4
<span class="token keyword">VALUES</span>
	<span class="token punctuation">(</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;1&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token punctuation">(</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;1&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token punctuation">(</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;1&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token punctuation">(</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;1&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
 
 <span class="token comment">-- 最左匹配原则：只要查询条件中带有组合索引最左边的列（此处即 col1） , 那么查询就会使用到索引。</span>
 <span class="token comment">-- 所以想让组合索引失效很简单，条件中不包含索引最左边的列（此处即 col1）, 则索引失效。</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>扩展：</p><p>SELECT col2,col3 FROM test_idx4</p><p>SELECT col2,col3 FROM test_idx4 WHERE col2 = &#39;1&#39; AND col3=&#39;2&#39;</p><p>以上两条SQL是可以使用到索引的，原理就是上面提到的索引覆盖，</p><p>虽然根据最左匹配原则是没法使用索引去快速检索数据的；</p><p>但是因为该查询中所查询的列是col1,col2，而该索引只包含col1,col2,col3三个字段信息，</p><p>而主键索引中包含所有字段信息，用该索引做全表扫描的效率更高，所以还是会使用到该索引！</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><pre><code>上述所有可能用到可能没用到索引的情况，并不是一定的！导致索引失效的阈值也不一定100%准确，毕竟不同数据类型、不同数据量的情况下，MySQL的优化器的选择可能不同。但可以肯定的是，同样一条语句，可能由于筛选率等原因导致索引失效。

所有简单查询(执行计划中 select_type = simple)，只要where条件中有索引列(无论什么条件)，且返回值中只包含该索引列(和主键)，都会用到索引。

根据执行计划中的extra可以区分索引的用途：
1、extra = Using index，表示索引覆盖。
2、extra = Using index, Using where，表示存在回表操作。
</code></pre><div class="hint-container info"><p class="hint-container-title">拓展：</p><p>为什么只要返回值只包含索引和主键就会用到索引？</p><pre><code>众所周知，InnoDB保存数据是通过B+树结构存储的。且只有主键索引所在的B+树的叶子节点会保存实际数据，其他节点只保存主键值，这种数据与索引在一起的索引我们称之为聚簇索引。
二级索引(非主键索引)的所有节点除了保存索引列的值外还会保存主键的值。
所以当我们通过二级索引查询数据时，第一步先通过二级索引查询到对应的主键值；再通过主键值到主键索引中查询对应的实际数据，这个过程我们称之为回表。
而回表操作是随机IO，所以性能较差，当需要回表的数据量比较大时，优化器可能就会选择不走索引，直接全表扫描，因为走全表是顺序IO，指不定走全表比走索引还快。(这也解释了为什么同样的SQL，表数据不同查询策略也不同)
其中一个特殊情况是当我们的查询只涉及到索引列和主键的时候，我们就不需要再回表查询实际数据了，因为二级索引中保存了主键和索引列的数据，这个时候就肯定会走索引了。
</code></pre></div><p>在复制其他地方提供的sql建表脚本时，注意其字符集和排序规则是否跟自己数据库默认的一致，否则可能出现索引失效的问题。</p><p>不同版本不同情况下，索引的使用情况不一致。上文提到的可能使用可能不使用的情况是由MySQL的优化器决定的，可能还会有其他情况下优化器也不使用索引，此时我们可以强制指定需要使用的索引：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 通过 force index(IDX_NAME) 强制指定索引</span>
<span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> test_idx <span class="token keyword">force</span> <span class="token keyword">index</span> <span class="token punctuation">(</span>idx_notnull_idx<span class="token punctuation">)</span> <span class="token keyword">WHERE</span> notnull_idx <span class="token operator">BETWEEN</span> <span class="token number">1</span> <span class="token operator">AND</span> <span class="token number">2</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,67);function _(L,x){const s=l("ExternalLinkIcon");return t(),o("div",null,[n("div",v,[b,n("p",null,[n("a",y,[a(" 索引失效场景 "),e(s)])]),n("p",null,[n("a",E,[a("Mysql5.7及8.0版本索引失效情况汇总"),e(s)])]),n("p",null,[n("a",w,[a("MySQL 的覆盖索引与回表 "),e(s)])])]),h])}const g=p(m,[["render",_],["__file","mysql-index.html.vue"]]);export{g as default};
