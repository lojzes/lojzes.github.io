import{_ as e,X as o,Y as a,a2 as r}from"./framework-0b23a550.js";const d={},t=r('<p><code>MySQL</code> 字符编码集中有两套 UTF-8 编码实现：<strong><code>utf8</code></strong> 和 <strong><code>utf8mb4</code></strong>。</p><p>如果使用 <strong><code>utf8</code></strong> 的话，存储emoji 符号和一些比较复杂的汉字、繁体字就会出错。</p><p>为什么会这样呢？这篇文章可以从源头给你解答。</p><h2 id="何为字符集" tabindex="-1"><a class="header-anchor" href="#何为字符集" aria-hidden="true">#</a> 何为字符集？</h2><p>字符是各种文字和符号的统称，包括各个国家文字、标点符号、表情、数字等等。 <strong>字符集</strong> 就是一系列字符的集合。字符集的种类较多，每个字符集可以表示的字符范围通常不同，就比如说有些字符集是无法表示汉字的。</p><p><strong>计算机只能存储二进制的数据，那英文、汉字、表情等字符应该如何存储呢？</strong></p><p>我们要将这些字符和二进制的数据一一对应起来，比如说字符“a”对应“01100001”，反之，“01100001”对应 “a”。我们将字符对应二进制数据的过程称为&quot;<strong>字符编码</strong>&quot;，反之，二进制数据解析成字符的过程称为“<strong>字符解码</strong>”。</p><h2 id="有哪些常见的字符集" tabindex="-1"><a class="header-anchor" href="#有哪些常见的字符集" aria-hidden="true">#</a> 有哪些常见的字符集？</h2><p>常见的字符集有<code> ASCII、GB2312、GBK、UTF-8</code>......。</p><p>不同的字符集的主要区别在于：</p><ul><li>可以表示的字符范围</li><li>编码方式</li></ul><h3 id="ascii" tabindex="-1"><a class="header-anchor" href="#ascii" aria-hidden="true">#</a> ASCII</h3><p><strong>ASCII</strong> (<strong>A</strong>merican <strong>S</strong>tandard <strong>C</strong>ode for <strong>I</strong>nformation <strong>I</strong>nterchange，美国信息交换标准代码) 是一套主要用于现代美国英语的字符集（这也是 ASCII 字符集的局限性所在）。</p><p><strong>为什么 ASCII 字符集没有考虑到中文等其他字符呢？</strong> 因为计算机是美国人发明的，当时，计算机的发展还处于比较雏形的时代，还未在其他国家大规模使用。因此，美国发布 ASCII 字符集的时候没有考虑兼容其他国家的语言。</p><p>ASCII 字符集至今为止共定义了 128 个字符，其中有 33 个控制字符（比如回车、删除）无法显示。</p><p>一个 ASCII 码长度是一个字节也就是 8 个 bit，比如“a”对应的 ASCII 码是“01100001”。不过，最高位是 0 仅仅作为校验位，其余 7 位使用 0 和 1 进行组合，所以，ASCII 字符集可以定义 128（2<sup>7</sup>）个字符。</p><p>由于，ASCII 码可以表示的字符实在是太少了。后来，人们对其进行了扩展得到了 <strong>ASCII 扩展字符集</strong> 。ASCII 扩展字符集使用 8 位（bits）表示一个字符，所以，ASCII 扩展字符集可以定义 256（2<sup>8</sup>）个字符。</p><h3 id="gb2312" tabindex="-1"><a class="header-anchor" href="#gb2312" aria-hidden="true">#</a> GB2312</h3><p>我们上面说了，<code>ASCII</code> 字符集是一种现代美国英语适用的字符集。因此，很多国家都捣鼓了一个适合自己国家语言的字符集。</p><p><code>GB2312</code> 字符集是一种对汉字比较友好的字符集，共收录 6700 多个汉字，基本涵盖了绝大部分常用汉字。不过，<code>GB2312 </code>字符集不支持绝大部分的生僻字和繁体字。</p><p>对于英语字符，<code>GB2312</code> 编码和 <code>ASCII</code> 码是相同的，1 字节编码即可。对于非英字符，需要 2 字节编码。</p><h3 id="gbk" tabindex="-1"><a class="header-anchor" href="#gbk" aria-hidden="true">#</a> GBK</h3><p>GBK 字符集可以看作是 GB2312 字符集的扩展，兼容 <code>GB2312 </code>字符集，共收录了 <code>20000</code> 多个汉字。</p><p>GBK 中 K 是汉语拼音 Kuo Zhan（扩展）中的“Kuo”的首字母。</p><h3 id="gb18030" tabindex="-1"><a class="header-anchor" href="#gb18030" aria-hidden="true">#</a> GB18030</h3><p><code>GB18030</code> 完全兼容 <code>GB2312 </code>和 <code>GBK</code> 字符集，纳入中国国内少数民族的文字，且收录了日韩汉字，是目前为止最全面的汉字字符集，共收录汉字 <code>70000</code> 多个。</p><h3 id="big5" tabindex="-1"><a class="header-anchor" href="#big5" aria-hidden="true">#</a> BIG5</h3><p><code>BIG5 </code>主要针对的是繁体中文，收录了 <code>13000</code> 多个汉字。</p><h3 id="unicode-utf-8编码" tabindex="-1"><a class="header-anchor" href="#unicode-utf-8编码" aria-hidden="true">#</a> Unicode &amp; UTF-8编码</h3><p>为了更加适合本国语言，诞生了很多种字符集。</p><p>我们上面也说了不同的字符集可以表示的字符范围以及编码规则存在差异。这就导致了一个非常严重的问题：<strong>使用错误的编码方式查看一个包含字符的文件就会产生乱码现象。</strong></p><p>就比如说你使用 UTF-8 编码方式打开 GB2312 编码格式的文件就会出现乱码。示例：“牛”这个汉字 GB2312 编码后的十六进制数值为 “C5A3”，而 “C5A3” 用 UTF-8 解码之后得到的却是 “ţ”。</p><p>你可以通过这个网站在线进行编码和解码：</p><p>https://www.haomeili.net/HanZi/ZiFuBianMaZhuanHuan</p>',34),n=[t];function c(s,i){return o(),a("div",null,n)}const p=e(d,[["render",c],["__file","charset.html.vue"]]);export{p as default};
