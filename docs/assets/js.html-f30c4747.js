import{_ as t,X as c,Y as p,Z as a,a1 as i,$ as e,a2 as n,C as o}from"./framework-b6ea3384.js";const s={},S={class:"hint-container info"},v=a("p",{class:"hint-container-title"},"参考",-1),d={href:"http://c.biancheng.net/js/",target:"_blank",rel:"noopener noreferrer"},l={href:"https://www.liaoxuefeng.com/wiki/1022910821149312",target:"_blank",rel:"noopener noreferrer"},J=n(`<h2 id="js-是什么" tabindex="-1"><a class="header-anchor" href="#js-是什么" aria-hidden="true">#</a> Js 是什么？</h2><p>JavaScript（简称“JS”）是一种轻量级的面向对象的编程语言，既能用在浏览器中控制页面交互，也能用在服务器端作为网站后台（借助 Node.js），因此 JavaScript 是一种全栈式的编程语言。</p><p>JavaScript 是一种跨平台的解释型语言，不需要提前编译，能在各种操作系统下运行。</p><h2 id="js-可以做什么" tabindex="-1"><a class="header-anchor" href="#js-可以做什么" aria-hidden="true">#</a> JS 可以做什么</h2><p>JavaScript 可以用于 Web 开发的各个领域，例如：</p><ul><li>Web 应用开发：日常生活中我们所浏览的网页都是由 HTML、CSS、JavaScript 构成的，通过 JavaScript 可以实时更新网页中元素的样式，并可以实现人与网页之间的交互（例如监听用户是否点击了鼠标或按下了某个按键等），还可以在网页中添加一些炫酷的动画；</li><li>移动应用开发：除了可以进行 Web 应用开发外，JavaScript 还可以用来开发手机或平板电脑上的应用程序，而且我们还可以借助一些优秀的框架（例如 React Native），让开发更加轻松；</li><li>Web 游戏：我们在网页中玩过的那些小游戏，都可以使用 JavaScript 来实现； 后端 Web 应用开发：以前我们都是使用 JavaScript 来进行 Web 应用程序前端部分的开发，但随着 - - Node.JS（一个 JavaScript 运行环境）的出现，使得 JavaScript 也可以用来开发 Web 应用程序的后端部分。</li></ul><h2 id="javascript-与-ecmascript-的关系" tabindex="-1"><a class="header-anchor" href="#javascript-与-ecmascript-的关系" aria-hidden="true">#</a> JavaScript 与 ECMAScript 的关系</h2><p>ECMAScript（简称“ES”）是根据 ECMA-262 标准实现的通用脚本语言，ECMA-262 标准主要规定了这门语言的语法、类型、语句、关键字、保留字、操作符、对象等几个部分，目前 ECMAScript 的最新版是 ECMAScript6（简称“ES6”）。</p><p>至于 JavaScript，有时人们会将 JavaScript 与 ECMAScript 看作是相同的，其实不然，JavaScript 中所包含的内容远比 ECMA-262 中规定的多得多，完整的 JavaScript 是由以下三个部分组成：</p><ul><li>核心（ECMAScript）：提供语言的语法和基本对象；</li><li>文档对象模型（DOM）：提供处理网页内容的方法和接口；</li><li>浏览器对象模型（BOM）：提供与浏览器进行交互的方法和接口。</li></ul><h2 id="如何运行-javascript" tabindex="-1"><a class="header-anchor" href="#如何运行-javascript" aria-hidden="true">#</a> 如何运行 JavaScript</h2><p>作为一种脚本语言，JavaScript 代码不能独立运行，通常情况下我们需要借助浏览器来运行 JavaScript 代码，所有 Web 浏览器都支持 JavaScript。</p><p>除了可以在浏览器中执行外，也可以在服务端或者搭载了 JavaScript 引擎的设备中执行 JavaScript 代码，浏览器之所以能够运行 JavaScript 代码就是因为浏览器中都嵌入了 JavaScript 引擎，常见的 JavaScript 引擎有：</p><pre><code>V8：Chrome 和 Opera 中的 JavaScript 引擎；
SpiderMonkey：Firefox 中的 JavaScript 引擎；
Chakra：IE 中的 JavaScript 引擎；
ChakraCore：Microsoft Edge 中的 JavaScript 引擎；
SquirrelFish：Safari 中的 JavaScript 引擎。
</code></pre><h2 id="javascript-的特点" tabindex="-1"><a class="header-anchor" href="#javascript-的特点" aria-hidden="true">#</a> JavaScript 的特点</h2><p>JavaScript 具有以下特点：</p><ol><li>解释型脚本语言 JavaScript 是一种解释型脚本语言，与 C、C++ 等语言需要先编译再运行不同，使用 JavaScript 编写的代码不需要编译，可以直接运行。</li><li>面向对象 JavaScript 是一种面向对象语言，使用 JavaScript 不仅可以创建对象，也能操作使用已有的对象。</li><li>弱类型 JavaScript 是一种弱类型的编程语言，对使用的数据类型没有严格的要求，例如您可以将一个变量初始化为任意类型，也可以随时改变这个变量的类型。</li><li>动态性 JavaScript 是一种采用事件驱动的脚本语言，它不需要借助 Web 服务器就可以对用户的输入做出响应，例如我们在访问一个网页时，通过鼠标在网页中进行点击或滚动窗口时，通过 JavaScript 可以直接对这些事件做出响应。</li><li>跨平台 JavaScript 不依赖操作系统，在浏览器中就可以运行。因此一个 JavaScript 脚本在编写完成后可以在任意系统上运行，只需要系统上的浏览器支持 JavaScript 即可。</li></ol><h2 id="nodejs-是什么" tabindex="-1"><a class="header-anchor" href="#nodejs-是什么" aria-hidden="true">#</a> nodejs 是什么？</h2><p>JavaScript 诞生于 1995 年，几乎是和互联网同时出现；Node.js 诞生于 2009 年，比 JavaScript 晚了 15 年左右。</p><p>在 Node.js 之前，JavaScript 只能运行在浏览器中，作为网页脚本使用，为网页添加一些特效，或者和服务器进行通信。有了 Node.js 以后，JavaScript 就可以脱离浏览器，像其它编程语言一样直接在计算机上使用，想干什么就干什么，再也不受浏览器的限制了。</p><p>Node.js 不是一门新的编程语言，也不是一个 JavaScript 框架，它是一套 JavaScript 运行环境，用来支持 JavaScript 代码的执行。用编程术语来讲，Node.js 是一个 JavaScript 运行时（Runtime）。</p><p>现在的 JavaScript 除了用于 Web 前端编程（网页编程），还能干很多事情，比如：</p><pre><code>开发网站后台，这原本是 PHP、Java、Python、Ruby 等编程语言擅长的；
开发 GUI 程序，也就是我们常说的带界面的电脑软件，比如 QQ、360、迅雷等；
手机 APP，包括 Android APP、iOS APP；
CLI 工具，也就是不带界面的命令行程序。
</code></pre><p>你看，学会了 JavaScript，你不但是全栈工程师，甚至还将无所不能，这都是 Node.js 带给我们的。</p>`,24);function h(_,j){const r=o("ExternalLinkIcon");return c(),p("div",null,[a("div",S,[v,a("p",null,[a("a",d,[i("C语言中文网"),e(r)])]),a("p",null,[a("a",l,[i("廖雪峰的官方网站"),e(r)])])]),J])}const u=t(s,[["render",h],["__file","js.html.vue"]]);export{u as default};
