const o=JSON.parse('{"key":"v-c76aca94","path":"/study/java/threadpool/ForkJoinPool.html","title":"ForkJoinPool的使用及基本原理","lang":"zh-CN","frontmatter":{"title":"ForkJoinPool的使用及基本原理","index":false,"icon":"discover","category":["学习笔记"],"description":"参考 ForkJoinPool的使用及基本原理 ForkJoinPool是什么 ForkJoinPool 是自 java7 开始，jvm 提供的一个用于并行执行的任务框架。其主旨是将大任务分成若干小任务，之后再并行对这些小任务进行计算，最终汇总这些任务的结果。得到最终的结果。其广泛用在java8的stream中。 这个描述实际上比较接近于单机版的map-reduce。都是采用了分治算法，将大的任务拆分到可执行的任务，之后并行执行，最终合并结果集。区别就在于ForkJoin机制可能只能在单个jvm上运行，而map-reduce则是在集群上执行。此外，ForkJoinPool采取工作窃取算法，以避免工作线程由于拆分了任务之后的join等待过程。这样处于空闲的工作线程将从其他工作线程的队列中主动去窃取任务来执行。这里涉及到的两个基本知识点是分治法和工作窃取。","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/study/java/threadpool/ForkJoinPool.html"}],["meta",{"property":"og:site_name","content":"JavaNative"}],["meta",{"property":"og:title","content":"ForkJoinPool的使用及基本原理"}],["meta",{"property":"og:description","content":"参考 ForkJoinPool的使用及基本原理 ForkJoinPool是什么 ForkJoinPool 是自 java7 开始，jvm 提供的一个用于并行执行的任务框架。其主旨是将大任务分成若干小任务，之后再并行对这些小任务进行计算，最终汇总这些任务的结果。得到最终的结果。其广泛用在java8的stream中。 这个描述实际上比较接近于单机版的map-reduce。都是采用了分治算法，将大的任务拆分到可执行的任务，之后并行执行，最终合并结果集。区别就在于ForkJoin机制可能只能在单个jvm上运行，而map-reduce则是在集群上执行。此外，ForkJoinPool采取工作窃取算法，以避免工作线程由于拆分了任务之后的join等待过程。这样处于空闲的工作线程将从其他工作线程的队列中主动去窃取任务来执行。这里涉及到的两个基本知识点是分治法和工作窃取。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://vuepress-theme-hope-docs-demo.netlify.app/"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"ForkJoinPool的使用及基本原理"}],["meta",{"property":"article:author","content":"lojzes"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"ForkJoinPool的使用及基本原理\\",\\"image\\":[\\"https://vuepress-theme-hope-docs-demo.netlify.app/\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"lojzes\\",\\"url\\":\\"\\"}]}"]]},"headers":[{"level":2,"title":"ForkJoinPool是什么","slug":"forkjoinpool是什么","link":"#forkjoinpool是什么","children":[]},{"level":2,"title":"分治法","slug":"分治法","link":"#分治法","children":[]},{"level":2,"title":"工作窃取（work-stealing）","slug":"工作窃取-work-stealing","link":"#工作窃取-work-stealing","children":[]},{"level":2,"title":"简单使用","slug":"简单使用","link":"#简单使用","children":[{"level":3,"title":"不带返回值的计算","slug":"不带返回值的计算","link":"#不带返回值的计算","children":[]},{"level":3,"title":"带返回值的计算","slug":"带返回值的计算","link":"#带返回值的计算","children":[]}]}],"readingTime":{"minutes":4.74,"words":1422},"filePathRelative":"study/java/threadpool/ForkJoinPool.md","excerpt":"<div class=\\"hint-container tip\\">\\n<p class=\\"hint-container-title\\">参考</p>\\n<p><a href=\\"https://blog.csdn.net/dhaibo1986/article/details/108737347\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">ForkJoinPool的使用及基本原理</a></p>\\n</div>\\n<h2> ForkJoinPool是什么</h2>\\n<p><code>ForkJoinPool</code> 是自 <code>java7</code> 开始，<code>jvm</code> 提供的一个用于并行执行的任务框架。其主旨是将大任务分成若干小任务，之后再并行对这些小任务进行计算，最终汇总这些任务的结果。得到最终的结果。其广泛用在<code>java8</code>的<code>stream</code>中。\\n这个描述实际上比较接近于单机版的<code>map-reduce</code>。都是采用了<code>分治算法</code>，将大的任务拆分到可执行的任务，之后并行执行，最终合并结果集。区别就在于<code>ForkJoin</code>机制可能只能在单个jvm上运行，而map-reduce则是在集群上执行。此外，<code>ForkJoinPool</code>采取工作窃取算法，以避免工作线程由于拆分了任务之后的join等待过程。这样处于空闲的工作线程将从其他工作线程的队列中主动去窃取任务来执行。这里涉及到的两个基本知识点是分治法和工作窃取。</p>","copyright":{"author":"lojzes","license":"MIT"},"autoDesc":true,"git":{}}');export{o as data};
