import{_ as a,X as e,Y as t,Z as n,a1 as i,$ as d,a2 as c,C as p}from"./framework-0b23a550.js";const r="/assets/1-bddaa364.png",l="/assets/2-89b18d1d.png",o={},u={class:"hint-container tip"},v=n("p",{class:"hint-container-title"},"参考",-1),m={href:"https://juejin.cn/post/6844904125784653837#heading-1",target:"_blank",rel:"noopener noreferrer"},k=c(`<h2 id="为什么要用nginx" tabindex="-1"><a class="header-anchor" href="#为什么要用nginx" aria-hidden="true">#</a> 为什么要用Nginx？</h2><p>跨平台、配置简单、方向代理、高并发连接：处理2-3万并发连接数，官方监测能支持5万并发，内存消耗小：开启10个nginx才占150M内存 ，nginx处理静态文件好，耗费内存少，</p><p>而且Nginx内置的健康检查功能：如果有一个服务器宕机，会做一个健康检查，再发送的请求就不会发送到宕机的服务器了。重新将请求提交到其他的节点上。</p><p>使用Nginx的话还能：</p><pre><code>节省宽带：支持GZIP压缩，可以添加浏览器本地缓存
稳定性高：宕机的概率非常小
接收用户请求是异步的
</code></pre><h2 id="为什么nginx性能这么高" tabindex="-1"><a class="header-anchor" href="#为什么nginx性能这么高" aria-hidden="true">#</a> 为什么Nginx性能这么高？</h2><pre><code>因为他的事件处理机制：异步非阻塞事件处理机制：运用了epoll模型，提供了一个队列，排队解决
</code></pre><h2 id="nginx怎么处理请求的" tabindex="-1"><a class="header-anchor" href="#nginx怎么处理请求的" aria-hidden="true">#</a> Nginx怎么处理请求的？</h2><p>nginx接收一个请求后，首先由listen和server_name指令匹配server模块，再匹配server模块里的location，location就是实际地址</p><div class="language-nginx line-numbers-mode" data-ext="nginx"><pre class="language-nginx"><code>    <span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>   <span class="token comment"># 第一个Server区块开始，表示一个独立的虚拟主机站点</span>
        <span class="token directive"><span class="token keyword">listen</span>       80；      		        <span class="token comment"># 提供服务的端口，默认80</span>
        server_name  localhost；    		<span class="token comment"># 提供服务的域名主机名</span>
        location /</span> <span class="token punctuation">{</span>            	        <span class="token comment"># 第一个location区块开始</span>
            root   html；       		<span class="token comment"># 站点的根目录，相当于Nginx的安装目录</span>
            index  index.html index.htm；    	<span class="token comment"># 默认的首页文件，多个用空格分开</span>
        <span class="token punctuation">}</span>          				<span class="token comment"># 第一个location区块结果</span>
    <span class="token punctuation">}</span>           
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="什么是正向代理和反向代理" tabindex="-1"><a class="header-anchor" href="#什么是正向代理和反向代理" aria-hidden="true">#</a> 什么是正向代理和反向代理？</h2><p>正向代理就是一个人发送一个请求直接就到达了目标的服务器</p><p>反方代理就是请求统一被Nginx接收，nginx反向代理服务器接收到之后，按照一定的规 则分发给了后端的业务处理服务器进行处理了</p><h2 id="使用-反向代理服务器的优点是什么" tabindex="-1"><a class="header-anchor" href="#使用-反向代理服务器的优点是什么" aria-hidden="true">#</a> 使用“反向代理服务器的优点是什么?</h2><p>反向代理服务器可以隐藏源服务器的存在和特征。它充当互联网云和web服务器之间的中间层。这对于安全方面来说是很好的，特别是当您使用web托管服务时。</p><h2 id="nginx的优缺点" tabindex="-1"><a class="header-anchor" href="#nginx的优缺点" aria-hidden="true">#</a> Nginx的优缺点？</h2><p>优点：</p><p>占内存小，可实现高并发连接，处理响应快 可实现http服务器、虚拟主机、方向代理、负载均衡 Nginx配置简单 可以不暴露正式的服务器IP地址</p><p>缺点：</p><pre><code>动态处理差：nginx处理静态文件好,耗费内存少，但是处理动态页面则很鸡肋，
现在一般前端用nginx作为反向代理抗住压力，
</code></pre><h2 id="nginx配置文件nginx-conf有哪些属性模块" tabindex="-1"><a class="header-anchor" href="#nginx配置文件nginx-conf有哪些属性模块" aria-hidden="true">#</a> Nginx配置文件nginx.conf有哪些属性模块?</h2><div class="language-nginx line-numbers-mode" data-ext="nginx"><pre class="language-nginx"><code><span class="token directive"><span class="token keyword">worker_processes</span>  1；                			<span class="token comment"># worker进程的数量</span>
events</span> <span class="token punctuation">{</span>                              			<span class="token comment"># 事件区块开始</span>
    worker_connections  1024；          		<span class="token comment"># 每个worker进程支持的最大连接数</span>
<span class="token punctuation">}</span>                               			<span class="token comment"># 事件区块结束</span>
<span class="token directive"><span class="token keyword">http</span></span> <span class="token punctuation">{</span>                           			<span class="token comment"># HTTP区块开始</span>
    <span class="token directive"><span class="token keyword">include</span>       mime.types；         			<span class="token comment"># Nginx支持的媒体类型库文件</span>
    default_type  application/octet-stream；            <span class="token comment"># 默认的媒体类型</span>
    sendfile        on；       				<span class="token comment"># 开启高效传输模式</span>
    keepalive_timeout  65；       			<span class="token comment"># 连接超时</span>
    server</span> <span class="token punctuation">{</span>            		                <span class="token comment"># 第一个Server区块开始，表示一个独立的虚拟主机站点</span>
        <span class="token directive"><span class="token keyword">listen</span>       80；      			        <span class="token comment"># 提供服务的端口，默认80</span>
        server_name  localhost；    			<span class="token comment"># 提供服务的域名主机名</span>
        location /</span> <span class="token punctuation">{</span>            	        	<span class="token comment"># 第一个location区块开始</span>
            root   html；       			<span class="token comment"># 站点的根目录，相当于Nginx的安装目录</span>
            index  index.html index.htm；       	<span class="token comment"># 默认的首页文件，多个用空格分开</span>
        <span class="token punctuation">}</span>          				        <span class="token comment"># 第一个location区块结果</span>
        <span class="token directive"><span class="token keyword">error_page</span>   <span class="token number">500502503504</span>  /50x.html；          <span class="token comment"># 出现对应的http状态码时，使用50x.html回应客户</span>
        location = /50x.html</span> <span class="token punctuation">{</span>          	        <span class="token comment"># location区块开始，访问50x.html</span>
            root   html；      		      	        <span class="token comment"># 指定对应的站点目录为html</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>  
    ......
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="如何用nginx解决前端跨域问题" tabindex="-1"><a class="header-anchor" href="#如何用nginx解决前端跨域问题" aria-hidden="true">#</a> 如何用Nginx解决前端跨域问题？</h2><p>使用Nginx转发请求。把跨域的接口写成调本域的接口，然后将这些接口转发到真正的请求地址。</p><h2 id="限流怎么做的" tabindex="-1"><a class="header-anchor" href="#限流怎么做的" aria-hidden="true">#</a> 限流怎么做的？</h2><p>Nginx 限流就是限制用户请求速度，防止服务器受不了</p><pre><code>限流有3种
    正常限制访问频率（正常流量）
    突发限制访问频率（突发流量）
    限制并发连接数

Nginx的限流都是基于 \`漏桶流算法\`，底下会说道什么是桶铜流
</code></pre><p>实现三种限流算法</p><h3 id="正常限制访问频率-正常流量" tabindex="-1"><a class="header-anchor" href="#正常限制访问频率-正常流量" aria-hidden="true">#</a> 正常限制访问频率（正常流量）：</h3><p>限制一个用户发送的请求，我Nginx多久接收一个请求。</p><p>Nginx 中使用<code>ngx_http_limit_req_module</code>模块来限制的访问频率，限制的原理实质是基于漏桶算法原理来实现的。 在<code>nginx.conf</code>配置文件中可以使用<code>limit_req_zone</code>命令及<code>limit_req</code>命令限制单个IP的请求处理频率。</p><div class="language-nginx line-numbers-mode" data-ext="nginx"><pre class="language-nginx"><code>   <span class="token comment">#定义限流维度，一个用户一分钟一个请求进来，多余的全部漏掉</span>
   <span class="token directive"><span class="token keyword">limit_req_zone</span> <span class="token variable">$binary_remote_addr</span> zone=one:10m rate=1r/m</span><span class="token punctuation">;</span>

   <span class="token comment">#绑定限流维度</span>
   <span class="token directive"><span class="token keyword">server</span></span><span class="token punctuation">{</span>
   	
   	<span class="token directive"><span class="token keyword">location/seckill.html</span></span><span class="token punctuation">{</span>
   		<span class="token directive"><span class="token keyword">limit_req</span> zone=zone</span><span class="token punctuation">;</span>	
   		<span class="token directive"><span class="token keyword">proxy_pass</span> http://lj_seckill</span><span class="token punctuation">;</span>
   	<span class="token punctuation">}</span>

   <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>1r/s代表1秒一个请求，1r/m一分钟接收一个请求， 如果Nginx这时还有别人的请求没有处理完，Nginx就会拒绝处理该用户请求。</p><h3 id="突发限制访问频率-突发流量" tabindex="-1"><a class="header-anchor" href="#突发限制访问频率-突发流量" aria-hidden="true">#</a> 突发限制访问频率（突发流量）：</h3><p>限制一个用户发送的请求，我Nginx多久接收一个。</p><p>上面的配置一定程度可以限制访问频率，但是也存在着一个问题：如果突发流量超出请求被拒绝处理，无法处理活动时候的突发流量，这时候应该如何进一步处理呢？Nginx 提供 burst 参数结合 nodelay 参数可以解决流量突发的问题，可以设置能处理的超过设置的请求数外能额外处理的请求数。我们可以将之前的例子添加 burst 参数以及 nodelay 参数：</p><div class="language-nginx line-numbers-mode" data-ext="nginx"><pre class="language-nginx"><code>	<span class="token comment">#定义限流维度，一个用户一分钟一个请求进来，多余的全部漏掉</span>
	<span class="token directive"><span class="token keyword">limit_req_zone</span> <span class="token variable">$binary_remote_addr</span> zone=one:10m rate=1r/m</span><span class="token punctuation">;</span>

	<span class="token comment">#绑定限流维度</span>
	<span class="token directive"><span class="token keyword">server</span></span><span class="token punctuation">{</span>
		
		<span class="token directive"><span class="token keyword">location/seckill.html</span></span><span class="token punctuation">{</span>
			<span class="token directive"><span class="token keyword">limit_req</span> zone=zone burst=5 nodelay</span><span class="token punctuation">;</span>
			<span class="token directive"><span class="token keyword">proxy_pass</span> http://lj_seckill</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>

	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为什么就多了一个 burst=5 nodelay; 呢，多了这个可以代表Nginx对于一个用户的请求会立即处理前五个，多余的就慢慢来落，没有其他用户的请求我就处理你的，有其他的请求的话我Nginx就漏掉不接受你的请求</p><h3 id="限制并发连接数" tabindex="-1"><a class="header-anchor" href="#限制并发连接数" aria-hidden="true">#</a> 限制并发连接数</h3><p>Nginx 中的 <code>ngx_http_limit_conn_module</code> 模块提供了限制并发连接数的功能，可以使用 <code>limit_conn_zone</code> 指令以及 <code>limit_conn</code> 执行进行配置。接下来我们可以通过一个简单的例子来看下：</p><div class="language-nginx line-numbers-mode" data-ext="nginx"><pre class="language-nginx"><code> <span class="token directive"><span class="token keyword">http</span></span> <span class="token punctuation">{</span>
	<span class="token directive"><span class="token keyword">limit_conn_zone</span> <span class="token variable">$binary_remote_addr</span> zone=myip:10m</span><span class="token punctuation">;</span>
	<span class="token directive"><span class="token keyword">limit_conn_zone</span> <span class="token variable">$server_name</span> zone=myServerName:10m</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>
        <span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">{</span>
            <span class="token directive"><span class="token keyword">limit_conn</span> myip <span class="token number">10</span></span><span class="token punctuation">;</span>
            <span class="token directive"><span class="token keyword">limit_conn</span> myServerName <span class="token number">100</span></span><span class="token punctuation">;</span>
            <span class="token directive"><span class="token keyword">rewrite</span> / http://www.lijie.net permanent</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面配置了 单个IP 同时并发连接数最多只能 10 个连接，并且设置了整个虚拟服务器同时最大并发数最多只能 100个链接。当然，只有当请求的header 被服务器处理后，虚拟服务器的连接数才会计数。</p><h2 id="限流算法" tabindex="-1"><a class="header-anchor" href="#限流算法" aria-hidden="true">#</a> 限流算法</h2><h3 id="漏桶算法" tabindex="-1"><a class="header-anchor" href="#漏桶算法" aria-hidden="true">#</a> 漏桶算法</h3><p>漏桶算法是网络世界中流量整形或速率限制时经常使用的一种算法，它的主要目的是控制数据注入到网络的速率，平滑网络上的突发流量。漏桶算法提供了一种机制，通过它，突发流量可以被整形以便为网络提供一个稳定的流量。也就是我们刚才所讲的情况。漏桶算法提供的机制实际上就是刚才的案例：突发流量会进入到一个漏桶，漏桶会按照我们定义的速率依次处理请求，如果水流过大也就是突发流量过大就会直接溢出，则多余的请求会被拒绝。所以漏桶算法能控制数据的传输速率。</p><p><img src="`+r+'" alt="" loading="lazy"></p><h3 id="令牌桶算法" tabindex="-1"><a class="header-anchor" href="#令牌桶算法" aria-hidden="true">#</a> 令牌桶算法</h3><p>令牌桶算法是网络流量整形和速率限制中最常使用的一种算法。典型情况下，令牌桶算法用来控制发送到网络上的数据的数目，并允许突发数据的发送。Google开源项目Guava中的RateLimiter使用的就是令牌桶控制算法。令牌桶算法的机制如下：存在一个大小固定的令牌桶，会以恒定的速率源源不断产生令牌。如果令牌消耗速率小于生产令牌的速度，令牌就会一直产生直至装满整个令牌桶。</p><p><img src="'+l+`" alt="" loading="lazy"></p><h2 id="nginx负载均衡的算法怎么实现的-策略有哪些" tabindex="-1"><a class="header-anchor" href="#nginx负载均衡的算法怎么实现的-策略有哪些" aria-hidden="true">#</a> Nginx负载均衡的算法怎么实现的?策略有哪些?</h2><p>Nginx负载均衡实现的策略有以下五种：</p><h3 id="轮询-默认" tabindex="-1"><a class="header-anchor" href="#轮询-默认" aria-hidden="true">#</a> 轮询(默认)</h3><p>每个请求按时间顺序逐一分配到不同的后端服务器，如果后端某个服务器宕机，能自动剔除故障系统。</p><div class="language-nginx line-numbers-mode" data-ext="nginx"><pre class="language-nginx"><code>
<span class="token directive"><span class="token keyword">upstream</span> backserver</span> <span class="token punctuation">{</span> 
 <span class="token directive"><span class="token keyword">server</span> 192.168.0.12</span><span class="token punctuation">;</span> 
 <span class="token directive"><span class="token keyword">server</span> 192.168.0.13</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span> 

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="权重-weight" tabindex="-1"><a class="header-anchor" href="#权重-weight" aria-hidden="true">#</a> 权重 weight</h3><p>weight的值越大分配</p><p>到的访问概率越高，主要用于后端每台服务器性能不均衡的情况下。其次是为在主从的情况下设置不同的权值，达到合理有效的地利用主机资源。</p><div class="language-nginx line-numbers-mode" data-ext="nginx"><pre class="language-nginx"><code><span class="token directive"><span class="token keyword">upstream</span> backserver</span> <span class="token punctuation">{</span> 
 <span class="token directive"><span class="token keyword">server</span> 192.168.0.12 weight=2</span><span class="token punctuation">;</span> 
 <span class="token directive"><span class="token keyword">server</span> 192.168.0.13 weight=8</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>权重越高，在被访问的概率越大，如上例，分别是20%，80%。</p><h3 id="ip-hash-ip绑定" tabindex="-1"><a class="header-anchor" href="#ip-hash-ip绑定" aria-hidden="true">#</a> ip_hash( IP绑定)</h3><p>每个请求按访问IP的哈希结果分配，使来自同一个IP的访客固定访问一台后端服务器，并且可以有效解决动态网页存在的 session 共享问题</p><div class="language-nginx line-numbers-mode" data-ext="nginx"><pre class="language-nginx"><code><span class="token directive"><span class="token keyword">upstream</span> backserver</span> <span class="token punctuation">{</span> 
 <span class="token directive"><span class="token keyword">ip_hash</span></span><span class="token punctuation">;</span> 
 <span class="token directive"><span class="token keyword">server</span> 192.168.0.12:88</span><span class="token punctuation">;</span> 
 <span class="token directive"><span class="token keyword">server</span> 192.168.0.13:80</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="fair-第三方插件" tabindex="-1"><a class="header-anchor" href="#fair-第三方插件" aria-hidden="true">#</a> fair(第三方插件)</h3><p>必须安装upstream_fair模块。</p><p>对比 weight、ip_hash更加智能的负载均衡算法，fair算法可以根据页面大小和加载时间长短智能地进行负载均衡，响应时间短的优先分配。</p><div class="language-nginx line-numbers-mode" data-ext="nginx"><pre class="language-nginx"><code><span class="token directive"><span class="token keyword">upstream</span> backserver</span> <span class="token punctuation">{</span> 
 <span class="token directive"><span class="token keyword">server</span> server1</span><span class="token punctuation">;</span> 
 <span class="token directive"><span class="token keyword">server</span> server2</span><span class="token punctuation">;</span> 
 <span class="token directive"><span class="token keyword">fair</span></span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>哪个服务器的响应速度快，就将请求分配到那个服务器上。</p><h3 id="url-hash-第三方插件" tabindex="-1"><a class="header-anchor" href="#url-hash-第三方插件" aria-hidden="true">#</a> url_hash(第三方插件)</h3><p>必须安装 Nginx 的 hash 软件包</p><p>按访问 url 的 hash 结果来分配请求，使每个 url 定向到同一个后端服务器，可以进一步提高后端缓存服务器的效率。</p><div class="language-nginx line-numbers-mode" data-ext="nginx"><pre class="language-nginx"><code><span class="token directive"><span class="token keyword">upstream</span> backserver</span> <span class="token punctuation">{</span> 
 <span class="token directive"><span class="token keyword">server</span> squid1:3128</span><span class="token punctuation">;</span> 
 <span class="token directive"><span class="token keyword">server</span> squid2:3128</span><span class="token punctuation">;</span> 
 <span class="token directive"><span class="token keyword">hash</span> <span class="token variable">$request_uri</span></span><span class="token punctuation">;</span> 
 <span class="token directive"><span class="token keyword">hash_method</span> crc32</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="nginx配置高可用性怎么配置" tabindex="-1"><a class="header-anchor" href="#nginx配置高可用性怎么配置" aria-hidden="true">#</a> Nginx配置高可用性怎么配置？</h2><p>当上游服务器(真实访问服务器)，一旦出现故障或者是没有及时相应的话，应该直接轮训到下一台服务器，保证服务器的高可用</p><div class="language-nginx line-numbers-mode" data-ext="nginx"><pre class="language-nginx"><code><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>
        <span class="token directive"><span class="token keyword">listen</span>       <span class="token number">80</span></span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">server_name</span>  www.lijie.com</span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">{</span>
		    <span class="token comment">### 指定上游服务器负载均衡服务器</span>
		    <span class="token directive"><span class="token keyword">proxy_pass</span> http://backServer</span><span class="token punctuation">;</span>
			<span class="token comment">###nginx与上游服务器(真实访问的服务器)超时时间 后端服务器连接的超时时间_发起握手等候响应超时时间</span>
			<span class="token directive"><span class="token keyword">proxy_connect_timeout</span> <span class="token number">1s</span></span><span class="token punctuation">;</span>
			<span class="token comment">###nginx发送给上游服务器(真实访问的服务器)超时时间</span>
            <span class="token directive"><span class="token keyword">proxy_send_timeout</span> <span class="token number">1s</span></span><span class="token punctuation">;</span>
			<span class="token comment">### nginx接受上游服务器(真实访问的服务器)超时时间</span>
            <span class="token directive"><span class="token keyword">proxy_read_timeout</span> <span class="token number">1s</span></span><span class="token punctuation">;</span>
            <span class="token directive"><span class="token keyword">index</span>  index.html index.htm</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="nginx怎么判断别ip不可访问" tabindex="-1"><a class="header-anchor" href="#nginx怎么判断别ip不可访问" aria-hidden="true">#</a> Nginx怎么判断别IP不可访问？</h2><div class="language-nginx line-numbers-mode" data-ext="nginx"><pre class="language-nginx"><code><span class="token comment"># 如果访问的ip地址为192.168.9.115,则返回403</span>
<span class="token directive"><span class="token keyword">if</span>  (<span class="token variable">$remote_addr</span> = 192.168.9.115)</span> <span class="token punctuation">{</span>  
     <span class="token directive"><span class="token keyword">return</span> <span class="token number">403</span></span><span class="token punctuation">;</span>  
<span class="token punctuation">}</span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="怎么限制浏览器访问" tabindex="-1"><a class="header-anchor" href="#怎么限制浏览器访问" aria-hidden="true">#</a> 怎么限制浏览器访问？</h2><div class="language-nginx line-numbers-mode" data-ext="nginx"><pre class="language-nginx"><code><span class="token comment">## 不允许谷歌浏览器访问 如果是谷歌浏览器返回500</span>
<span class="token directive"><span class="token keyword">if</span> (<span class="token variable">$http_user_agent</span> ~ Chrome)</span> <span class="token punctuation">{</span>   
    <span class="token directive"><span class="token keyword">return</span> <span class="token number">500</span></span><span class="token punctuation">;</span>  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="rewrite全局变量是什么" tabindex="-1"><a class="header-anchor" href="#rewrite全局变量是什么" aria-hidden="true">#</a> Rewrite全局变量是什么？</h2><table><thead><tr><th>变量</th><th>含义</th></tr></thead><tbody><tr><td>$args</td><td>这个变量等于请求行中的参数，同$query_string</td></tr><tr><td>$content length</td><td>请求头中的Content-length字段。</td></tr><tr><td>$content_type</td><td>请求头中的Content-Type字段。</td></tr><tr><td>$document_root</td><td>当前请求在root指令中指定的值。</td></tr><tr><td>$host</td><td>请求主机头字段，否则为服务器名称。</td></tr><tr><td>$http_user_agent</td><td>客户端agent信息</td></tr><tr><td>$http_cookie</td><td>客户端cookie信息</td></tr><tr><td>$limit_rate</td><td>这个变量可以限制连接速率。</td></tr><tr><td>$request_method</td><td>客户端请求的动作，通常为GET或POST。</td></tr><tr><td>$remote_addr</td><td>客户端的IP地址。</td></tr><tr><td>$remote_port</td><td>客户端的端口。</td></tr><tr><td>$remote_user</td><td>已经经过Auth Basic Module验证的用户名。</td></tr><tr><td>$request_filename</td><td>当前请求的文件路径，由root或alias指令与URI请求生成。</td></tr><tr><td>$scheme</td><td>HTTP方法（如http，https）。</td></tr><tr><td>$server_protocol</td><td>请求使用的协议，通常是HTTP/1.0或HTTP/1.1。</td></tr><tr><td>$server_addr</td><td>服务器地址，在完成一次系统调用后可以确定这个值。</td></tr><tr><td>$server_name</td><td>服务器名称。</td></tr><tr><td>$server_port</td><td>请求到达服务器的端口号。</td></tr><tr><td>$request_uri</td><td>包含请求参数的原始URI，不包含主机名，如”/foo/bar.php?arg=baz”。</td></tr><tr><td>$uri</td><td>不带请求参数的当前URI，$uri不包含主机名，如”/foo/bar.html”。</td></tr><tr><td>$document_uri</td><td>与$uri相同。</td></tr></tbody></table>`,80);function h(b,g){const s=p("ExternalLinkIcon");return e(),t("div",null,[n("div",u,[v,n("p",null,[n("a",m,[i(" nginx 面试"),d(s)])])]),k])}const _=a(o,[["render",h],["__file","nginx.html.vue"]]);export{_ as default};
