import{_ as i,X as c,Y as d,Z as e,a1 as o,$ as a,a2 as r,C as s}from"./framework-0b23a550.js";const t="/assets/2-5af6c493.png",p="/assets/3-25f3fdb0.png",l={},h={class:"hint-container tip"},_=e("p",{class:"hint-container-title"},"参考",-1),b={href:"https://cloud.tencent.com/developer/article/1480451",target:"_blank",rel:"noopener noreferrer"},f={href:"https://blog.csdn.net/J080624/article/details/88065417",target:"_blank",rel:"noopener noreferrer"},u=r(`<h2 id="innodb内存优化" tabindex="-1"><a class="header-anchor" href="#innodb内存优化" aria-hidden="true">#</a> InnoDB内存优化</h2><p>innoDB用一块内存区做IO缓存池，该缓存池不仅用来缓存innodb的索引块，而且也用来缓存innodb的数据块。</p><h3 id="innodb-buffer-pool-size" tabindex="-1"><a class="header-anchor" href="#innodb-buffer-pool-size" aria-hidden="true">#</a> innodb_buffer_pool_size</h3><p>innodb_buffer_pool_size 该变量决定了innodb存储引擎表数据和索引数据的最大缓存区大小。在保证操作系统及其他程序有足够内存可用的情况下，innodb_buffer_pool_size的值越大，缓存命中率越高，访问InnoDB表需要的磁盘I/O就越少，性能也就越高。</p><p>用于缓存 索引 和 数据的内存大小, 这个当然是越多越好, 数据读写在内存中非常快, 减少了对磁盘的读写。 当数据提交或满足检查点条件后才一次性将内存数据刷新到磁盘中。然而内存还有操作系统或数据库其他进程使用, 一般设置 buffer pool 大小为总内存的 3/4 至 4/5。</p><p>并提出：较优设置：假设系统内存 = 128 GB, buffer pool 大小预计100GB(128GB*80%)</p><p>查询cpu 个数</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">cat</span> /proc/cpuinfo <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">&quot;processor&quot;</span> <span class="token operator">|</span><span class="token function">wc</span> <span class="token parameter variable">-l</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>innodb_buffer_pool_instances = 8 </code> #默认值,或者逻辑CPU数量</p><p><code>innodb_buffer_pool_chunk_size = 128MB</code> #默认值</p><p><code>innodb_buffer_pool_size = 100 GB </code> # N<em>8</em>128MG = N GB ,N 刚好为正整数。设 N=100使得 buffer pool 为总内存的 3/4 至 4/5。</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>在调整 <code>innodb_buffer_pool_size</code> 期间，用户的请求将会阻塞，直到调整完毕，所以请勿在白天调整，在凌晨3-4点低峰期调整。</p></div><h2 id="日志优化" tabindex="-1"><a class="header-anchor" href="#日志优化" aria-hidden="true">#</a> 日志优化</h2><h3 id="innodb-log-file-size" tabindex="-1"><a class="header-anchor" href="#innodb-log-file-size" aria-hidden="true">#</a> innodb_log_file_size</h3><p>作用：指定在一个日志组中，每个log的大小。结合<code>innodb_buffer_pool_size</code>设置其大小，25%-100%。避免不需要的刷新。</p><p>注意：这个值分配的大小和数据库的写入速度，事务大小，异常重启后的恢复有很大的关系。一般取256M可以兼顾性能和recovery的速度。</p><p>分配原则：几个日志成员大小加起来差不多和你的<code>innodb_buffer_pool_size</code>相等。上限为每个日志上限大小为4G。一般控制在几个Log文件相加大小在2G以内为佳。具体情况还需要看你的事务大小，数据大小为依据。</p><p>可以在my.cnf文件里设置：</p><p>innodb_log_file_size = 256M</p><p>这个参数是一个日志组中每个日志文件的大小,此参数在高写入负载尤其是大数据集的情况下很重要。这个值越大则性能相对越高,但好似副作用是一旦系统崩溃恢复的时间会加长</p><h3 id="innodb-log-buffer-size" tabindex="-1"><a class="header-anchor" href="#innodb-log-buffer-size" aria-hidden="true">#</a> innodb_log_buffer_size</h3><p>决定innodb重做日志缓存的大小，对于可能产生大量更新记录的大事务， 增加<code>innodb_log_buffer_size</code>的大小，可用避免innodb在事物提交前就执行不必要的日志写入磁盘操作。 <code> innodb_log_buffer_size=10M</code></p><h2 id="文件io与空间占用" tabindex="-1"><a class="header-anchor" href="#文件io与空间占用" aria-hidden="true">#</a> 文件IO与空间占用</h2><h3 id="innodb-file-per-table" tabindex="-1"><a class="header-anchor" href="#innodb-file-per-table" aria-hidden="true">#</a> innodb_file_per_table</h3><p>作用：使每个<code>Innodb</code>的表，有自已<code>独立的表空间</code>。如删除文件后可以<code>回收那部分空间</code>。默认是关闭的，建议打开（innodb_file_per_table=1）</p><p>分配原则：只有使用不使用。但DB还需要有一个公共的表空间。</p><p>在my.cnf文件里设置：</p><p><code>innodb_file_per_table=1</code></p><h2 id="innodb-open-files" tabindex="-1"><a class="header-anchor" href="#innodb-open-files" aria-hidden="true">#</a> innodb_open_files</h2><p>作用：限制Innodb能打开的表的数据。</p><p>分配原则：这个值默认是<code>300</code>。如果库里的表特别多的情况，可以适当增大为<code>1000</code>。</p><p><code>innodb_open_files</code>的大小对<code>InnoDB</code>效率的影响比较小。但是在InnoDBcrash的情况下，innodb_open_files设置过小会影响recovery的效率。所以用InnoDB的时候还是把innodb_open_files放大一些比较合适。</p><p>在my.cnf文件里设置：</p><p><code>innodb_open_files=800</code></p><h2 id="mysql并发参数调整" tabindex="-1"><a class="header-anchor" href="#mysql并发参数调整" aria-hidden="true">#</a> MySQL并发参数调整</h2><p>从实现上来说，MySQL Server是多线程结构，包括后台线程和客户服务线程。多线程可用有效利用服务器资源，提供数据库的并发性能。 在MySQL中，控制并发连接和线程的主要参数包括max_connections、back_log、thread_cache_siez、table_open_cache。</p><h3 id="max-connections" tabindex="-1"><a class="header-anchor" href="#max-connections" aria-hidden="true">#</a> max_connections</h3><p>采用max_connections控制允许连接到MySQL数据库的最大数量，默认值时<code>151</code>.如果状态变量<code>connection_errors_max_connections</code>不为零，并且一直增长，则说明不断有连接请求因数据库连接数已达到允许最大值而失败，这是可以考虑增大max_connections的值。 <code>MySQL</code>最大可支持的连接数，取决于很多因素，包括给定操作系统平台的线程库的质量、内存大小、每个连接的负荷、CPU的处理速度，期望的响应时间等。在Linux平台下，性能好的服务器，支持<code>500-1000</code>个连接不是难事，需要根据服务器性能进行评估设定。</p><h3 id="back-log" tabindex="-1"><a class="header-anchor" href="#back-log" aria-hidden="true">#</a> back_log</h3><p>back_log参数控制MySQL监听TCP端口时设置的积压请求栈大小。如果MySQL的连接数达到max_connections时，新来的请求将会被存在堆栈中，以等待某一连接释放资源，该堆栈的数量即back_log，如果等待连接的数量超过back_log，将不被授予连接资源，将会报错。5.6.6版本之前默认值为50，之后的版本默认为50+（max_connections / 5），最大不超过900。 如果需要数据库在较短的时间内处理大量连接请求，可以考虑适当增大back_log的值。</p><h3 id="table-open-cache" tabindex="-1"><a class="header-anchor" href="#table-open-cache" aria-hidden="true">#</a> table_open_cache</h3><p>该参数用来控制所有SQL语句执行线程可打开表缓存的数量，而在执行SQL语句时，每一个SQL执行线程至少要打开1个表缓存。该参数的值应该根据设置的最大连接数mac_connections以及每个连接执行关联查询中涉及的表的最大数量来设定 ： max_connections x N ;</p><h3 id="thread-cache-size" tabindex="-1"><a class="header-anchor" href="#thread-cache-size" aria-hidden="true">#</a> thread_cache_size</h3><p>为了加快连接数据库的速度，MySQL会缓存一定数量的客户服务线程以备重用，通过参数 <code>thread_cache_size</code> 可控制MySQL缓存客户服务线程的数量。</p><h3 id="innodb-lock-wait-timeout" tabindex="-1"><a class="header-anchor" href="#innodb-lock-wait-timeout" aria-hidden="true">#</a> innodb_lock_wait_timeout</h3><p>该参数是用来设置InnoDB事务等待行锁的时间，默认值是50ms，可以根据需要进行动态设置。对于需要快速反馈的业务系统来说，可以将行锁的等待时间调小，以避免事务长时间挂起；对于后台运行的批量处理程序来说，可以将行锁的等待时间调大，以避免发生大的回滚操作。</p><h2 id="常用sql技巧" tabindex="-1"><a class="header-anchor" href="#常用sql技巧" aria-hidden="true">#</a> 常用SQL技巧</h2><p>SQL执行顺序</p><p>编写顺序</p><p><img src="`+t+'" alt="" loading="lazy"></p><p>执行顺序</p><p><img src="'+p+'" alt="" loading="lazy"></p>',52);function m(g,x){const n=s("ExternalLinkIcon");return c(),d("div",null,[e("div",h,[_,e("p",null,[e("a",b,[o("看MySQL的参数调优及数据库锁实践有这一篇足够了"),a(n)])]),e("p",null,[e("a",f,[o("MySQL调优之服务器参数优化实践"),a(n)])])]),u])}const k=i(l,[["render",m],["__file","mysql优化.html.vue"]]);export{k as default};
