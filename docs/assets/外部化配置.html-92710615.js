import{_ as p,X as o,Y as i,Z as n,a1 as s,$ as e,a2 as t,C as l}from"./framework-b6ea3384.js";const c="/assets/1-50dc679c.png",r={},u={class:"hint-container info"},d=n("p",{class:"hint-container-title"},"参考",-1),k={href:"https://www.cnblogs.com/summerday152/p/13954046.html",target:"_blank",rel:"noopener noreferrer"},v=t(`<h2 id="springboot官方文档对于外部化配置的介绍及作用顺序" tabindex="-1"><a class="header-anchor" href="#springboot官方文档对于外部化配置的介绍及作用顺序" aria-hidden="true">#</a> SpringBoot官方文档对于外部化配置的介绍及作用顺序</h2><p>SpringBoot支持多种外部化配置，以便于开发者能够在不同的环境下，使用同一套应用程序代码。外部化配置的方式有多种：properties文件，yaml文件，Environment变量已经命令行参数等等。</p><p>外部化配置的属性值可以通过@Value注解自动注入，亦可以通过Spring的Environment抽象访问，也可以通过@ConfigurationProperties注解绑定到结构化对象上。</p><p>SpringBoot支持很多种的外部化配置，待会我们会介绍到。在这之前，我们必须要知道如果多种配置同时出现，一定是按照特定的顺序生效的。规则如下：</p><pre><code>devtool处于active状态时，$HOME/.config/spring-boot目录中的Devtool全局配置。
测试中的@TestPropertySource注解。
测试中的@SpringBootTest#properties注解特性。
命令行参数。
SPRING_APPLICATION_JSON中的属性(环境变量或系统属性中的内联JSON嵌入)。
ServletConfig初始化参数。
ServletContext初始化参数。
java:comp/env里的JNDI属性
JVM系统属性System.getProperties()。
操作系统环境变量
仅具有random.*属性的RandomValuePropertySource 。
应用程序以外的application-{profile}.properties或者application-{profile}.yml文件
打包在应用程序内的application-{profile}.properties或者application-{profile}.yml文件
应用程序以外的application.properties或者appliaction.yml文件
打包在应用程序内的application.properties或者appliaction.yml文件
@Configuration类上的@PropertySource注解，需要注意，在ApplicationContext刷新之前，是不会将这个类中的属性加到环境中的，像logging.*,spring.main.*之类的属性，在这里配置为时已晚。
默认属性(通过SpringApplication.setDefaultProperties指定).
</code></pre><p>这里列表按组优先级排序，也就是说，任何在高优先级属性源里设置的属性都会覆盖低优先级的相同属性，列如我们上面提到的命令行属性就覆盖了application.properties的属性。</p><p>如果在application.properties中设置name=天乔巴夏，此时我用命令行设置java -jar hyh.jar --author.name=summerday，最终的name值将会是summerday，因为命令行属性优先级更高。</p><h2 id="各种外部化配置举例" tabindex="-1"><a class="header-anchor" href="#各种外部化配置举例" aria-hidden="true">#</a> 各种外部化配置举例</h2><p>随机值配置</p><p>配置文件中\${random} 可以用来生成各种不同类型的随机值，从而简化了代码生成的麻烦，例如 生成 int 值、long 值或者 string 字符串。原理在于，RandomValuePropertySource类重写了getProperty方法，判断以random.为前缀之后，进行了适当的处理。</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code>
<span class="token key attr-name">my.secret</span><span class="token punctuation">=</span><span class="token value attr-value">\${random.value}</span>
<span class="token key attr-name">my.number</span><span class="token punctuation">=</span><span class="token value attr-value">\${random.int}</span>
<span class="token key attr-name">my.bignumber</span><span class="token punctuation">=</span><span class="token value attr-value">\${random.long}</span>
<span class="token key attr-name">my.uuid</span><span class="token punctuation">=</span><span class="token value attr-value">\${random.uuid}</span>
<span class="token key attr-name">my.lessThanTen</span><span class="token punctuation">=</span><span class="token value attr-value">\${random.int(10)}</span>
<span class="token key attr-name">my.inRange</span><span class="token punctuation">=</span><span class="token value attr-value">\${random.int[1024,65536]}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="命令行参数配置" tabindex="-1"><a class="header-anchor" href="#命令行参数配置" aria-hidden="true">#</a> 命令行参数配置</h2><p>默认情况下，<code>SpringApplication</code> 将所有的命令行选项参数<code>【以--开头的参数，如--server.port=9000】</code>转换为属性，并将它们加入 <code>SpringEnvironment</code> 中，命令行属性的配置始终优先于其他的属性配置。</p><p>如果你不希望将命令行属性添加到 <code>Environment</code> 中，可以使用<code>SpringApplication.setAddCommandLineProperties(false)</code>禁用它。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">java</span> <span class="token parameter variable">-jar</span> app.jar <span class="token parameter variable">--debug</span><span class="token operator">=</span>true <span class="token comment">#开启debug模式，这个在application.properties文件中定义debug=true是一样的</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="属性文件配置" tabindex="-1"><a class="header-anchor" href="#属性文件配置" aria-hidden="true">#</a> 属性文件配置</h2><p>属性文件配置这一部分是我们比较熟悉的了，我们在快速创建SpringBoot项目的时候，默认会在resources目录下生成一个application.properties文件。SpringApplication都会从配置文件加载配置的属性，并最终加入到Spring的Environment中。除了resources目录下，还有其他路径，SpringBoot默认是支持存放配置文件的。</p><pre><code>当前项目根目录下的 /config 目录下
当前项目的根目录下
resources 目录下的 /config 目录下
resources 目录下
</code></pre><p>以上四个，优先级从上往下依次降低，也就是说，如果同时出现，上面配置的属性将会覆盖下面的。</p><p>当然，这些配置都是灵活的，如果你不喜欢默认的配置文件命名或者默认的路径，你都可以进行配置：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">java</span> <span class="token parameter variable">-jar</span> myproject.jar <span class="token parameter variable">--spring.config.name</span><span class="token operator">=</span>myproject
$ <span class="token function">java</span> <span class="token parameter variable">-jar</span> myproject.jar <span class="token parameter variable">--spring.config.location</span><span class="token operator">=</span>classpath:/default.properties,classpath:/override.properties
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="指定profile属性" tabindex="-1"><a class="header-anchor" href="#指定profile属性" aria-hidden="true">#</a> 指定profile属性</h2><p>通常情况下，我们开发的应用程序需要部署到不同的环境下，属性的配置自然也需要不同。如果每次在发布的时候替换配置文件，过于麻烦。<code>SpringBoot</code>的多环境配置为此提供了便利。具体做法如下：</p><p>我们之前在介绍各种配置的优先级的时候说过，<code>application-{profile}.properties</code>或者<code>application-{profile}.yml</code>文件的优先级高于<code>application.properties</code>或<code>application.yml</code>配置，这里的 <code>profile</code> 就是我们定义的环境标识：</p><p>我们在resource目录下创建三个文件：</p><pre><code>application.properties：默认的配置，default。
application-dev.properties：开发环境，dev。
application-prod.properties：生产环境，prod。
</code></pre><p>我们可以通过指定spring.profiles.active属性来激活对应的配置环境：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token assign-left variable">spring.profiles.active</span><span class="token operator">=</span>dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">java</span> <span class="token parameter variable">-jar</span> hyh.jar <span class="token parameter variable">--spring.profiles.active</span><span class="token operator">=</span>dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果没有profile指定的文件于profile指定的文件的配置属性同时定义，那么指定profile的配置优先。</p><h2 id="使用占位符" tabindex="-1"><a class="header-anchor" href="#使用占位符" aria-hidden="true">#</a> 使用占位符</h2><p>在使用application.properties中的值的时候，他们会从Environment中获取值，那就意味着，可以引用之前定义过的值，比如引用系统属性。具体做法如下：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code>name=天乔巴夏
description=$<span class="token punctuation">{</span>name<span class="token punctuation">}</span> is my name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="加密属性" tabindex="-1"><a class="header-anchor" href="#加密属性" aria-hidden="true">#</a> 加密属性</h2><p>Spring Boot不提供对加密属性值的任何内置支持，但是，它提供了修改Spring环境中的值所必需的挂钩点。我们可以通过实现EnvironmentPostProcessor接口在应用程序启动之前操纵Environment。</p>`,35),m={href:"https://docs.spring.io/spring-boot/docs/current/reference/html/howto.html#howto.application.customize-the-environment-or-application-context",target:"_blank",rel:"noopener noreferrer"},b=t(`<h2 id="使用yaml代替properties" tabindex="-1"><a class="header-anchor" href="#使用yaml代替properties" aria-hidden="true">#</a> 使用YAML代替properties</h2><p>只要在类路径上具有SnakeYAML库，SpringApplication类就会自动支持YAML作为属性配置的方式。SpringBoot项目中的spring-boot-starter已经提供了相关类库：org.yaml.snakeyaml，因此SpringBoot天然支持这种方式配置。</p><h2 id="类型安全的属性配置" tabindex="-1"><a class="header-anchor" href="#类型安全的属性配置" aria-hidden="true">#</a> 类型安全的属性配置</h2><p>上面说到通过@Value(&quot;\${property}&quot;) 注解来注入配置有时会比较麻烦，特别是当多个属性本质上具有层次结构的时候。SpringBoot提供了一种解决方案：让强类型的bean管理和验证你的配置。</p><p>直接来看具体的使用叭： @ConfigurationPropertie定义一个绑定配置的JavaBean</p><pre><code>使用默认构造器+getter和setter注入
</code></pre><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span><span class="token string">&quot;acme&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AcmeProperties</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">boolean</span> enabled<span class="token punctuation">;</span> <span class="token comment">//acme.enabled  默认为false</span>
    <span class="token keyword">private</span> <span class="token class-name">InetAddress</span> remoteAddress<span class="token punctuation">;</span><span class="token comment">// acme.remote-address  可以从String转换而来的类型</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Security</span> security <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Security</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">//.. 省略getter和setter方法</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Security</span> <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span> <span class="token comment">// acme.security.username</span>
        <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span> <span class="token comment">// acme.security.password</span>
        <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> roles <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">singleton</span><span class="token punctuation">(</span><span class="token string">&quot;USER&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// acme.security.roles</span>
		<span class="token comment">//.. 省略getter setter方法</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>这种方式依赖于默认的空构造函数，通过getter和setter方法赋值，因此getter和setter方法是必要的，且不支持静态属性的绑定。

如果嵌套pojo属性已经被初始化值： private final Security security = new Security();可以不需要setter方法。如果希望绑定器使用其默认构造函数动态创建实例，则需要setter。
</code></pre><h2 id="通过-contructorbinding注解使用构造器绑定的方式" tabindex="-1"><a class="header-anchor" href="#通过-contructorbinding注解使用构造器绑定的方式" aria-hidden="true">#</a> 通过@ContructorBinding注解使用构造器绑定的方式：</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@ConstructorBinding</span> <span class="token comment">//标注使用构造器绑定</span>
<span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span><span class="token string">&quot;acme&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AcmeProperties</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Security</span> security<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> enabled<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">InetAddress</span> remoteAddress<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">AcmeProperties</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> enabled<span class="token punctuation">,</span> <span class="token class-name">InetAddress</span> remoteAddress<span class="token punctuation">,</span> <span class="token class-name">Security</span> security<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>enabled <span class="token operator">=</span> enabled<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>remoteAddress <span class="token operator">=</span> remoteAddress<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>security <span class="token operator">=</span> security<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//..省略getter方法</span>
    <span class="token annotation punctuation">@ToString</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Security</span> <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> roles<span class="token punctuation">;</span>
        <span class="token keyword">public</span> <span class="token class-name">Security</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">,</span> <span class="token class-name">String</span> password<span class="token punctuation">,</span>
                        <span class="token annotation punctuation">@DefaultValue</span><span class="token punctuation">(</span><span class="token string">&quot;USER&quot;</span><span class="token punctuation">)</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> roles<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>username <span class="token operator">=</span> username<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>password <span class="token operator">=</span> password<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>roles <span class="token operator">=</span> roles<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//..省略getter方法</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果没有配置Security实例属性，那么最后结果：Security=null。如果我们想让Security={username=null,password=null,roles=[USER]}，可以在Security上加上@DefaultValue。public AcmeProperties(boolean enabled, InetAddress remoteAddress, @DefaultValue Security security)</p><p>通过@EnableConfigurationProperties注册</p><p>已经定义好了JavaBean，并与配置属性绑定完成，接着需要注册这些bean。我们通常用的@Component或@Bean，@Import加载bean的方式在这里是不可取的，SpringBoot提供了解决方案：使用@EnableConfigurationProperties，我们既可以一一指定配置的类，也可以按照组件扫描的方式进行配置。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">HyhConfigurationProperties</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">MyProperties</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token class-name">AcmeProperties</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringBootProfileApplication</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>


<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token annotation punctuation">@ConfigurationPropertiesScan</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;com.hyh.config&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringBootProfileApplication</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">acme</span><span class="token punctuation">:</span>
  <span class="token key atrule">remote-address</span><span class="token punctuation">:</span> 192.168.1.1
  <span class="token key atrule">security</span><span class="token punctuation">:</span>
    <span class="token key atrule">username</span><span class="token punctuation">:</span> admin
    <span class="token key atrule">roles</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> USER
      <span class="token punctuation">-</span> ADMIN
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token keyword">implements</span> <span class="token class-name">CommandLineRunner</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">AcmeProperties</span> acmeProperties<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>acmeProperties<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>//输出： 
AcmeProperties<span class="token punctuation">(</span>security<span class="token operator">=</span>AcmeProperties.Security<span class="token punctuation">(</span>username<span class="token operator">=</span>admin, <span class="token assign-left variable">password</span><span class="token operator">=</span>null, <span class="token assign-left variable">roles</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token environment constant">USER</span>, ADMIN<span class="token punctuation">]</span><span class="token punctuation">)</span>, <span class="token assign-left variable">enabled</span><span class="token operator">=</span>false, <span class="token assign-left variable">remoteAddress</span><span class="token operator">=</span>/192.168.1.1<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>宽松绑定</p><p>SpringBoot采用宽松的规则进行Environment和@ConfigurationProperties标注bean的匹配。如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix<span class="token operator">=</span><span class="token string">&quot;acme.my-project.person&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OwnerProperties</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> firstName<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getFirstName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setFirstName</span><span class="token punctuation">(</span><span class="token class-name">String</span> firstName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">=</span> firstName<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面表格中的属性名都可以匹配：</p><p><img src="`+c+`" alt="" loading="lazy"></p><p>@ConfigurationProperties注解中的prefix值必须是kebab case形式的，以-为分割符。</p><p>Spring官方建议，属性尽可能以lower-case kebab的形式：my.property-name=acme</p><h2 id="map如何绑定" tabindex="-1"><a class="header-anchor" href="#map如何绑定" aria-hidden="true">#</a> Map如何绑定</h2><p>绑定到Map属性时，如果key包含小写字母数字字符或-以外的任何其他字符，则需要使用方括号包围key，以便保留原始值。 如果键没有被[]包围，则所有非字母数字或-的字符都将被删除。如下：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">hyh</span><span class="token punctuation">:</span>
  <span class="token key atrule">username</span><span class="token punctuation">:</span> 天乔巴夏
  <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span>
  <span class="token key atrule">map</span><span class="token punctuation">:</span>
    <span class="token key atrule">&quot;[/key1]&quot;</span><span class="token punctuation">:</span> value1 <span class="token comment">#用引号包围[]，用[]包围key</span>
    <span class="token key atrule">/key3</span><span class="token punctuation">:</span> value3
    <span class="token key atrule">key-4</span><span class="token punctuation">:</span> value4
    <span class="token key atrule">key/5</span><span class="token punctuation">:</span> value5
<span class="token comment"># 结果：&quot;map&quot;:{/key1=value1,key5=value5, key-4=value4, key3=value3}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="环境变量如何绑定" tabindex="-1"><a class="header-anchor" href="#环境变量如何绑定" aria-hidden="true">#</a> 环境变量如何绑定</h2><p>遵循三条原则：</p><pre><code>把.换成下划线_。
移除-。
小写转大写。
</code></pre><p>如：spring.main.log-startup-info转为：SPRING_MAIN_LOGSTARTUPINFO，my.acme[0].other转为MY_ACME_0_OTHER。</p><h2 id="复杂类型" tabindex="-1"><a class="header-anchor" href="#复杂类型" aria-hidden="true">#</a> 复杂类型</h2><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">merge</span><span class="token punctuation">:</span>
  <span class="token key atrule">list</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> 天乔巴夏
      <span class="token key atrule">desc</span><span class="token punctuation">:</span> 帅啊
    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> tqbx
      <span class="token key atrule">desc</span><span class="token punctuation">:</span> 很帅啊
  <span class="token key atrule">map</span><span class="token punctuation">:</span>
    <span class="token key atrule">key1</span><span class="token punctuation">:</span>
      <span class="token key atrule">name</span><span class="token punctuation">:</span> summerday
      <span class="token key atrule">desc</span><span class="token punctuation">:</span> handsome<span class="token tag">!</span>
    <span class="token key atrule">key2</span><span class="token punctuation">:</span>
      <span class="token key atrule">name</span><span class="token punctuation">:</span> summer
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@ToString</span>
<span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;merge&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MergeProperties</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">getList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> list<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">getMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> map<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code>MergeProperties(
<span class="token key attr-name">    list</span><span class="token punctuation">=</span><span class="token value attr-value">[User(name=天乔巴夏, desc=帅啊), </span>
<span class="token key attr-name">          User(name</span><span class="token punctuation">=</span><span class="token value attr-value">tqbx, desc=很帅啊)], </span>
<span class="token key attr-name">    map</span><span class="token punctuation">=</span><span class="token value attr-value">{key1=User(name=summerday, desc=handsome!), </span>
<span class="token key attr-name">         key2</span><span class="token punctuation">=</span><span class="token value attr-value">User(name=summer, desc=null)}a</span>
)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参数校验" tabindex="-1"><a class="header-anchor" href="#参数校验" aria-hidden="true">#</a> 参数校验</h2><p>对@ConfigurationProperties类使用Spring的@Valid注解时，Spring Boot就会尝试对其进行验证。</p><p>你可以直接在配置类上使用JSR-303 javax.validation约束注解。这个做法的前提是，你的类路径上有兼容的JSR-303实现：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.hibernate<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>hibernate-validator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>6.0.18.Final<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@Validated</span>
<span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;validate&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ValidateProperties</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@NotNull</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Valid</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">SubProperties</span> subProperties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Data</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SubProperties</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Min</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span>message <span class="token operator">=</span> <span class="token string">&quot;年龄最小为10&quot;</span><span class="token punctuation">)</span>
        <span class="token keyword">public</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">validate</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> hyh
  <span class="token key atrule">sub-properties</span><span class="token punctuation">:</span>
    <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-log line-numbers-mode" data-ext="log"><pre class="language-log"><code><span class="token property">Description:</span>

<span class="token property">Binding to target org.springframework.boot.context.properties.bind.BindException:</span> 
Failed to bind properties under <span class="token string">&#39;validate&#39;</span> <span class="token property">to com.hyh.config.ValidateProperties failed:</span>
    <span class="token property">Property:</span> <span class="token domain constant">validate.sub-properties.age</span>
    <span class="token property">Value:</span> <span class="token number">5</span>
    <span class="token property">Origin:</span> class path resource <span class="token punctuation">[</span>application<span class="token punctuation">.</span>yml<span class="token punctuation">]</span><span class="token operator">:</span><span class="token number">47</span><span class="token operator">:</span><span class="token number">10</span>
    <span class="token property">Reason:</span> 年龄最小为<span class="token number">10</span>
        
<span class="token property">Action:</span>
Update your application&#39;s configuration
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="configurationproperties与-value的区别" tabindex="-1"><a class="header-anchor" href="#configurationproperties与-value的区别" aria-hidden="true">#</a> @ConfigurationProperties与@Value的区别</h2><p>@Value注解是一个核心容器功能，它没有提供和type-safe配置属性相关的功能，下面这个表格总结了两者分别支持的功能：</p><table><thead><tr><th>Feature</th><th>@ConfigurationProperties</th><th>@Value</th></tr></thead><tbody><tr><td>宽松绑定</td><td>Yes</td><td>Limited (see note below)</td></tr><tr><td>元数据支持</td><td>Yes</td><td>No</td></tr><tr><td>SpEL 表达式</td><td>No</td><td>Yes</td></tr></tbody></table><div class="hint-container info"><p class="hint-container-title">建议</p><p>官方建议： 如果你为自己的组件定义了一套配置，建议使用@ConfigurationProperties和POJO绑定，这样做能够提供结构化且类型安全的对象。 如果硬要使用@Value，建议使用kebab-case形式，如@Value(&quot; \${demo.item-price}&quot;)</p></div>`,47);function g(y,h){const a=l("ExternalLinkIcon");return o(),i("div",null,[n("div",u,[d,n("p",null,[n("a",k,[s("https://www.cnblogs.com/summerday152/p/13954046.html"),e(a)])])]),v,n("p",null,[s("可以参考"),n("a",m,[s("howto.html"),e(a)]),s("，查看具体使用方法。")]),b])}const w=p(r,[["render",g],["__file","外部化配置.html.vue"]]);export{w as default};
