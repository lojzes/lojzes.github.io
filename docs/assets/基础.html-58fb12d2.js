const e=JSON.parse('{"key":"v-33a7b9b6","path":"/study/designpattern/%E5%9F%BA%E7%A1%80.html","title":"设计模式","lang":"zh-CN","frontmatter":{"title":"设计模式","index":false,"icon":"discover","category":["学习笔记"],"description":"参考 源码 设计原则 单一原(Single Responsibility Principle，简称SRP） 核心思想：应该有且仅有一个原因引起类的变更问题描述：假如有类Class1完成职责T1，T2，当职责T1或T2有变更需要修改时，有可能影响到该类的另外一个职责正常工作。好处：类的复杂度降低、可读性提高、可维护性提高、扩展性提高、降低了变更引起的风险。需注意：单一职责原则提出了一个编写程序的标准，用“职责”或“变化原因”来衡量接口或类设计得是否优良，但是“责”和“变化原因”都是不可以度量的，因项目和环境而异。","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/study/designpattern/%E5%9F%BA%E7%A1%80.html"}],["meta",{"property":"og:site_name","content":"JavaNative"}],["meta",{"property":"og:title","content":"设计模式"}],["meta",{"property":"og:description","content":"参考 源码 设计原则 单一原(Single Responsibility Principle，简称SRP） 核心思想：应该有且仅有一个原因引起类的变更问题描述：假如有类Class1完成职责T1，T2，当职责T1或T2有变更需要修改时，有可能影响到该类的另外一个职责正常工作。好处：类的复杂度降低、可读性提高、可维护性提高、扩展性提高、降低了变更引起的风险。需注意：单一职责原则提出了一个编写程序的标准，用“职责”或“变化原因”来衡量接口或类设计得是否优良，但是“责”和“变化原因”都是不可以度量的，因项目和环境而异。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"lojzes"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"设计模式\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"lojzes\\",\\"url\\":\\"\\"}]}"]]},"headers":[{"level":2,"title":"设计原则","slug":"设计原则","link":"#设计原则","children":[{"level":3,"title":"单一原(Single Responsibility Principle，简称SRP）","slug":"单一原-single-responsibility-principle-简称srp","link":"#单一原-single-responsibility-principle-简称srp","children":[]},{"level":3,"title":"接口隔离原则（Interface Segregation Principle）","slug":"接口隔离原则-interface-segregation-principle","link":"#接口隔离原则-interface-segregation-principle","children":[]},{"level":3,"title":"依赖倒转原则（Dependence Inversion Principle）","slug":"依赖倒转原则-dependence-inversion-principle","link":"#依赖倒转原则-dependence-inversion-principle","children":[]},{"level":3,"title":"开闭原则（Open Close Principle）","slug":"开闭原则-open-close-principle","link":"#开闭原则-open-close-principle","children":[]},{"level":3,"title":"里氏代换原则（Liskov Substitution Principle）","slug":"里氏代换原则-liskov-substitution-principle","link":"#里氏代换原则-liskov-substitution-principle","children":[]},{"level":3,"title":"迪米特法则，最少知道原则（Demeter Principle）","slug":"迪米特法则-最少知道原则-demeter-principle","link":"#迪米特法则-最少知道原则-demeter-principle","children":[]},{"level":3,"title":"合成复用原则（Composite Reuse Principle）","slug":"合成复用原则-composite-reuse-principle","link":"#合成复用原则-composite-reuse-principle","children":[]}]}],"readingTime":{"minutes":3.09,"words":926},"filePathRelative":"study/designpattern/基础.md","excerpt":"<div class=\\"hint-container tip\\">\\n<p class=\\"hint-container-title\\">参考</p>\\n<p><a href=\\"https://github.com/lyyitit/java-design-patterns\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">源码</a></p>\\n</div>\\n<h2> 设计原则</h2>\\n<h3> 单一原(Single Responsibility Principle，简称SRP）</h3>\\n<p>核心思想：应该有且仅有一个原因引起类的变更问题描述：假如有类Class1完成职责T1，T2，当职责T1或T2有变更需要修改时，有可能影响到该类的另外一个职责正常工作。好处：类的复杂度降低、可读性提高、可维护性提高、扩展性提高、降低了变更引起的风险。需注意：单一职责原则提出了一个编写程序的标准，用“职责”或“变化原因”来衡量接口或类设计得是否优良，但是“责”和“变化原因”都是不可以度量的，因项目和环境而异。</p>","copyright":{"author":"lojzes","license":"MIT"},"autoDesc":true,"git":{}}');export{e as data};
