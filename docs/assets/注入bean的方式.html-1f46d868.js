import{_ as a,X as e,Y as o,Z as n,a1 as t,$ as c,a2 as i,C as p}from"./framework-0b23a550.js";const l={},r={class:"hint-container tip"},d=n("p",{class:"hint-container-title"},"参考",-1),u={href:"https://developer.aliyun.com/article/1040654",target:"_blank",rel:"noopener noreferrer"},k=i(`<h2 id="component-componentscan" tabindex="-1"><a class="header-anchor" href="#component-componentscan" aria-hidden="true">#</a> @Component + @ComponentScan</h2><p><code>SpringBoot</code>启动类的<code>@SpringBootApplication</code>注解中就标注了 <code>@ComponentScan</code>注解，这个注解默认扫描当前包及其子包下的标注有<code>@Component、@Controller、@Service、@Repository</code>等的类加载到容器中。</p><h2 id="import注解" tabindex="-1"><a class="header-anchor" href="#import注解" aria-hidden="true">#</a> @Import注解</h2><p>了解过<code>SpringBoot</code>源码的掘友应该对这个注解不陌生，<code>SpringBoot</code>之所以拥有自动装配能力，全依仗于启动类<code>@SpringBootApplication</code>注解中的另一个核心注解<code>@EnableAutoConfiguration</code>。 点进去这个注解会发现 <code>@Import(AutoConfigurationImportSelector.class)</code>,也就是通过将<code>AutoConfigurationImportSelector</code>类加载到容器中。 并通过此类的<code>getAutoConfigurationEntry()</code>方法，查找并筛选出位于<code>META-INF/spring.factories</code>文件中的所有需要注入的自动配置类并加载。 这个注解也可以直接注入<code>class</code>，<code>SpringBoot</code>默认是注入<code>ImportSelector</code>接口，重写<code>selectImports</code>规则实现，本质上都是将外部类加载到当前<code>classpath</code>中并注入成<code>bean</code>。</p><p><code>@Import</code> 支持 <code>Configuration</code>、<code>ImportSelector</code>、<code>ImportBeanDefinitionRegistrar</code>、 <code>component classes</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Documented</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Import</span> <span class="token punctuation">{</span>
	<span class="token doc-comment comment">/**
	 * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Configuration</span></span> @Configuration<span class="token punctuation">}</span>, <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ImportSelector</span></span><span class="token punctuation">}</span>,
	 * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ImportBeanDefinitionRegistrar</span></span><span class="token punctuation">}</span>, or regular component classes to import.
	 */</span>
	<span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="configuration-bean" tabindex="-1"><a class="header-anchor" href="#configuration-bean" aria-hidden="true">#</a> @Configuration + @Bean</h2><p>这个组合相信大家都有用过，比如想利用<code>ioc</code>容器管理一个<code>map</code>容器，只需要在配置类上标注上<code>@Configuration</code>声明配置类，在某个方法上标注<code>@Bean</code>并返回一个<code>new </code>即可。</p><h2 id="beandefinitionregistrypostprocessor" tabindex="-1"><a class="header-anchor" href="#beandefinitionregistrypostprocessor" aria-hidden="true">#</a> BeanDefinitionRegistryPostProcessor</h2><p>万变不离其宗，掌握<code>SpringBoot</code>启动流程和<code>SpringBean</code>的生命周期，很多问题就能连点成线的串起来。 我们知道<code>SpringBean</code>的生命周期中有很多前后置方法，整体上可以概括为普通类对象转化为<code>beanDefinition</code>再转化为<code>spring</code>中的<code>bean</code>这么三个阶段。 而<code>Spring</code>会在启动的<code>AbstratApplicationContxt</code>类中的<code>refresh</code>方法中执行 <code>invokeBeanFactoryPostProcessors</code>，这个方法中会回调所有实现 <code>BeanDefinitionRegistryPostProcessor</code>接口的钩子方法。 可以简单理解成<code>beanDefinition</code>加载完毕之后，会对<code>beanDefinition</code>进行后置处理。所以理论上实现<code>BeanDefinitionRegistryPostProcessor</code>接口就可以手动将<code>bean</code>注入到容器中。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestBeanProcessor</span> <span class="token punctuation">{</span>

   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>

      <span class="token class-name">AnnotationConfigApplicationContext</span> applicationContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token class-name">UptownBeanProcessor</span> beanDefinitionRegistryPostProcessor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UptownBeanProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      applicationContext<span class="token punctuation">.</span><span class="token function">addBeanFactoryPostProcessor</span><span class="token punctuation">(</span>beanDefinitionRegistryPostProcessor<span class="token punctuation">)</span><span class="token punctuation">;</span>

      applicationContext<span class="token punctuation">.</span><span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token class-name">Object</span> bean <span class="token operator">=</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">&quot;test_map&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bean<span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token punctuation">}</span>

<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">UptownBeanProcessor</span> <span class="token keyword">implements</span> <span class="token class-name">BeanDefinitionRegistryPostProcessor</span> <span class="token punctuation">{</span>

   <span class="token annotation punctuation">@Override</span>

   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postProcessBeanDefinitionRegistry</span><span class="token punctuation">(</span><span class="token class-name">BeanDefinitionRegistry</span> registry<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">{</span>

      <span class="token class-name">AbstractBeanDefinition</span> beanDefinition <span class="token operator">=</span> <span class="token class-name">BeanDefinitionBuilder</span><span class="token punctuation">.</span><span class="token function">rootBeanDefinition</span><span class="token punctuation">(</span><span class="token class-name">HashMap</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      registry<span class="token punctuation">.</span><span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span><span class="token string">&quot;test_map&quot;</span><span class="token punctuation">,</span> beanDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token punctuation">}</span>

   <span class="token annotation punctuation">@Override</span>

   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postProcessBeanFactory</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableListableBeanFactory</span> beanFactory<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">{</span>

   <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><ul><li>按照SpringBoot启动原理和SpringBean的生命周期为思路</li><li>@Component + @ComponentScan</li><li>@Bean + @Configuration</li><li>@Import</li><li>BeanDefinitionRegistryPostProcessor接口实现postProcessBeanDefinitionRegistry后置函数</li></ul>`,13);function m(v,b){const s=p("ExternalLinkIcon");return e(),o("div",null,[n("div",r,[d,n("p",null,[n("a",u,[t("【SpringBoot】浅谈向容器注入Bean有几种方式"),c(s)])])]),k])}const g=a(l,[["render",m],["__file","注入bean的方式.html.vue"]]);export{g as default};
