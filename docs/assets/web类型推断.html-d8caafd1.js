import{_ as a,X as t,Y as e,Z as n,a1 as p,$ as o,a2 as c,C as l}from"./framework-0b23a550.js";const i={},u={class:"hint-container tip"},r=n("p",{class:"hint-container-title"},"参考",-1),k={href:"https://ost.51cto.com/posts/20652",target:"_blank",rel:"noopener noreferrer"},d=c(`<h2 id="webapplicationtype" tabindex="-1"><a class="header-anchor" href="#webapplicationtype" aria-hidden="true">#</a> WebApplicationType</h2><p>官方的介绍 <code>​​SpringBoot​​​</code> 的 ​<code>​web</code>​​​ 类型有三种，分别是，<code>​​NONE​​​、​​SERVLET​​​ 和 ​​REACTIVE​​</code>​，定义在枚举 ​​WebApplicationType​​ 中，这三种类型分别代表了三种含义：</p><pre><code>​​NONE​​​：不是一个​​web​​​ 应用，不需要启动内置的​​web​​ 服务器；
​​SERVLET​​​：基于​​servlet​​​ 的​​web​​​ 应用，需要启动一个内置的​​servlet​​ 服务器；
​​REACTIVE​​​：一个​​reactive​​​ 的​​web​​​ 应用，需要启动一个内置的​​reactive​​ 服务器；
</code></pre><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">WebApplicationType</span> <span class="token punctuation">{</span>
 <span class="token constant">NONE</span><span class="token punctuation">,</span>
 <span class="token constant">SERVLET</span><span class="token punctuation">,</span>
 <span class="token constant">REACTIVE</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="类型推断原理" tabindex="-1"><a class="header-anchor" href="#类型推断原理" aria-hidden="true">#</a> 类型推断原理</h2><p>在构造函数中我们可以看到其中有这么一行 ​<code>​this.webApplicationType = WebApplicationType.deduceFromClasspath();​​</code>​根据属性名称我们可以推断，<code>​​web​​</code>​ 类型就是根据 ​<code>​WebApplicationType.deduceFromClasspath();​</code>​ 这个静态方法来判断的。接下来我们看下这个方法的细节。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
	<span class="token keyword">public</span> <span class="token class-name">SpringApplication</span><span class="token punctuation">(</span><span class="token class-name">ResourceLoader</span> resourceLoader<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> primarySources<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>resourceLoader <span class="token operator">=</span> resourceLoader<span class="token punctuation">;</span>
		<span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>primarySources<span class="token punctuation">,</span> <span class="token string">&quot;PrimarySources must not be null&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>primarySources <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>primarySources<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>webApplicationType <span class="token operator">=</span> <span class="token class-name">WebApplicationType</span><span class="token punctuation">.</span><span class="token function">deduceFromClasspath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>bootstrapRegistryInitializers <span class="token operator">=</span> <span class="token function">getBootstrapRegistryInitializersFromSpringFactories</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">setInitializers</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token punctuation">)</span> <span class="token function">getSpringFactoriesInstances</span><span class="token punctuation">(</span><span class="token class-name">ApplicationContextInitializer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">setListeners</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token punctuation">)</span> <span class="token function">getSpringFactoriesInstances</span><span class="token punctuation">(</span><span class="token class-name">ApplicationListener</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>mainApplicationClass <span class="token operator">=</span> <span class="token function">deduceMainApplicationClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>WebApplicationType</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
<span class="token constant">WEBFLUX_INDICATOR_CLASS</span> <span class="token operator">=</span> <span class="token string">&quot;org.springframework.web.reactive.DispatcherHandler&quot;</span><span class="token punctuation">;</span>
<span class="token constant">WEBMVC_INDICATOR_CLASS</span> <span class="token operator">=</span> <span class="token string">&quot;org.springframework.web.servlet.DispatcherServlet&quot;</span><span class="token punctuation">;</span>
<span class="token constant">JERSEY_INDICATOR_CLASS</span> <span class="token operator">=</span> <span class="token string">&quot;org.glassfish.jersey.servlet.ServletContainer&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token constant">SERVLET_INDICATOR_CLASSES</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">&quot;javax.servlet.Servlet&quot;</span><span class="token punctuation">,</span>
			<span class="token string">&quot;org.springframework.web.context.ConfigurableWebApplicationContext&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

	<span class="token keyword">static</span> <span class="token class-name">WebApplicationType</span> <span class="token function">deduceFromClasspath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">ClassUtils</span><span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token constant">WEBFLUX_INDICATOR_CLASS</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token class-name">ClassUtils</span><span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token constant">WEBMVC_INDICATOR_CLASS</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
				<span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token class-name">ClassUtils</span><span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token constant">JERSEY_INDICATOR_CLASS</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token class-name">WebApplicationType</span><span class="token punctuation">.</span><span class="token constant">REACTIVE</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> className <span class="token operator">:</span> <span class="token constant">SERVLET_INDICATOR_CLASSES</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">ClassUtils</span><span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span>className<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> <span class="token class-name">WebApplicationType</span><span class="token punctuation">.</span><span class="token constant">NONE</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> <span class="token class-name">WebApplicationType</span><span class="token punctuation">.</span><span class="token constant">SERVLET</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到 <code>​​SpringBoot​​​</code> 底层是通过 <code>​​ClassUtils.isPresent()​​</code>​ 方法来判断对应的 <code>​​web​​​</code> 类型类是否存在来判断 <code>​​web​​</code> 类型的。</p><p>在前类路径下面如果当 ​<code>​org.springframework.web.reactive.DispatcherHandler​​</code>​ 存在而且 ​<code>​org.springframework.web.servlet.DispatcherServlet</code>​​​ 和 ​<code>​org.glassfish.jersey.servlet.ServletContainer​​</code>​ 都不存在的时候说明当前应用 <code>​​web​​</code>​ 类型为 <code>​​Reactive​​。</code></p><p>当 ​<code>​javax.servlet.Servlet</code>​​​ 和 ​<code>​org.springframework.web.context.ConfigurableWebApplicationContext​​</code>​ 任何一个不存在的时候，就说明当前应用是 <code>​​None​​​</code> 类型非 <code>​​web​​​</code> 应用。否则当前应用就为 ​​Servlet​​ 类型。</p><p>而我们再看这个 <code>​​ClassUtils.isPresent()</code>​​​ 方法，可以发现底层是通过 <code>​​className​​​</code> 在类路径上加载对应的类，如果存在则返回 <code>​​true​​</code>​，如果不存在则返回 <code>​​false​​。</code></p><h2 id="classutils" tabindex="-1"><a class="header-anchor" href="#classutils" aria-hidden="true">#</a> ClassUtils</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token class-name">String</span> className<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">ClassLoader</span> classLoader<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">try</span> <span class="token punctuation">{</span>
			<span class="token function">forName</span><span class="token punctuation">(</span>className<span class="token punctuation">,</span> classLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalAccessError</span> err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">&quot;Readability mismatch in inheritance hierarchy of class [&quot;</span> <span class="token operator">+</span>
					className <span class="token operator">+</span> <span class="token string">&quot;]: &quot;</span> <span class="token operator">+</span> err<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token comment">// Typically ClassNotFoundException or NoClassDefFoundError...</span>
			<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因此这也解释了为什么我们在 <code>​​pom​​​</code> 文件中只要加入对应的依赖就可以直接得到相应的 <code>​​web​​​</code> 类型了，因为当我们在 <code>​​pom​​​</code> 中加入相应的依赖过后，类路径里面就存在了前面判断的对应的类，再通过 <code>​​ClassUtils.isPresent()</code>​​​ 就判断出来当前应用属于那种 <code>​​web​​</code> 类型了。</p>`,16);function v(m,b){const s=l("ExternalLinkIcon");return t(),e("div",null,[n("div",u,[r,n("p",null,[n("a",k,[p("https://ost.51cto.com/posts/20652"),o(s)])])]),d])}const g=a(i,[["render",v],["__file","web类型推断.html.vue"]]);export{g as default};
