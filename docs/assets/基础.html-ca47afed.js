import{_ as a,X as e,Y as t,Z as n,a1 as p,$ as o,a2 as c,C as l}from"./framework-0b23a550.js";const d="/assets/1-51492b6c.png",r={},i={class:"hint-container tip"},u=n("p",{class:"hint-container-title"},"参考",-1),k={href:"https://pdai.tech/md/spring/spring-x-framework-springmvc.html",target:"_blank",rel:"noopener noreferrer"},v=c('<h2 id="执行流程" tabindex="-1"><a class="header-anchor" href="#执行流程" aria-hidden="true">#</a> 执行流程</h2><p><img src="'+d+`" alt="" loading="lazy"></p><p>核心架构的具体流程步骤如下：</p><p>1 首先用户发送请求<code>——&gt;DispatcherServlet</code>，前端控制器收到请求后自己不进行处理，而是委托给其他的解析器进行 处理，作为统一访问点，进行全局的流程控制；</p><p>2 <code>DispatcherServlet——&gt; HandlerMapping</code>，<code>HandlerMapping</code> 将会把请求映射为 <code>HandlerExecutionChain</code> 对象（包含一 个Handler 处理器（页面控制器）对象、多个HandlerInterceptor 拦截器）对象，通过这种策略模式，很容易添加新 的映射策略；</p><p>3 <code>DispatcherServlet——&gt;HandlerAdapter</code>，HandlerAdapter 将会把处理器包装为适配器，从而支持多种类型的处理器， 即适配器设计模式的应用，从而很容易支持很多类型的处理器；</p><p>4 <code>HandlerAdapter——&gt;</code>处理器功能处理方法的调用，<code>HandlerAdapter</code>将会根据适配的结果调用真正的处理器的功能处 理方法，完成功能处理；并返回一个<code>ModelAndView </code>对象（包含模型数据、逻辑视图名）；</p><p>5 <code>ModelAndView</code> 的逻辑视图名——&gt; <code>ViewResolver</code>，<code>ViewResolver</code>将把逻辑视图名解析为具体的<code>View</code>，通过这种策 略模式，很容易更换其他视图技术；</p><p>6 <code>View——&gt;</code>渲染，View 会根据传进来的Model 模型数据进行渲染，此处的 <code>Model</code> 实际是一个 <code>Map</code> 数据结构，因此 很容易支持其他视图技术；</p><p>7 返回控制权给<code>DispatcherServlet</code>，由<code>DispatcherServlet</code>返回响应给用户，到此一个流程结束。</p><h2 id="handlerinterceptor-拦截器" tabindex="-1"><a class="header-anchor" href="#handlerinterceptor-拦截器" aria-hidden="true">#</a> HandlerInterceptor 拦截器</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">{</span>
  <span class="token keyword">default</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">postHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">ModelAndView</span> modelAndView<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">afterCompletion</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12);function m(h,_){const s=l("ExternalLinkIcon");return e(),t("div",null,[n("div",i,[u,n("p",null,[n("a",k,[p("https://pdai.tech/md/spring/spring-x-framework-springmvc.html"),o(s)])])]),v])}const w=a(r,[["render",m],["__file","基础.html.vue"]]);export{w as default};
