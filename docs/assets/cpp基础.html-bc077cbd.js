import{_ as a,X as t,Y as e,Z as n,a1 as p,$ as o,a2 as l,C as c}from"./framework-0b23a550.js";const i="/assets/app-1-d228c7c9.png",r="/assets/cpp-2-7d3f1532.png",u="/assets/cpp-3-f2aeb77f.png",d="/assets/cpp-4-c8a09342.png",k="/assets/cpp-5-7c6c8c0e.png",v={},m={class:"hint-container tip"},b=n("p",{class:"hint-container-title"},"参考",-1),h={href:"https://www.runoob.com/cplusplus/cpp-files-streams.html",target:"_blank",rel:"noopener noreferrer"},g=l(`<p>C++ 是一种静态类型的、编译式的、通用的、大小写敏感的、不规则的编程语言，支持过程化编程、面向对象编程和泛型编程。 C++ 被认为是一种中级语言，它综合了高级语言和低级语言的特点。</p><p>C++ 是由 Bjarne Stroustrup 于 1979 年在新泽西州美利山贝尔实验室开始设计开发的。C++ 进一步扩充和完善了 C 语言，最初命名为带类的 C，后来在 1983 年更名为 C++。</p><p>C++ 是 C 的一个超集，事实上，任何合法的 C 程序都是合法的 C++ 程序。</p><p>C++ 程序的源文件通常使用扩展名 .cpp、.cp 或 .c。</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>使用静态类型的编程语言是在编译时执行类型检查，而不是在运行时执行类型检查</p></div><h2 id="面向对象程序设计" tabindex="-1"><a class="header-anchor" href="#面向对象程序设计" aria-hidden="true">#</a> 面向对象程序设计</h2><p>C++ 完全支持面向对象的程序设计，包括面向对象开发的四大特性：</p><ul><li><p>封装（Encapsulation）：封装是将数据和方法组合在一起，对外部隐藏实现细节，只公开对外提供的接口。这样可以提高安全性、可靠性和灵活性。</p></li><li><p>继承（Inheritance）：继承是从已有类中派生出新类，新类具有已有类的属性和方法，并且可以扩展或修改这些属性和方法。这样可以提高代码的复用性和可扩展性。</p></li><li><p>多态（Polymorphism）：多态是指同一种操作作用于不同的对象，可以有不同的解释和实现。它可以通过接口或继承实现，可以提高代码的灵活性和可读性。</p></li><li><p>抽象（Abstraction）：抽象是从具体的实例中提取共同的特征，形成抽象类或接口，以便于代码的复用和扩展。抽象类和接口可以让程序员专注于高层次的设计和业务逻辑，而不必关注底层的实现细节。</p></li></ul><h2 id="标准库" tabindex="-1"><a class="header-anchor" href="#标准库" aria-hidden="true">#</a> 标准库</h2><p>标准的 C++ 由三个重要部分组成：</p><pre><code>核心语言，提供了所有构件块，包括变量、数据类型和常量，等等。
C++ 标准库，提供了大量的函数，用于操作文件、字符串等。
标准模板库（STL），提供了大量的方法，用于操作数据结构等。
</code></pre><h2 id="ansi-标准" tabindex="-1"><a class="header-anchor" href="#ansi-标准" aria-hidden="true">#</a> ANSI 标准</h2><p>ANSI 标准是为了确保 C++ 的便携性 —— 您所编写的代码在 Mac、UNIX、Windows、Alpha 计算机上都能通过编译。 由于 ANSI 标准已稳定使用了很长的时间，所有主要的 C++ 编译器的制造商都支持 ANSI 标准。</p><h2 id="学习-c" tabindex="-1"><a class="header-anchor" href="#学习-c" aria-hidden="true">#</a> 学习 C++</h2><p>学习 C++，关键是要理解概念，而不应过于深究语言的技术细节。</p><h2 id="标准化" tabindex="-1"><a class="header-anchor" href="#标准化" aria-hidden="true">#</a> 标准化</h2><p><img src="`+i+`" alt="" loading="lazy"></p><h2 id="c-编译器" tabindex="-1"><a class="header-anchor" href="#c-编译器" aria-hidden="true">#</a> C++ 编译器</h2><p>写在源文件中的源代码是人类可读的源。它需要&quot;编译&quot;，转为机器语言，这样 CPU 可以按给定指令执行程序。</p><p>C++ 编译器用于把源代码编译成最终的可执行程序。</p><p>大多数的 C++ 编译器并不在乎源文件的扩展名，但是如果您未指定扩展名，则默认使用 .cpp。</p><p>最常用的免费可用的编译器是 GNU 的 C/C++ 编译器，如果您使用的是 HP 或 Solaris，则可以使用各自操作系统上的编译器。</p><p>以下部分将指导您如何在不同的操作系统上安装 GNU 的 C/C++ 编译器。这里同时提到 C/C++，主要是因为 GNU 的 gcc 编译器适合于 C 和 C++ 编程语言。</p><h3 id="unix-linux-上的安装" tabindex="-1"><a class="header-anchor" href="#unix-linux-上的安装" aria-hidden="true">#</a> UNIX/Linux 上的安装</h3><p>如果您使用的是 Linux 或 UNIX，请在命令行使用下面的命令来检查您的系统上是否安装了 GCC：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ g++ <span class="token parameter variable">-v</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="c-程序结构" tabindex="-1"><a class="header-anchor" href="#c-程序结构" aria-hidden="true">#</a> C++ 程序结构</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">// 导入头文件</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token comment">// 使用命名空间</span>
using namespace std<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Hello, world!&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>C++ 语言定义了一些头文件，这些头文件包含了程序中必需的或有用的信息。上面这段程序中，包含了头文件 <code>&lt;iostream&gt;</code>。 下一行 using namespace std; 告诉编译器使用 std 命名空间。命名空间是 C++ 中一个相对新的概念。</p><p>C++ 不以行末作为结束符的标识，因此，您可以在一行上放置多个语句。例如：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>x <span class="token operator">=</span> y<span class="token punctuation">;</span>
y <span class="token operator">=</span> y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 等同于</span>
x <span class="token operator">=</span> y<span class="token punctuation">;</span> y <span class="token operator">=</span> y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="c-中的空格" tabindex="-1"><a class="header-anchor" href="#c-中的空格" aria-hidden="true">#</a> C++ 中的空格</h3><p>只包含空格的行，被称为空白行，可能带有注释，C++ 编译器会完全忽略它。</p><p>在 C++ 中，空格用于描述空白符、制表符、换行符和注释。空格分隔语句的各个部分，让编译器能识别语句中的某个元素（比如 int）在哪里结束，下一个元素在哪里开始。因此，在下面的语句中：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> age<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在这里，int 和 age 之间必须至少有一个空格字符（通常是一个空白符），这样编译器才能够区分它们。另一方面，在下面的语句中：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>fruit <span class="token operator">=</span> apples <span class="token operator">+</span> oranges<span class="token punctuation">;</span>   <span class="token comment">// 获取水果的总数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>fruit 和 =，或者 = 和 apples 之间的空格字符不是必需的，但是为了增强可读性，您可以根据需要适当增加一些空格。</p><h2 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型" aria-hidden="true">#</a> 数据类型</h2><p>C++ 为程序员提供了种类丰富的内置数据类型和用户自定义的数据类型。下表列出了七种基本的 C++ 数据类</p><table><thead><tr><th>类型</th><th>关键字</th></tr></thead><tbody><tr><td>布尔型</td><td>bool</td></tr><tr><td>字符型</td><td>char</td></tr><tr><td>整型</td><td>int</td></tr><tr><td>浮点型</td><td>float</td></tr><tr><td>双浮点型</td><td>double</td></tr><tr><td>无类型</td><td>void</td></tr><tr><td>宽字符型</td><td>wchar_t</td></tr></tbody></table><p>其实 wchar_t 是这样来的：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">short</span> <span class="token keyword">int</span> <span class="token class-name">wchar_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>所以 wchar_t 实际上的空间是和 short int 一样。</p><p>一些基本类型可以使用一个或多个类型修饰符进行修饰：</p><pre><code>signed
unsigned
short
long
</code></pre><p>下表显示了各种变量类型在内存中存储值时需要占用的内存，以及该类型的变量所能存储的最大值和最小值。</p><p>注意：不同系统会有所差异，一字节为 8 位。 注意：默认情况下，int、short、long 都是带符号的，即 signed。</p><p>注意：long int 8 个字节，int 都是 4 个字节，早期的 C 编译器定义了 long int 占用 4 个字节，int 占用 2 个字节，新版的 C/C++ 标准兼容了早期的这一设定。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;limits&gt;</span></span>

using namespace std<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;type: \\t\\t&quot;</span>
         <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;************size**************&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;bool: \\t\\t&quot;</span>
         <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;所占字节数：&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>bool<span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\t最大值：&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>numeric_limits<span class="token operator">&lt;</span>bool<span class="token operator">&gt;</span><span class="token operator">::</span>max<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\t\\t最小值：&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>numeric_limits<span class="token operator">&lt;</span>bool<span class="token operator">&gt;</span><span class="token operator">::</span>min<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;char: \\t\\t&quot;</span>
         <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;所占字节数：&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\t最大值：&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>numeric_limits<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">&gt;</span><span class="token operator">::</span>max<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\t\\t最小值：&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>numeric_limits<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">&gt;</span><span class="token operator">::</span>min<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;signed char: \\t&quot;</span>
         <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;所占字节数：&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">signed</span> <span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\t最大值：&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>numeric_limits<span class="token operator">&lt;</span><span class="token keyword">signed</span> <span class="token keyword">char</span><span class="token operator">&gt;</span><span class="token operator">::</span>max<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\t\\t最小值：&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>numeric_limits<span class="token operator">&lt;</span><span class="token keyword">signed</span> <span class="token keyword">char</span><span class="token operator">&gt;</span><span class="token operator">::</span>min<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;unsigned char: \\t&quot;</span>
         <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;所占字节数：&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\t最大值：&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>numeric_limits<span class="token operator">&lt;</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">&gt;</span><span class="token operator">::</span>max<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\t\\t最小值：&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>numeric_limits<span class="token operator">&lt;</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">&gt;</span><span class="token operator">::</span>min<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;wchar_t: \\t&quot;</span>
         <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;所占字节数：&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">wchar_t</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\t最大值：&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>numeric_limits<span class="token operator">&lt;</span><span class="token class-name">wchar_t</span><span class="token operator">&gt;</span><span class="token operator">::</span>max<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\t\\t最小值：&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>numeric_limits<span class="token operator">&lt;</span><span class="token class-name">wchar_t</span><span class="token operator">&gt;</span><span class="token operator">::</span>min<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;short: \\t\\t&quot;</span>
         <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;所占字节数：&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\t最大值：&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>numeric_limits<span class="token operator">&lt;</span><span class="token keyword">short</span><span class="token operator">&gt;</span><span class="token operator">::</span>max<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\t\\t最小值：&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>numeric_limits<span class="token operator">&lt;</span><span class="token keyword">short</span><span class="token operator">&gt;</span><span class="token operator">::</span>min<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;int: \\t\\t&quot;</span>
         <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;所占字节数：&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\t最大值：&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>numeric_limits<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">::</span>max<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\t最小值：&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>numeric_limits<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">::</span>min<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;unsigned: \\t&quot;</span>
         <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;所占字节数：&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\t最大值：&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>numeric_limits<span class="token operator">&lt;</span><span class="token keyword">unsigned</span><span class="token operator">&gt;</span><span class="token operator">::</span>max<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\t最小值：&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>numeric_limits<span class="token operator">&lt;</span><span class="token keyword">unsigned</span><span class="token operator">&gt;</span><span class="token operator">::</span>min<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;long: \\t\\t&quot;</span>
         <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;所占字节数：&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\t最大值：&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>numeric_limits<span class="token operator">&lt;</span><span class="token keyword">long</span><span class="token operator">&gt;</span><span class="token operator">::</span>max<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\t最小值：&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>numeric_limits<span class="token operator">&lt;</span><span class="token keyword">long</span><span class="token operator">&gt;</span><span class="token operator">::</span>min<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;unsigned long: \\t&quot;</span>
         <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;所占字节数：&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\t最大值：&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>numeric_limits<span class="token operator">&lt;</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token operator">&gt;</span><span class="token operator">::</span>max<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\t最小值：&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>numeric_limits<span class="token operator">&lt;</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token operator">&gt;</span><span class="token operator">::</span>min<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;double: \\t&quot;</span>
         <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;所占字节数：&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\t最大值：&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>numeric_limits<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">&gt;</span><span class="token operator">::</span>max<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\t最小值：&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>numeric_limits<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">&gt;</span><span class="token operator">::</span>min<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;long double: \\t&quot;</span>
         <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;所占字节数：&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\t最大值：&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>numeric_limits<span class="token operator">&lt;</span><span class="token keyword">long</span> <span class="token keyword">double</span><span class="token operator">&gt;</span><span class="token operator">::</span>max<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\t最小值：&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>numeric_limits<span class="token operator">&lt;</span><span class="token keyword">long</span> <span class="token keyword">double</span><span class="token operator">&gt;</span><span class="token operator">::</span>min<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;float: \\t\\t&quot;</span>
         <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;所占字节数：&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\t最大值：&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>numeric_limits<span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">&gt;</span><span class="token operator">::</span>max<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\t最小值：&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>numeric_limits<span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">&gt;</span><span class="token operator">::</span>min<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;size_t: \\t&quot;</span>
         <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;所占字节数：&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">size_t</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\t最大值：&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>numeric_limits<span class="token operator">&lt;</span><span class="token class-name">size_t</span><span class="token operator">&gt;</span><span class="token operator">::</span>max<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\t最小值：&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>numeric_limits<span class="token operator">&lt;</span><span class="token class-name">size_t</span><span class="token operator">&gt;</span><span class="token operator">::</span>min<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;string: \\t&quot;</span>
         <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;所占字节数：&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token comment">// &lt;&lt; &quot;\\t最大值：&quot; &lt;&lt; (numeric_limits&lt;string&gt;::max)() &lt;&lt; &quot;\\t最小值：&quot; &lt;&lt; (numeric_limits&lt;string&gt;::min)() &lt;&lt; endl;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;type: \\t\\t&quot;</span>
         <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;************size**************&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>type:           ************size**************
bool:           所占字节数：1   最大值：1               最小值：0
char:           所占字节数：1   最大值：                最小值：�
signed char:    所占字节数：1   最大值：                最小值：�
unsigned char:  所占字节数：1   最大值：�               最小值：
wchar_t:        所占字节数：4   最大值：2147483647              最小值：-2147483648
short:          所占字节数：2   最大值：32767           最小值：-32768
int:            所占字节数：4   最大值：2147483647      最小值：-2147483648
unsigned:       所占字节数：4   最大值：4294967295      最小值：0
long:           所占字节数：8   最大值：9223372036854775807     最小值：-9223372036854775808
unsigned long:  所占字节数：8   最大值：18446744073709551615    最小值：0
double:         所占字节数：8   最大值：1.79769e+308    最小值：2.22507e-308
long double:    所占字节数：16  最大值：1.18973e+4932   最小值：3.3621e-4932
float:          所占字节数：4   最大值：3.40282e+38     最小值：1.17549e-38
size_t:         所占字节数：8   最大值：18446744073709551615    最小值：0
string:         所占字节数：24
type:           ************size**************
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>本实例使用了 <code>endl</code>，这将在每一行后插入一个换行符，<code>&lt;&lt;</code> 运算符用于向屏幕传多个值，<code>sizeof()</code>运算符用来获取各种数据类型的大小。</p><h3 id="typedef-声明" tabindex="-1"><a class="header-anchor" href="#typedef-声明" aria-hidden="true">#</a> typedef 声明</h3><p>使用 typedef 为一个已有的类型取一个新的名字。下面是使用 typedef 定义一个新类型的语法：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">int</span> feet<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>下面的声明是完全合法的，它创建了一个整型变量 <code>distance：</code></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>feet distance<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="枚举类型" tabindex="-1"><a class="header-anchor" href="#枚举类型" aria-hidden="true">#</a> 枚举类型</h3><p>枚举类型(enumeration)是C++中的一种派生数据类型，它是由用户定义的若干枚举常量的集合</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">enum</span> 枚举名<span class="token punctuation">{</span> 
     标识符<span class="token punctuation">[</span><span class="token operator">=</span>整型常数<span class="token punctuation">]</span><span class="token punctuation">,</span> 
     标识符<span class="token punctuation">[</span><span class="token operator">=</span>整型常数<span class="token punctuation">]</span><span class="token punctuation">,</span> 
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 
    标识符<span class="token punctuation">[</span><span class="token operator">=</span>整型常数<span class="token punctuation">]</span>
<span class="token punctuation">}</span> 枚举变量<span class="token punctuation">;</span>
    
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果枚举没有初始化, 即省掉&quot;=整型常数&quot;时, 则从第一个标识符开始。</p><p>例如，下面的代码定义了一个颜色枚举，变量 c 的类型为 color。最后，c 被赋值为 &quot;blue&quot;。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
using namespace std<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">enum</span> <span class="token class-name">color</span>
    <span class="token punctuation">{</span>
        red<span class="token punctuation">,</span>
        green<span class="token punctuation">,</span>
        blue
    <span class="token punctuation">}</span> c<span class="token punctuation">;</span>
    c <span class="token operator">=</span> green<span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>默认情况下，第一个名称的值为 0，第二个名称的值为 1，第三个名称的值为 2，以此类推。但是，您也可以给名称赋予一个特殊的值，只需要添加一个初始值即可。例如，在下面的枚举中，green 的值为 5。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">enum</span> <span class="token class-name">color</span> <span class="token punctuation">{</span> red<span class="token punctuation">,</span> green<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> blue <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在这里，blue 的值为 6，因为默认情况下，每个名称都会比它前面一个名称大 1，但 red 的值依然为 0。</p><h2 id="类型转换" tabindex="-1"><a class="header-anchor" href="#类型转换" aria-hidden="true">#</a> 类型转换</h2><p>类型转换是将一个数据类型的值转换为另一种数据类型的值。 C++ 中有四种类型转换：静态转换、动态转换、常量转换和重新解释转换。</p><h3 id="静态转换-static-cast" tabindex="-1"><a class="header-anchor" href="#静态转换-static-cast" aria-hidden="true">#</a> 静态转换（Static Cast）</h3><pre><code>    静态转换是将一种数据类型的值强制转换为另一种数据类型的值。
    静态转换通常用于比较类型相似的对象之间的转换，例如将 int 类型转换为 float 类型。
    静态转换不进行任何运行时类型检查，因此可能会导致运行时错误。
</code></pre><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
using namespace std<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>

    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token keyword">float</span> f <span class="token operator">=</span> static_cast<span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 静态将int类型转换为float类型</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%f&quot;</span><span class="token punctuation">,</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">10.000000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="动态转换-dynamic-cast" tabindex="-1"><a class="header-anchor" href="#动态转换-dynamic-cast" aria-hidden="true">#</a> 动态转换（Dynamic Cast）</h3><p>动态转换（Dynamic Cast） 动态转换通常用于将一个基类指针或引用转换为派生类指针或引用。动态转换在运行时进行类型检查，如果不能进行转换则返回空指针或引发异常。</p><p>//todo 例子</p><h3 id="常量转换-const-cast" tabindex="-1"><a class="header-anchor" href="#常量转换-const-cast" aria-hidden="true">#</a> 常量转换（Const Cast）</h3><p>常量转换用于将 const 类型的对象转换为非 const 类型的对象。 常量转换只能用于转换掉 const 属性，不能改变对象的类型。</p><h3 id="重新解释转换-reinterpret-cast" tabindex="-1"><a class="header-anchor" href="#重新解释转换-reinterpret-cast" aria-hidden="true">#</a> 重新解释转换（Reinterpret Cast）</h3><p>重新解释转换将一个数据类型的值重新解释为另一个数据类型的值，通常用于在不同的数据类型之间进行转换。 重新解释转换不进行任何类型检查，因此可能会导致未定义的行为。</p><h2 id="常量" tabindex="-1"><a class="header-anchor" href="#常量" aria-hidden="true">#</a> 常量</h2><h3 id="定义常量" tabindex="-1"><a class="header-anchor" href="#定义常量" aria-hidden="true">#</a> 定义常量</h3><p>在 C++ 中，有两种简单的定义常量的方式：</p><pre><code>使用 #define 预处理器。
使用 const 关键字。
</code></pre><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
using namespace std<span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LENGTH</span> <span class="token expression"><span class="token number">10</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">WIDTH</span> <span class="token expression"><span class="token number">5</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NEWLINE</span> <span class="token char">&#39;\\n&#39;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> area<span class="token punctuation">;</span>

    area <span class="token operator">=</span> LENGTH <span class="token operator">*</span> WIDTH<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> area<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> NEWLINE<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">50</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
using namespace std<span class="token punctuation">;</span>
 
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
   <span class="token keyword">const</span> <span class="token keyword">int</span>  LENGTH <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
   <span class="token keyword">const</span> <span class="token keyword">int</span>  WIDTH  <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
   <span class="token keyword">const</span> <span class="token keyword">char</span> NEWLINE <span class="token operator">=</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span>
   <span class="token keyword">int</span> area<span class="token punctuation">;</span>  
   
   area <span class="token operator">=</span> LENGTH <span class="token operator">*</span> WIDTH<span class="token punctuation">;</span>
   cout <span class="token operator">&lt;&lt;</span> area<span class="token punctuation">;</span>
   cout <span class="token operator">&lt;&lt;</span> NEWLINE<span class="token punctuation">;</span>
   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">50</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="修饰符类型" tabindex="-1"><a class="header-anchor" href="#修饰符类型" aria-hidden="true">#</a> 修饰符类型</h2><p>C++ 允许在 char、int 和 double 数据类型前放置修饰符。</p><p>修饰符是用于改变变量类型的行为的关键字，它更能满足各种情境的需求。</p><p>下面列出了数据类型修饰符：</p><ul><li>signed：表示变量可以存储负数。对于整型变量来说，signed 可以省略，因为整型变量默认为有符号类型。</li><li>unsigned：表示变量不能存储负数。对于整型变量来说，unsigned 可以将变量范围扩大一倍。</li><li>short：表示变量的范围比 int 更小。short int 可以缩写为 short。</li><li>long：表示变量的范围比 int 更大。long int 可以缩写为 long。</li><li>long long：表示变量的范围比 long 更大。C++11 中新增的数据类型修饰符。</li><li>float：表示单精度浮点数。</li><li>double：表示双精度浮点数。</li><li>bool：表示布尔类型，只有 true 和 false 两个值。</li><li>char：表示字符类型。</li><li>wchar_t：表示宽字符类型，可以存储 Unicode 字符。</li></ul><h2 id="类型限定符" tabindex="-1"><a class="header-anchor" href="#类型限定符" aria-hidden="true">#</a> 类型限定符</h2><p>类型限定符提供了变量的额外信息，用于在定义变量或函数时改变它们的默认行为的关键字。</p><p><img src="`+r+`" alt="" loading="lazy"></p><h2 id="存储类" tabindex="-1"><a class="header-anchor" href="#存储类" aria-hidden="true">#</a> 存储类</h2><p>C++ 程序中变量/函数的范围（可见性）和生命周期。这些说明符放置在它们所修饰的类型之前。下面列出 C++ 程序中可用的存储类：</p><pre><code>auto
register
static
extern
mutable
thread_local (C++11)
</code></pre><p>从 C++ 17 开始，auto 关键字不再是 C++ 存储类说明符，且 register 关键字被弃用。</p><h3 id="auto" tabindex="-1"><a class="header-anchor" href="#auto" aria-hidden="true">#</a> auto</h3><p>自 C++ 11 以来，auto 关键字用于两种情况：声明变量时根据初始化表达式自动推断该变量的类型、声明函数时函数返回值的占位符。</p><p>C++98标准中auto关键字用于自动变量的声明，但由于使用极少且多余，在 C++17 中已删除这一用法。</p><p>根据初始化表达式自动推断被声明的变量的类型，如：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">auto</span> f<span class="token operator">=</span><span class="token number">3.14</span><span class="token punctuation">;</span>      <span class="token comment">//double</span>
<span class="token keyword">auto</span> <span class="token function">s</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//const char*</span>
<span class="token keyword">auto</span> z <span class="token operator">=</span> new <span class="token keyword">auto</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// int*</span>
<span class="token keyword">auto</span> x1 <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> x2 <span class="token operator">=</span> <span class="token number">5.0</span><span class="token punctuation">,</span> x3<span class="token operator">=</span><span class="token char">&#39;r&#39;</span><span class="token punctuation">;</span><span class="token comment">//错误，必须是初始化为同一类型</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="register" tabindex="-1"><a class="header-anchor" href="#register" aria-hidden="true">#</a> register</h3><p>register 存储类用于定义存储在寄存器中而不是 RAM 中的局部变量。这意味着变量的最大尺寸等于寄存器的大小（通常是一个词），且不能对它应用一元的 &#39;&amp;&#39; 运算符（因为它没有内存位置）。</p><h3 id="static" tabindex="-1"><a class="header-anchor" href="#static" aria-hidden="true">#</a> static</h3><p>static 存储类指示编译器在程序的生命周期内保持局部变量的存在，而不需要在每次它进入和离开作用域时进行创建和销毁。因此，使用 static 修饰局部变量可以在函数调用之间保持局部变量的值。</p><p>static 修饰符也可以应用于全局变量。当 static 修饰全局变量时，会使变量的作用域限制在声明它的文件内。</p><p>在 C++ 中，当 static 用在类数据成员上时，会导致仅有一个该成员的副本被类的所有对象共享。</p><h3 id="extern" tabindex="-1"><a class="header-anchor" href="#extern" aria-hidden="true">#</a> extern</h3><h3 id="mutable" tabindex="-1"><a class="header-anchor" href="#mutable" aria-hidden="true">#</a> mutable</h3><p>mutable 说明符仅适用于类的对象。它允许对象的成员替代常量。也就是说，mutable 成员可以通过 const 成员函数修改。</p><h3 id="thread-local" tabindex="-1"><a class="header-anchor" href="#thread-local" aria-hidden="true">#</a> thread_local</h3><p>使用 thread_local 说明符声明的变量仅可在它在其上创建的线程上访问。 变量在创建线程时创建，并在销毁线程时销毁。 每个线程都有其自己的变量副本。</p><p>thread_local 说明符可以与 static 或 extern 合并。</p><p>可以将 thread_local 仅应用于数据声明和定义，thread_local 不能用于函数声明或定义。</p><h2 id="字符串" tabindex="-1"><a class="header-anchor" href="#字符串" aria-hidden="true">#</a> 字符串</h2><p>C++ 提供了以下两种类型的字符串表示形式：</p><pre><code>C 风格字符串
C++ 引入的 string 类类型
</code></pre><h3 id="c-风格字符串" tabindex="-1"><a class="header-anchor" href="#c-风格字符串" aria-hidden="true">#</a> C 风格字符串</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
 
using namespace std<span class="token punctuation">;</span>
 
<span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
   <span class="token keyword">char</span> site<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token char">&#39;R&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;U&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;N&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;O&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;O&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;B&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;\\0&#39;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
 
   cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;菜鸟教程: &quot;</span><span class="token punctuation">;</span>
   cout <span class="token operator">&lt;&lt;</span> site <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
 
   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>菜鸟教程: RUNOOB
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>C++ 中有大量的函数用来操作以 null 结尾的字符串:</p><p><img src="`+u+`" alt="" loading="lazy"></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring&gt;</span></span>

using namespace std<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">char</span> str1<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;runoob&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> str2<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;google&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> str3<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> len<span class="token punctuation">;</span>

    <span class="token comment">// 复制 str1 到 str3</span>
    <span class="token function">strcpy</span><span class="token punctuation">(</span>str3<span class="token punctuation">,</span> str1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;strcpy( str3, str1) : &quot;</span> <span class="token operator">&lt;&lt;</span> str3 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>

    <span class="token comment">// 连接 str1 和 str2</span>
    <span class="token function">strcat</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span> str2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;strcat( str1, str2): &quot;</span> <span class="token operator">&lt;&lt;</span> str1 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>

    <span class="token comment">// 连接后，str1 的总长度</span>
    len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;strlen(str1) : &quot;</span> <span class="token operator">&lt;&lt;</span> len <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>strcpy<span class="token punctuation">(</span> str3, str1<span class="token punctuation">)</span> <span class="token builtin class-name">:</span> runoob
strcat<span class="token punctuation">(</span> str1, str2<span class="token punctuation">)</span>: runoobgoogle
strlen<span class="token punctuation">(</span>str1<span class="token punctuation">)</span> <span class="token builtin class-name">:</span> <span class="token number">12</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="string-类" tabindex="-1"><a class="header-anchor" href="#string-类" aria-hidden="true">#</a> String 类</h3><p>C++ 标准库提供了 string 类类型，支持上述所有的操作，另外还增加了其他更多的功能</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span>

using namespace std<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    string str1 <span class="token operator">=</span> <span class="token string">&quot;runoob&quot;</span><span class="token punctuation">;</span>
    string str2 <span class="token operator">=</span> <span class="token string">&quot;google&quot;</span><span class="token punctuation">;</span>
    string str3<span class="token punctuation">;</span>
    <span class="token keyword">int</span> len<span class="token punctuation">;</span>

    <span class="token comment">// 复制 str1 到 str3</span>
    str3 <span class="token operator">=</span> str1<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;str3 : &quot;</span> <span class="token operator">&lt;&lt;</span> str3 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>

    <span class="token comment">// 连接 str1 和 str2</span>
    str3 <span class="token operator">=</span> str1 <span class="token operator">+</span> str2<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;str1 + str2 : &quot;</span> <span class="token operator">&lt;&lt;</span> str3 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>

    <span class="token comment">// 连接后，str3 的总长度</span>
    len <span class="token operator">=</span> str3<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;str3.size() :  &quot;</span> <span class="token operator">&lt;&lt;</span> len <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>str3 <span class="token builtin class-name">:</span> runoob
str1 + str2 <span class="token builtin class-name">:</span> runoobgoogle
str3.size<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin class-name">:</span>  <span class="token number">12</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="引用" tabindex="-1"><a class="header-anchor" href="#引用" aria-hidden="true">#</a> 引用</h2><p>引用变量是一个别名，也就是说，它是某个已存在变量的另一个名字。一旦把引用初始化为某个变量，就可以使用该引用名称或变量名称来指向变量。</p><p>C++ 引用 vs 指针</p><p>引用很容易与指针混淆，它们之间有三个主要的不同：</p><pre><code>不存在空引用。引用必须连接到一块合法的内存。
一旦引用被初始化为一个对象，就不能被指向到另一个对象。指针可以在任何时候指向到另一个对象。
引用必须在创建时被初始化。指针可以在任何时间被初始化。
</code></pre><h3 id="创建引用" tabindex="-1"><a class="header-anchor" href="#创建引用" aria-hidden="true">#</a> 创建引用</h3><p>试想变量名称是变量附属在内存位置中的标签，您可以把引用当成是变量附属在内存位置中的第二个标签。因此，您可以通过原始变量名称或引用来访问变量的内容。例如：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">17</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我们可以为 i 声明引用变量，如下所示：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span><span class="token operator">&amp;</span>  r <span class="token operator">=</span> i<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>&amp; 读作引用。因此，第一个声明可以读作 &quot;r 是一个初始化为 i 的整型引用&quot;</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

using namespace std<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 声明简单的变量</span>
    <span class="token keyword">int</span> i<span class="token punctuation">;</span>
    <span class="token keyword">double</span> d<span class="token punctuation">;</span>

    <span class="token comment">// 声明引用变量</span>
    <span class="token keyword">int</span> <span class="token operator">&amp;</span>r <span class="token operator">=</span> i<span class="token punctuation">;</span>
    <span class="token keyword">double</span> <span class="token operator">&amp;</span>s <span class="token operator">=</span> d<span class="token punctuation">;</span>

    i <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Value of i : &quot;</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Value of i reference : &quot;</span> <span class="token operator">&lt;&lt;</span> r <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>

    d <span class="token operator">=</span> <span class="token number">11.7</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Value of d : &quot;</span> <span class="token operator">&lt;&lt;</span> d <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Value of d reference : &quot;</span> <span class="token operator">&lt;&lt;</span> s <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>Value of i <span class="token builtin class-name">:</span> <span class="token number">5</span>
Value of i reference <span class="token builtin class-name">:</span> <span class="token number">5</span>
Value of d <span class="token builtin class-name">:</span> <span class="token number">11.7</span>
Value of d reference <span class="token builtin class-name">:</span> <span class="token number">11.7</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>引用通常用于函数参数列表和函数返回值。下面列出了 C++ 程序员必须清楚的两个与 C++ 引用相关的重要概念：</p><p><img src="`+d+`" alt="" loading="lazy"></p><h2 id="日期-时间" tabindex="-1"><a class="header-anchor" href="#日期-时间" aria-hidden="true">#</a> 日期 &amp; 时间</h2><p>C++ 标准库没有提供所谓的日期类型。C++ 继承了 C 语言用于日期和时间操作的结构和函数。为了使用日期和时间相关的函数和结构，需要在 C++ 程序中引用 <code>&lt;ctime&gt;</code> 头文件。</p><p>有四个与时间相关的类型：<code>clock_t、time_t、size_t</code> 和 <code>tm</code>。类型 <code>clock_t、size_t </code>和 <code>time_t</code> 能够把系统时间和日期表示为某种整数。</p><p>结构类型 <code>tm</code> 把日期和时间以 <code>C</code> 结构的形式保存，<code>tm </code>结构的定义如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">tm</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> tm_sec<span class="token punctuation">;</span>   <span class="token comment">// 秒，正常范围从 0 到 59，但允许至 61</span>
  <span class="token keyword">int</span> tm_min<span class="token punctuation">;</span>   <span class="token comment">// 分，范围从 0 到 59</span>
  <span class="token keyword">int</span> tm_hour<span class="token punctuation">;</span>  <span class="token comment">// 小时，范围从 0 到 23</span>
  <span class="token keyword">int</span> tm_mday<span class="token punctuation">;</span>  <span class="token comment">// 一月中的第几天，范围从 1 到 31</span>
  <span class="token keyword">int</span> tm_mon<span class="token punctuation">;</span>   <span class="token comment">// 月，范围从 0 到 11</span>
  <span class="token keyword">int</span> tm_year<span class="token punctuation">;</span>  <span class="token comment">// 自 1900 年起的年数</span>
  <span class="token keyword">int</span> tm_wday<span class="token punctuation">;</span>  <span class="token comment">// 一周中的第几天，范围从 0 到 6，从星期日算起</span>
  <span class="token keyword">int</span> tm_yday<span class="token punctuation">;</span>  <span class="token comment">// 一年中的第几天，范围从 0 到 365，从 1 月 1 日算起</span>
  <span class="token keyword">int</span> tm_isdst<span class="token punctuation">;</span> <span class="token comment">// 夏令时</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当前时间</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ctime&gt;</span></span>

using namespace std<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 基于当前系统的当前日期/时间</span>
    <span class="token class-name">time_t</span> now <span class="token operator">=</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 把 now 转换为字符串形式</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>dt <span class="token operator">=</span> <span class="token function">ctime</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>

    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;本地日期和时间：&quot;</span> <span class="token operator">&lt;&lt;</span> dt <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>

    <span class="token comment">// 把 now 转换为 tm 结构</span>
    tm <span class="token operator">*</span>gmtm <span class="token operator">=</span> <span class="token function">gmtime</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>
    dt <span class="token operator">=</span> <span class="token function">asctime</span><span class="token punctuation">(</span>gmtm<span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;UTC 日期和时间：&quot;</span> <span class="token operator">&lt;&lt;</span> dt <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="基本的输入输出" tabindex="-1"><a class="header-anchor" href="#基本的输入输出" aria-hidden="true">#</a> 基本的输入输出</h2><h3 id="i-o-库头文件" tabindex="-1"><a class="header-anchor" href="#i-o-库头文件" aria-hidden="true">#</a> I/O 库头文件</h3><p><img src="`+k+`" alt="" loading="lazy"></p><h3 id="标准输出流-cout" tabindex="-1"><a class="header-anchor" href="#标准输出流-cout" aria-hidden="true">#</a> 标准输出流（cout）</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
 
using namespace std<span class="token punctuation">;</span>
 
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span> <span class="token punctuation">)</span>
<span class="token punctuation">{</span>
   <span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Hello C++&quot;</span><span class="token punctuation">;</span>
 
   cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Value of str is : &quot;</span> <span class="token operator">&lt;&lt;</span> str <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>Value of str is <span class="token builtin class-name">:</span> Hello C++
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="标准输入流-cin" tabindex="-1"><a class="header-anchor" href="#标准输入流-cin" aria-hidden="true">#</a> 标准输入流（cin）</h3><p>预定义的对象 cin 是 iostream 类的一个实例。cin 对象附属到标准输入设备，通常是键盘。cin 是与流提取运算符 &gt;&gt; 结合使用的</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

using namespace std<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;请输入您的名称： &quot;</span><span class="token punctuation">;</span>
    cin <span class="token operator">&gt;&gt;</span> name<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;您的名称是： &quot;</span> <span class="token operator">&lt;&lt;</span> name <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="标准错误流-cerr" tabindex="-1"><a class="header-anchor" href="#标准错误流-cerr" aria-hidden="true">#</a> 标准错误流（cerr）</h3><p>预定义的对象 cerr 是 iostream 类的一个实例。cerr 对象附属到标准输出设备，通常也是显示屏，但是 cerr 对象是非缓冲的，且每个流插入到 cerr 都会立即输出。</p><p>cerr 也是与流插入运算符 &lt;&lt; 结合使用的，如下所示：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
 
using namespace std<span class="token punctuation">;</span>
 
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span> <span class="token punctuation">)</span>
<span class="token punctuation">{</span>
   <span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Unable to read....&quot;</span><span class="token punctuation">;</span>
 
   cerr <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Error message : &quot;</span> <span class="token operator">&lt;&lt;</span> str <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="标准日志流-clog" tabindex="-1"><a class="header-anchor" href="#标准日志流-clog" aria-hidden="true">#</a> 标准日志流（clog）</h3><p>预定义的对象 clog 是 iostream 类的一个实例。clog 对象附属到标准输出设备，通常也是显示屏，但是 clog 对象是缓冲的。这意味着每个流插入到 clog 都会先存储在缓冲区，直到缓冲填满或者缓冲区刷新时才会输出。</p><p>clog 也是与流插入运算符 &lt;&lt; 结合使用的，如下所示：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
 
using namespace std<span class="token punctuation">;</span>
 
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span> <span class="token punctuation">)</span>
<span class="token punctuation">{</span>
   <span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Unable to read....&quot;</span><span class="token punctuation">;</span>
 
   clog <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Error message : &quot;</span> <span class="token operator">&lt;&lt;</span> str <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>Error message <span class="token builtin class-name">:</span> Unable to read<span class="token punctuation">..</span><span class="token punctuation">..</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="数据结构-struct" tabindex="-1"><a class="header-anchor" href="#数据结构-struct" aria-hidden="true">#</a> 数据结构(struct)</h2>`,184);function y(q,w){const s=c("ExternalLinkIcon");return t(),e("div",null,[n("div",m,[b,n("p",null,[n("a",h,[p("https://www.runoob.com/cplusplus/cpp-files-streams.html"),o(s)])])]),g])}const x=a(v,[["render",y],["__file","cpp基础.html.vue"]]);export{x as default};
