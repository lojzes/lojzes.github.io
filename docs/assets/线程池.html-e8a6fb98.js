const e=JSON.parse('{"key":"v-a58fdd5a","path":"/interview/java/concurrency/%E7%BA%BF%E7%A8%8B%E6%B1%A0.html","title":"线程池","lang":"zh-CN","frontmatter":{"title":"线程池","icon":"markdown","order":1,"category":["面试"],"tag":["并发编程"],"description":"参考 线程池大小 + 线程数量到底设置多少？ 线程池的优点 第一：降低资源消耗。通过重复利用已创建的线程降低线程创建和销毁造成的消耗。 第二：提高响应速度。当任务到达时，任务可以不需要等到线程创建就能立即执行。 第三：提高线程的可管理性。线程是稀缺资源，如果无限制地创建，不仅会消耗系统资源， 还会降低系统的稳定性，使用线程池可以进行统一分配、调优和监控。","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/interview/java/concurrency/%E7%BA%BF%E7%A8%8B%E6%B1%A0.html"}],["meta",{"property":"og:site_name","content":"JavaNative"}],["meta",{"property":"og:title","content":"线程池"}],["meta",{"property":"og:description","content":"参考 线程池大小 + 线程数量到底设置多少？ 线程池的优点 第一：降低资源消耗。通过重复利用已创建的线程降低线程创建和销毁造成的消耗。 第二：提高响应速度。当任务到达时，任务可以不需要等到线程创建就能立即执行。 第三：提高线程的可管理性。线程是稀缺资源，如果无限制地创建，不仅会消耗系统资源， 还会降低系统的稳定性，使用线程池可以进行统一分配、调优和监控。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://vuepress-theme-hope-docs-demo.netlify.app/"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"线程池"}],["meta",{"property":"article:author","content":"lojzes"}],["meta",{"property":"article:tag","content":"并发编程"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"线程池\\",\\"image\\":[\\"https://vuepress-theme-hope-docs-demo.netlify.app/\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"lojzes\\",\\"url\\":\\"\\"}]}"]]},"headers":[{"level":2,"title":"线程池的优点","slug":"线程池的优点","link":"#线程池的优点","children":[]},{"level":2,"title":"ThreadPoolExecutor 重要参数","slug":"threadpoolexecutor-重要参数","link":"#threadpoolexecutor-重要参数","children":[{"level":3,"title":"核心参数解释","slug":"核心参数解释","link":"#核心参数解释","children":[]},{"level":3,"title":"参数之间的关系","slug":"参数之间的关系","link":"#参数之间的关系","children":[]},{"level":3,"title":"拒绝策略","slug":"拒绝策略","link":"#拒绝策略","children":[]}]},{"level":2,"title":"任务类型","slug":"任务类型","link":"#任务类型","children":[{"level":3,"title":"CPU 密集型","slug":"cpu-密集型","link":"#cpu-密集型","children":[]},{"level":3,"title":"IO 密集型","slug":"io-密集型","link":"#io-密集型","children":[]}]},{"level":2,"title":"线程数量与任务类型的关系","slug":"线程数量与任务类型的关系","link":"#线程数量与任务类型的关系","children":[{"level":3,"title":"与CPU任务类型的关系","slug":"与cpu任务类型的关系","link":"#与cpu任务类型的关系","children":[]},{"level":3,"title":"与IO任务类型的关系","slug":"与io任务类型的关系","link":"#与io任务类型的关系","children":[]}]},{"level":2,"title":"线程池大小 + 线程数量到底设置多少？","slug":"线程池大小-线程数量到底设置多少","link":"#线程池大小-线程数量到底设置多少","children":[]}],"readingTime":{"minutes":5.98,"words":1793},"filePathRelative":"interview/java/concurrency/线程池.md","excerpt":"<div class=\\"hint-container tip\\">\\n<p class=\\"hint-container-title\\">参考</p>\\n<p><a href=\\"https://cloud.tencent.com/developer/article/1832455\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">线程池大小 + 线程数量到底设置多少？</a></p>\\n</div>\\n<h2> 线程池的优点</h2>\\n<ul>\\n<li>第一：降低资源消耗。通过重复利用已创建的线程降低线程创建和销毁造成的消耗。</li>\\n<li>第二：提高响应速度。当任务到达时，任务可以不需要等到线程创建就能立即执行。</li>\\n<li>第三：提高线程的可管理性。线程是稀缺资源，如果无限制地创建，不仅会消耗系统资源，\\n还会降低系统的稳定性，使用线程池可以进行统一分配、调优和监控。</li>\\n</ul>","copyright":{"author":"lojzes","license":"MIT"},"autoDesc":true,"git":{}}');export{e as data};
