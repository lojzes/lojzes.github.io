const e=JSON.parse('{"key":"v-72e11050","path":"/interview/java/concurrency/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B8%8A.html","title":"并发编程上","lang":"zh-CN","frontmatter":{"title":"并发编程上","icon":"markdown","order":1,"category":["面试"],"tag":["并发编程"],"description":"什么是进程？ 进程是程序的一次执行过程，是系统运行程序的基本单位，因此进程是动态的。系统运行一个程序即是一个进程从创建，运行到消亡的过程。在 Java 中，当我们启动 main 函数时其实就是启动了一个 JVM 的进程，而 main 函数所在的线程就是这个进程中的一个线程，也称主线程。 什么是线程？ 线程与进程相似，但线程是一个比进程更小的执行单位。一个进程在其执行的过程中可以产生多个线程。与进程不同的是同类的多个线程共享进程的堆和方法区资源，但每个线程有自己的程序计数器、虚拟机栈和本地方法栈，所以系统在产生一个线程，或是在各个线程之间作切换工作时，负担要比进程小得多，也正因为如此，线程也被称为轻量级进程。","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/interview/java/concurrency/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B8%8A.html"}],["meta",{"property":"og:site_name","content":"JavaNative"}],["meta",{"property":"og:title","content":"并发编程上"}],["meta",{"property":"og:description","content":"什么是进程？ 进程是程序的一次执行过程，是系统运行程序的基本单位，因此进程是动态的。系统运行一个程序即是一个进程从创建，运行到消亡的过程。在 Java 中，当我们启动 main 函数时其实就是启动了一个 JVM 的进程，而 main 函数所在的线程就是这个进程中的一个线程，也称主线程。 什么是线程？ 线程与进程相似，但线程是一个比进程更小的执行单位。一个进程在其执行的过程中可以产生多个线程。与进程不同的是同类的多个线程共享进程的堆和方法区资源，但每个线程有自己的程序计数器、虚拟机栈和本地方法栈，所以系统在产生一个线程，或是在各个线程之间作切换工作时，负担要比进程小得多，也正因为如此，线程也被称为轻量级进程。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://vuepress-theme-hope-docs-demo.netlify.app/"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"并发编程上"}],["meta",{"property":"article:author","content":"lojzes"}],["meta",{"property":"article:tag","content":"并发编程"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"并发编程上\\",\\"image\\":[\\"https://vuepress-theme-hope-docs-demo.netlify.app/\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"lojzes\\",\\"url\\":\\"\\"}]}"]]},"headers":[{"level":2,"title":"什么是进程？","slug":"什么是进程","link":"#什么是进程","children":[]},{"level":2,"title":"什么是线程？","slug":"什么是线程","link":"#什么是线程","children":[]},{"level":2,"title":"什么JVM","slug":"什么jvm","link":"#什么jvm","children":[{"level":3,"title":"运行时数据区域","slug":"运行时数据区域","link":"#运行时数据区域","children":[]},{"level":3,"title":"程序计数器","slug":"程序计数器","link":"#程序计数器","children":[]},{"level":3,"title":"虚拟机栈和本地方法栈","slug":"虚拟机栈和本地方法栈","link":"#虚拟机栈和本地方法栈","children":[]},{"level":3,"title":"堆和方法区","slug":"堆和方法区","link":"#堆和方法区","children":[]}]},{"level":2,"title":"并发与并行的区别","slug":"并发与并行的区别","link":"#并发与并行的区别","children":[]},{"level":2,"title":"同步和异步的区别","slug":"同步和异步的区别","link":"#同步和异步的区别","children":[]},{"level":2,"title":"为什么要使用多线程?","slug":"为什么要使用多线程","link":"#为什么要使用多线程","children":[]},{"level":2,"title":"使用多线程可能带来什么问题?","slug":"使用多线程可能带来什么问题","link":"#使用多线程可能带来什么问题","children":[]},{"level":2,"title":"说说线程的生命周期和状态?","slug":"说说线程的生命周期和状态","link":"#说说线程的生命周期和状态","children":[]},{"level":2,"title":"什么是线程上下文切换?","slug":"什么是线程上下文切换","link":"#什么是线程上下文切换","children":[]},{"level":2,"title":"什么是线程死锁?如何避免死锁?","slug":"什么是线程死锁-如何避免死锁","link":"#什么是线程死锁-如何避免死锁","children":[{"level":3,"title":"认识线程死锁","slug":"认识线程死锁","link":"#认识线程死锁","children":[]},{"level":3,"title":"如何预防和避免线程死锁?","slug":"如何预防和避免线程死锁","link":"#如何预防和避免线程死锁","children":[]}]},{"level":2,"title":"sleep() 方法和 wait() 方法对比","slug":"sleep-方法和-wait-方法对比","link":"#sleep-方法和-wait-方法对比","children":[]},{"level":2,"title":"yield","slug":"yield","link":"#yield","children":[]},{"level":2,"title":"为什么 wait() 方法不定义在 Thread 中？","slug":"为什么-wait-方法不定义在-thread-中","link":"#为什么-wait-方法不定义在-thread-中","children":[]},{"level":2,"title":"可以直接调用 Thread 类的 run 方法吗？","slug":"可以直接调用-thread-类的-run-方法吗","link":"#可以直接调用-thread-类的-run-方法吗","children":[]},{"level":2,"title":"java 内存模型","slug":"java-内存模型","link":"#java-内存模型","children":[{"level":3,"title":"从 CPU 缓存模型说起","slug":"从-cpu-缓存模型说起","link":"#从-cpu-缓存模型说起","children":[]},{"level":3,"title":"指令重排序","slug":"指令重排序","link":"#指令重排序","children":[]}]},{"level":2,"title":"JMM(Java Memory Model)","slug":"jmm-java-memory-model","link":"#jmm-java-memory-model","children":[{"level":3,"title":"什么是 JMM？为什么需要 JMM？","slug":"什么是-jmm-为什么需要-jmm","link":"#什么是-jmm-为什么需要-jmm","children":[]},{"level":3,"title":"JMM 是如何抽象线程和主内存之间的关系？","slug":"jmm-是如何抽象线程和主内存之间的关系","link":"#jmm-是如何抽象线程和主内存之间的关系","children":[]},{"level":3,"title":"Java 内存区域和 JMM 有何区别？","slug":"java-内存区域和-jmm-有何区别","link":"#java-内存区域和-jmm-有何区别","children":[]}]},{"level":2,"title":"并发编程三个重要特性","slug":"并发编程三个重要特性","link":"#并发编程三个重要特性","children":[{"level":3,"title":"1️⃣ 原子性","slug":"原子性","link":"#原子性","children":[]},{"level":3,"title":"2️⃣ 可见性","slug":"可见性","link":"#可见性","children":[]},{"level":3,"title":"3️⃣ 有序性","slug":"有序性","link":"#有序性","children":[]}]}],"readingTime":{"minutes":24.85,"words":7454},"filePathRelative":"interview/java/concurrency/并发编程上.md","excerpt":"<h2> 什么是进程？</h2>\\n<p>进程是程序的一次执行过程，是系统运行程序的基本单位，因此进程是动态的。系统运行一个程序即是一个进程从创建，运行到消亡的过程。在 Java 中，当我们启动 main 函数时其实就是启动了一个 JVM 的进程，而 main 函数所在的线程就是这个进程中的一个线程，也称主线程。</p>\\n<h2> 什么是线程？</h2>\\n<p>线程与进程相似，但线程是一个比进程更小的执行单位。一个进程在其执行的过程中可以产生多个线程。与进程不同的是同类的多个线程共享进程的<em><strong>堆</strong></em>和<em><strong>方法区资源</strong></em>，但每个线程有自己的<em><strong>程序计数器</strong></em>、<em><strong>虚拟机栈</strong></em>和<em><strong>本地方法栈</strong></em>，所以系统在产生一个线程，或是在各个线程之间作切换工作时，负担要比进程小得多，也正因为如此，线程也被称为轻量级进程。</p>","copyright":{"author":"lojzes","license":"MIT"},"autoDesc":true,"git":{}}');export{e as data};
