import{_ as a,X as e,Y as t,Z as n,a1 as p,$ as l,a2 as i,C as c}from"./framework-0b23a550.js";const o="/assets/flex-1-8c463205.png",u="/assets/flex-2-fd870feb.png",d="/assets/flex-3-3228da96.png",r="/assets/flex-4-ea0d8a8b.png",k="/assets/flex-5-b5e79f45.png",v="/assets/flex-6-218a75e4.png",m="/assets/flex-7-83ad37ad.png",b="/assets/flex-8-69612af7.png",g="/assets/flex-9-9d61e2d6.png",h="/assets/flex-10-26630c48.png",f="/assets/flex-11-c897effb.png",x={},y={class:"hint-container tip"},w=n("p",{class:"hint-container-title"},"源码连续地址",-1),_={href:"https://github.com/lojzes/css_mm_4e",target:"_blank",rel:"noopener noreferrer"},q=i(`<h2 id="媒体查询" tabindex="-1"><a class="header-anchor" href="#媒体查询" aria-hidden="true">#</a> 媒体查询</h2><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token comment">/*告诉浏览器，当使用宽度为480ox的设备时，加载small.css*/</span>
&lt;link href=<span class="token string">&quot;css/small.css&quot;</span> rel=<span class="token string">&quot;stylesheet&quot;</span> media=<span class="token string">&quot;(width:480px)&quot;</span>/&gt;

<span class="token comment">/*告诉浏览器，当使用宽度不大于480ox的设备时，加载small.css*/</span>
&lt;link href=<span class="token string">&quot;css/small.css&quot;</span> rel=<span class="token string">&quot;stylesheet&quot;</span> media=<span class="token string">&quot;(max-width:480px)&quot;</span>/&gt;

<span class="token comment">/*告诉浏览器，当使用宽度大于480ox的设备时，加载small.css*/</span>
&lt;link href=<span class="token string">&quot;css/small.css&quot;</span> rel=<span class="token string">&quot;stylesheet&quot;</span> media=<span class="token string">&quot;(min-width:480px)&quot;</span>/&gt;

<span class="token comment">/* 同时设定
*/</span>
&lt;link href=<span class="token string">&quot;css/small.css&quot;</span> rel=<span class="token string">&quot;stylesheet&quot;</span> media=<span class="token string">&quot;(min-width:480px) and (max-width:1024px)&quot;</span>/&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="把媒体查询写入样式表" tabindex="-1"><a class="header-anchor" href="#把媒体查询写入样式表" aria-hidden="true">#</a> 把媒体查询写入样式表</h2><h3 id="import" tabindex="-1"><a class="header-anchor" href="#import" aria-hidden="true">#</a> @import</h3><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token atrule"><span class="token rule">@import</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">&quot;small.css&quot;</span><span class="token punctuation">)</span></span> <span class="token function">media</span><span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 320px<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>必须把@import 指令放在样式表的开头，不能放在任何样式的后面。如果不这么做可能会遇到层叠问题，即在另一个外部样式表中定义，然后使用@import 指令加载的样式，可能被样式表中后面的样式覆盖。这个问题有个简单的解决方法:专门使用一个外部样式表保存@import 指令，第一个指令加载所有设备通用的基础样式表，第二个和第三个指令使用媒体查询加载样式表，如下所示:</p></div><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token atrule"><span class="token rule">@import</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>css/base.css<span class="token punctuation">)</span></span><span class="token punctuation">;</span></span> <span class="token comment">/* 没有媒体查询，应用于所有设备 */</span>
<span class="token atrule"><span class="token rule">@import</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>css/medium.css<span class="token punctuation">)</span></span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 481px<span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 768px<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="token atrule"><span class="token rule">@import</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>css/small.css<span class="token punctuation">)</span></span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 480px<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="在样式表中插入" tabindex="-1"><a class="header-anchor" href="#在样式表中插入" aria-hidden="true">#</a> 在样式表中插入</h3><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 480px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>
  <span class="token selector">body</span> <span class="token punctuation">{</span>
    <span class="token comment">/*这里是样式属性*/</span>
  <span class="token punctuation">}</span>
  <span class="token selector">.style1</span> <span class="token punctuation">{</span>
    <span class="token comment">/*这里是样式属性*/</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="移动设备优先" tabindex="-1"><a class="header-anchor" href="#移动设备优先" aria-hidden="true">#</a> 移动设备优先</h3><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token comment">/*把重置样式放在这里 */</span>
<span class="token comment">/* 把针对移动设备和所有设备的基础样式放在这里 */</span>
body
 <span class="token comment">/* body 标签的属性 */</span>
<span class="token comment">/*只针对中型屏幕 */</span>
<span class="token atrule"><span class="token rule">@media</span><span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span>768px<span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 481px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>
  <span class="token selector">body</span> <span class="token punctuation">{</span>
    <span class="token comment">/*只适用于平板电脑的属性 */</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">/* 只针对大型屏幕 */</span>
<span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 769px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>
  <span class="token selector">body</span> <span class="token punctuation">{</span>
    <span class="token comment">/*只适用于桌面浏览器的属性 */</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="栅格系统" tabindex="-1"><a class="header-anchor" href="#栅格系统" aria-hidden="true">#</a> 栅格系统</h2><h2 id="弹性盒子-flexbox" tabindex="-1"><a class="header-anchor" href="#弹性盒子-flexbox" aria-hidden="true">#</a> 弹性盒子 flexbox</h2><h3 id="弹性容器-container" tabindex="-1"><a class="header-anchor" href="#弹性容器-container" aria-hidden="true">#</a> 弹性容器(container)</h3><p><u>任何 HTML 元素都可以作为弹性容器</u>，不过通常使用<code>&lt;div&gt;</code>标签或其他 HTML 结构标签。弹性容器标签里的子代和其他标签组成弹性盒模型的另一部分</p><h3 id="弹性项目-item" tabindex="-1"><a class="header-anchor" href="#弹性项目-item" aria-hidden="true">#</a> 弹性项目(item)</h3><p>直接嵌套在弹性容器里的标签叫弹性项目。弹性容器的每个直接子代都会自动变成弹性项目。弹性容器里可以放置任何 HTML 标签。而且，各个子代标签甚至无需是同一种类型。例如，一个弹性容器里可以有一个段落和四个<code>&lt;div&gt;</code>标签，这些元素都是弹性项目。 记住，只有弹性容器的子代元素是弹性项目。如果把一个<code>&lt;div&gt;</code>标签设为弹性容器，然后在里面放一个无序列表，那么只有<code>&lt;ul&gt;</code>标签是弹性项目，<code>&lt;ul&gt;</code>标签里嵌套的<code>&lt;li&gt;</code>标签则不是</p><p>也就是说，使用弹性盒的方式很简单，只需在页面中放一个<code>&lt;div&gt;</code>标签，然后在里面再嵌套几个<code>&lt;div&gt;</code>标签，现在我们可能已经习惯了这种做法。例如，使用弹性盒可以轻易把下述简单的 HTML 结构显示在一行里:</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code>&lt;div class=<span class="token string">&quot;container&quot;</span>&lt;/div&gt;
&lt;div&gt;A fex item&lt;/div&gt;
&lt;div&gt;Another fex item&lt;/div&gt;
&lt;div&gt;A third fex item&lt;/div&gt;
&lt;/div&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>外层<code>&lt;div&gt;</code>标签是容器，内层<code>&lt;div&gt;</code>标签则是子代元素。浏览器会把这些子代<code>&lt;div&gt;</code>标签显示为块级元素，纵向督放着，占满外层<code>&lt;div&gt;</code>标签的全部宽度。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.container</span> <span class="token punctuation">{</span>
  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.container div</span> <span class="token punctuation">{</span>
  <span class="token property">flex</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.container div:nth-of-type(1)</span> <span class="token punctuation">{</span>
  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span>116<span class="token punctuation">,</span> 90<span class="token punctuation">,</span> 90<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.container div:nth-of-type(2)</span> <span class="token punctuation">{</span>
  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span>104<span class="token punctuation">,</span> 151<span class="token punctuation">,</span> 134<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.container div:nth-of-type(3)</span> <span class="token punctuation">{</span>
  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span>69<span class="token punctuation">,</span> 119<span class="token punctuation">,</span> 194<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>container<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>item<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>item<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>item<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>效果：</p><p><img src="`+o+`" alt="" loading="lazy"></p><h2 id="弹性容器相关属性" tabindex="-1"><a class="header-anchor" href="#弹性容器相关属性" aria-hidden="true">#</a> 弹性容器相关属性</h2><h3 id="flex-flow" tabindex="-1"><a class="header-anchor" href="#flex-flow" aria-hidden="true">#</a> 1️⃣ flex-flow</h3><p>默认弹性项目不会换行</p><p>指定方向和是否换行</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.flex-demo</span> <span class="token punctuation">{</span>
  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
  <span class="token comment">/* 纵轴方向翻转 不换行 */</span>
  <span class="token property">flex-flow</span><span class="token punctuation">:</span> colums-reverse nowrap<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>fex-flow 属性的第一个值控制方向，有四个可选值:</p><ul><li>row: 这是默认设置，各个弹性项目并排显示，HTML 源码中的第一个项目显示在最左边，源码中的最后一个项目显示在最右边 (如图 17-3 左边)。</li><li>row-reverse:各个弹性项目也并排显示，不过在屏幕上的顺序是颠倒的。也就是说，HTML 源码中的最后一个项目显示在容器的最左边，源码中的第一个项目显示在容器的最右边。</li><li>column: 各个弹性项目纵向叠放。这是一组<code>&lt;div&gt;</code>标签常规的显示方式，因此可能不常使用这个值。不过，使用媒体查询 (参见第 15 章“媒体查询”一节) 为移动设备设计时，用得到。我们可以在针对小屏移动设备的媒体查询中把方向设为 column，把并排显示成一行的弹性项目 (针对较大屏幕的布局)变为纵向叠放 (本章后面“修改导航栏在移动设备中的布局”一节的第 2 步会这么做)。</li><li>column-reverse: 与 column 设置的作用类似，不过弹性项目的显示顺序相反。HTML 源码中最后一个项目显示在容器的顶部 (如图 17-3 右边)</li></ul><p>flex-flow 属性的第二个值控制是否换行，把弹性项目显示在下一行 (方向为 row 时)或下一列 (方向为 column 时) 。有三个可选值:</p><ul><li>nowrap: 这是弹性项目在弹性容器里的常规行为。不管浏览器窗口有多窄，浏览器都会在一行里显示所有弹性项目 (如图 17-3 左边) 。方向为 column 时，浏览器会纵向排序各个弹性项目 (如图 17-3 右边)。</li><li>wrap: 容器里放不下的弹性项目，显示在下一行 (或下一列) ，如图 17-4 上部那个图像所示。为了让弹性项目能换到下一行 (或下一列) ，在弹性项目上还要设置一些属性，详情参见本章后面“换行显示弹性项目”一节。</li><li>wrap-reverse: 与 wrap 设置的作用类似，不过以相反的顺序换行 (如图 17-4 下部) 弹性项目可以并排显示成一行，也可以纵向显示成一列，这取决于设置的方向</li></ul><p><img src="`+u+'" alt="" loading="lazy"></p><p><img src="'+d+'" alt="" loading="lazy"></p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>flex-flow 属性是另两个弹性盒相关的 CSS 属性的简写形式: flex-direction 和 flex-wrap。例如: flex-fow: row wrap; 等价: fex-direction: row; fex-wrap: wrap; 因为使用 fex-fow 属性写的代码较少，所以本书推荐使用简写形式</p></div><h3 id="justify-content-水平对齐" tabindex="-1"><a class="header-anchor" href="#justify-content-水平对齐" aria-hidden="true">#</a> 2️⃣ justify-content (水平对齐)</h3><p>justify-content 属性告诉浏览器把弹性项目显示在一行里的什么位置。<u>只有为弹性项目设置了宽度，而且各个项目的宽度之和小于弹性容器的宽度时， 这个属性才起作用</u>。如果宽度是弹性的 (参见本章后面“flex 属性”一节) ，justify-content 属性完全没效果。这个属性有五个可选值:</p><ul><li>flex-start: 项目在一行里靠左对齐 (如图 17-5 中的标号 1) 。让人难以理解的是，如果把方向设为 row-reverse (参见“经验法则”一节) ，这个选项会靠右对齐各个项目。</li><li>flex-end:项目在一行里靠右对齐 (如图 17-5 中的标号 2) 。当然，如果把方向设为 row-reverse (参见本章前面“flex-flow 属性”一节) ，项目就靠左对齐。</li><li>center: 弹性项目居中显示在容器中间 (如图 17-5 中的标号 3)</li><li>space-between: 均布各个弹性项目，项目之间的空间大小相同，最左边的项目靠容器的左边，最右边的项目靠容器右边 (如图 17-5 中的标号 4) 。这个选项可以让一组按钮占满整个容器的宽度，例如，在页面顶部的导航栏里均布导航按钮，或者在博客文章下面显示分页链接。</li><li>space-around: 把容器里剩余的空间平均分给各个项目，包括最左边和最右边的项目 (如图 17-5 中的标号 5)。</li></ul><div class="hint-container warning"><p class="hint-container-title">注意</p><p>使用 justify-content 属性时，要设置子项目 宽度</p></div><p><img src="'+r+'" alt="" loading="lazy"></p><h3 id="align-items-上下对齐" tabindex="-1"><a class="header-anchor" href="#align-items-上下对齐" aria-hidden="true">#</a> 3️⃣ align-items (上下对齐）</h3><p>align-items 属性决定高度不同的弹性项目在弹性容器里的纵向对齐方式。<u>默认情况下，弹性项目会拉伸，因此高度都相同 </u>(如图 17-6 中的标号 5) 。不过， 还有几个其他选项:</p><ul><li>flex-start:把各个弹性项目的顶边与容器的顶边对齐 (如图 17-6 中的标号 1)</li><li>fex-end: 把各个弹性项目的底边与容器的底边对齐 (如图 17-6 中的标号 2)</li><li>center: 把各个弹性项目的纵向中心线与容器的纵向中心线对齐 (如图 17-6 中的标号 3)</li><li>baseline: 把各个弹性项目里第一个元素的基线对齐 (如图 17-6 中的标号 4)</li><li>stretch: 这是弹性项目常规的纵向对齐方式，拉伸容器里的各个项目，使各个项目的高度相同 (如图 17-6 中的标号 5) 。这个效果使用其他 CSS 技术特别难以实现。</li></ul><p><img src="'+k+`" alt="" loading="lazy"></p><h3 id="align-content" tabindex="-1"><a class="header-anchor" href="#align-content" aria-hidden="true">#</a> 4️⃣ align-content</h3><p>可以应用到弹性容器上的最后一个属性是 align-content。这个属性告诉浏览器如何放置显示为多行的弹性项目。 只有满足两个条件，align-content 属性才会起作用:</p><ul><li>第一，弹性容器必须允许换行 (参见本章前面“flex-flow 属性”一节) ;</li><li>第二，弹性容器的高度必须大于多行显示的弹性项目。也就是说，容器的高度必须比各行项目的高度之和大，有足够的纵向空间。通常，这不是问题，但有时空间会不足。</li></ul><p>align-content 属性支持六个值:</p><ul><li>flex-start: 把各行弹性项目放在弹性容器的顶部 (如图 17-7 中的标号 1) .</li><li>flex-end:把各行弹性项目放在弹性容器的底部 (如图 17-7 中的标号 2)</li><li>center: 把各行整体的纵向中心线与容器的纵向中心线对齐 (如图 17-7 中的标号 3) 。</li><li>space-between: 把纵向额外的空间平均分布在各行之间，最上面一行放在容器的顶部，最下面一行放在容器的底部 (如图 17-7 中的标号 4)。</li><li>space-around: 把空间平均分布到各行的上下，包括最上面一行和最下面-行 (如图 17-7 中的标号 5) 。</li><li>stretch:这是常规行为，即拉伸各个项目，让一行里的项目具有相同的高度。注意，如果项目里的内容不一样多，各行的高度不相同。例如，对于图 17-7 中标号 6 那个示例来说，下面一行项目里的内容比上一行项目里的内容少，所以下面一行稍微矮一点。</li></ul><p>align-content 属性要添加到弹性容器的样式里。此外，还要确保 flex-flow 厘性 (参见本章前面“flex-flow 属性”一节) 包含 wrap 选项， 而且容器的高度要比各行的高度之和大。例如，如果想实现图 17-7 中标号 5 所示的布局，可以使用下述 Css 代码:</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.container</span> <span class="token punctuation">{</span>
  <span class="token property">display</span><span class="token punctuation">:</span> fex<span class="token punctuation">;</span>
  <span class="token property">fex-fow</span><span class="token punctuation">:</span> row wrap<span class="token punctuation">;</span>
  <span class="token property">align-content</span><span class="token punctuation">:</span> space-between<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 600px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+v+`" alt="" loading="lazy"></p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>弹性容器不是块级元素，因此有些属性不能应用到弹性容器或弹性项目上。 例如，column 属性 (参见第 13 章“创建全高型分栏”一节)不能应用于弹性容器， float 和 clear 属性 (参见第 13 章“解决浮动问题”一节) 不能应用于弹性项目。</p></div><h2 id="弹性项目相关属性" tabindex="-1"><a class="header-anchor" href="#弹性项目相关属性" aria-hidden="true">#</a> 弹性项目相关属性</h2><p>为弹性容器设置属性只是开始，还有些属性是应用在弹性项目 (弹性容器的直接子代)上的， 用于<u>控制项目的显示顺序、项目的宽度，以及项目在容器里的对齐方式</u>。</p><h3 id="order" tabindex="-1"><a class="header-anchor" href="#order" aria-hidden="true">#</a> 1️⃣ order</h3><p>不过，有时可能只想把-列移到最左边或最右边。此时，只需为想移动的项目设置 order 属性，其他项目都别设置。 例如，上述代码可以像下面这样简化，现在第一个侧边栏依然会移到最左边:</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">content</span> <span class="token punctuation">{</span>
  <span class="token property">display</span><span class="token punctuation">:</span> fex<span class="token punctuation">;</span>
  <span class="token property">order</span><span class="token punctuation">:</span> -1<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们设置的值是-1，因此项目会被移到弹性容器的左边，显示在其他项目之前相反地， 把第一个侧边栏的 order 属性设为 1，而其他元素的 order 属性都不设置那个侧边栏会移到最右边。</p><h3 id="align-self" tabindex="-1"><a class="header-anchor" href="#align-self" aria-hidden="true">#</a> 2️⃣ align-self</h3><p>align-self 属性的作用与弹性容器的 align-items 属性类似。 不过，align-items 属性应用于容器里的所有弹性项目，而 align-self 属性只应用于单个弹性项目。 这个属性应用于单个项目上 (而不是容器上) ，它会覆盖 align-items 属性的值。也就是说，我们可以让容器里的所有弹性项目都靠容器上部对齐，但是只让某一个项目靠底部对齐。 align-self 属性的可选值与 align-items 属性一样 (参见本章“align-items 属性一节) ，而且相应的效果也一样。唯一的不同是，align-self 属性只能应用于单个弹性项目 (见图 17-9)</p><ul><li>flex-start:把各个弹性项目的顶边与容器的顶边对齐 (如图 17-6 中的标号 1)</li><li>fex-end: 把各个弹性项目的底边与容器的底边对齐 (如图 17-6 中的标号 2)</li><li>center: 把各个弹性项目的纵向中心线与容器的纵向中心线对齐 (如图 17-6 中的标号 3)</li><li>baseline: 把各个弹性项目里第一个元素的基线对齐 (如图 17-6 中的标号 4)</li><li>stretch: 这是弹性项目常规的纵向对齐方式，拉伸容器里的各个项目，使各个项目的高度相同 (如图 17-6 中的标号 5) 。这个效果使用其他 CSS 技术特别难以实现。</li></ul><p><img src="`+m+`" alt="" loading="lazy"></p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>弹性项目的常规行为是自动变高，让所有的项目的高度相等。可以使用 align-items 改变这种行为</p></div><h3 id="自动确定弹性项目的外边距" tabindex="-1"><a class="header-anchor" href="#自动确定弹性项目的外边距" aria-hidden="true">#</a> 自动确定弹性项目的外边距</h3><p>弹性项目有个令人惊叹的特性: 外边距不折叠。乍看起来，这不算什么，但是利用这个巧妙的特性，可以把外边距的值设为 auto，让浏览器根据可用空间调整外边距的值。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.banner</span> <span class="token punctuation">{</span>
  <span class="token property">background</span><span class="token punctuation">:</span> #444444<span class="token punctuation">;</span>
  <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>
  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
  <span class="token property">align-items</span><span class="token punctuation">:</span> flex-end<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.banner a</span> <span class="token punctuation">{</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> #5c5c5c<span class="token punctuation">;</span>
  <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>
  <span class="token property">padding</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>
  <span class="token property">text-decoration</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
  <span class="token property">border</span><span class="token punctuation">:</span> 1px black solid<span class="token punctuation">;</span>
  <span class="token property">padding-right</span><span class="token punctuation">:</span> 2px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.banner a:last-of-type</span> <span class="token punctuation">{</span>
  <span class="token property">margin-right</span><span class="token punctuation">:</span> 2px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.banner a:hover</span> <span class="token punctuation">{</span>
  <span class="token property">color</span><span class="token punctuation">:</span> #444444<span class="token punctuation">;</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> #ffffff<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.logo</span> <span class="token punctuation">{</span>
  <span class="token property">margin-right</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>banner<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>logo<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Our Company<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>#<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Our Clients<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>#<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>height<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>About Us<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>#<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Careers<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>效果</p><p><img src="`+b+`" alt="" loading="lazy"></p><p>对弹性项目来说，把外边距设为 auto 的意思是，让浏览器根据可用空间自行设置外边距的大小。在这个例子中，徽标和导航按钮不能填满整个横幅，因此，把右外边距设为 auto 的意思是，让浏览器把横幅中可用的空间 (不管有多少)放到“our Company”的右边。这么做的效果是，把导航按钮向右推，直至横幅的另一边。太棒了!</p><h3 id="flex-属性" tabindex="-1"><a class="header-anchor" href="#flex-属性" aria-hidden="true">#</a> 3️⃣ flex 属性</h3><p>使用目前所学的基本属性可以做很多事情，不过弹性盒的<code>“弹性”</code>要靠 <code>flex</code> 属性实现。这个属性是控制弹性<code>项目宽度</code>的关键， 使用它能轻易实现“弹性的”列，或者根据容器的尺寸变化而改变宽度，即便容器的尺寸是未知的或者动态变化的，也能做到这一点。 从这一方面来看，使用 <code>flex</code> 属性能做响应式 <code>Web</code> 设计 (如第 15 章所学)，而且用时少，也不用做太多数学计算。 不过，<code>flex</code> 属性有点难理解，因为它其实是三个属性的简写形式。本节会逐个说明这三个属性，让你慢慢领会。 提供给 <code>flex</code> 属性的第一个值是一个数字，指明弹性项目的相对宽度。假如某个弹性容器里有三个<code>&lt;div&gt;</code>标签，我们可以把这些标签的 <code>flex</code> 属性设为 1，让它们的宽度相同:</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.container</span> <span class="token punctuation">{</span>
  <span class="token property">display</span><span class="token punctuation">:</span> fex<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.container div</span> <span class="token punctuation">{</span>
  <span class="token property">fex</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第一个值 <code>flex-grow:0</code>:默认</p><pre><code>flex 子项增长比例
flex-grow:
0(默认)不占用剩余空间
1 沾满剩余空间
注意：
flex-grow 大于1时，按1处理，
小于1时，如0.2 其实是把剩余空间分成10份
</code></pre><p>第二个值 <code>flex-shrink:1 </code>默认 收缩相同比例</p><p><u>当 <code>flex</code> <code>容器</code>的<code>宽度</code>没有个给<code>项目宽度和大</code>的时候，<code>flex-shrink </code>会生效</u></p><p>最后一个值：<code>flex-basis:</code>设置弹性项目的基准宽度</p><p>最后一个值针对<code>flex-basis</code>属性，其作用是设置弹性项目的基准宽度。这个值可以使用绝对值，如100px或5em，也可以使用百分比值，如50%。 为<code>flex-basis</code>属性设置的值可以理解为<u>弹性项目的最小宽度</u>。flex-basis属性的值就是弹性项目的宽度，不过具体的宽度由flex属性中的其他值决定， 可能大于flex-basis属性的值，也可能小于。 例如，在图17-12上部那个图像中，flex-basis属性的值是250px。 第一个值是0,这个值用于确定弹性项目如何变宽。设为0 时，不会变宽，因此弹性项目的宽度5 flex-basis属性的值相等，即250像素。 然而，只要第一个值大于 0，整行的宽度就会被占满。因此，在图17-12中间那个图像中，虽然各个弹性项目的flex-basis属性的值是250px， 但是各个弹性项目的真实宽度有所不同，这是因为flex-grow属性的值不同，分别为1、2 和4。</p><p><img src="`+g+'" alt="" loading="lazy"></p><p>请看图17-13，图中有一个弹性容器，容器里有三个弹性项目。因为各个项目的flex-grow属性值大于0， 所以这些项目会变宽，占满整个容器的宽度 (1000像素)。这三个项目的flex-basis属性值各不相同，分别为300、200和100像素。首先，计算最小宽度之和: 300 + 200 + 100 = 600 600这个值是三个项目想占据的宽度。可是，容器的宽度 (1000像素) 比这大。因此，我们可以拿容器的宽度减项目的宽度之和，得到剩余宽度: 1000 - 600=400 也就是说，浏览器要确定怎么处理这400像素的额外空间。此时，浏览器会查看各个项目的flex-grow属性值 (1、3和4) ， 然后决定怎么分配剩余的空间。 1 + 3 +4= 8， 因此第一个项目会得到剩余空间的1/8。400的1/8 (即400/8) 是50，因此第一个项目的宽度是flex-basis属性的值加上从剩余空间中分到的量: 300 + 50 = 350像素 第二个项目会得到剩余空间的3/8，然后加上fex-basis属性的值:200 +(50*3) =350像素最后一个项目获得剩余400像素的1/2，所以它的宽度是: 100 +200 = 300像素计算方式有多种，可以看出，浏览器要做很多工作才能确定弹性项目的宽度。本章后面“经验法则”一节会告诉你一些经验，指导你如何设置fex属性的值。</p><p><img src="'+h+'" alt="" loading="lazy"></p><p><img src="'+f+`" alt="" loading="lazy"></p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>当不设置 flex 属性时，会默认</p><p>flex: 0,1,auto 弹性项目的宽度由项目内的内容决定</p></div><h3 id="经验法则" tabindex="-1"><a class="header-anchor" href="#经验法则" aria-hidden="true">#</a> 经验法则</h3><blockquote><p>1 可以看出，使用flex属性的三个值时要考虑很多事情。容器的宽度不同时，各个值的处理方式也各不相同，而我们很难记住所有可能的组合用法。不过，下面这些建议可以为你提供指导，让你知道各个属性应&gt;该在何时使用: 把所有弹性项目放在一行里。如果只想创建一行宽度不同的项目，不能允许弹性容器换行，而且只为fex属性提供一个值即可。比如说我们想在一行里创建两个侧边栏和一个主内容区域，我们想让主内容区域 占容器宽度的一半，让两个侧边栏各占容器宽度的25%。使用下述代码就能做到这一点:</p></blockquote><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code>
<span class="token selector">.container</span><span class="token punctuation">{</span>
<span class="token property">display</span><span class="token punctuation">:</span> fex<span class="token punctuation">;</span>
<span class="token property">fex-fow</span><span class="token punctuation">:</span> row nowrap<span class="token punctuation">;</span>
<span class="token punctuation">}</span> 

<span class="token selector">.sidebar1</span><span class="token punctuation">{</span>
   <span class="token property">flex</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>
<span class="token punctuation">}</span> 

<span class="token selector">.sidebar2</span><span class="token punctuation">{</span>
   <span class="token property">fex</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
 
<span class="token selector">.main</span> <span class="token punctuation">{</span>
  <span class="token property">flex</span><span class="token punctuation">:</span> 2<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们根本不用设置flex-shrink和flex-basis属性，因为我们只想得到几个宽度比例保持不变的弹性项目</p><blockquote><p>2 保持一行里各个项目的宽度比例，但是当容器太窄，无法并排显示项目时允许换行。弹性项目在一行里放不下时，如果想让项目换行，那就为容器设置wrap选项，并且按照flex-grow属性值的比例设置各个&gt;弹性项目的 flex-basis 属性:</p></blockquote><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.container</span> <span class="token punctuation">{</span>
<span class="token property">display</span><span class="token punctuation">:</span> fex<span class="token punctuation">;</span>
<span class="token property">flex-flow</span><span class="token punctuation">:</span> row wrap<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.sidebar1</span> <span class="token punctuation">{</span>
 <span class="token property">fex</span><span class="token punctuation">:</span> 1 1 100px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.sidebar2</span> <span class="token punctuation">{</span>
 <span class="token property">flex</span><span class="token punctuation">:</span> 1 1 100px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.main:</span><span class="token punctuation">{</span>
   <span class="token property">fex</span><span class="token punctuation">:</span> 2 1 200px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,92);function z(C,L){const s=c("ExternalLinkIcon");return e(),t("div",null,[n("div",y,[w,n("p",null,[n("a",_,[p("https://github.com/lojzes/css_mm_4e"),l(s)])])]),q])}const T=a(x,[["render",z],["__file","css响应式设计.html.vue"]]);export{T as default};
