import{_ as t,X as o,Y as c,Z as n,a1 as a,$ as e,a2 as p,C as i}from"./framework-0b23a550.js";const l="/assets/8-867d8fd2.webp",d={},u={class:"hint-container info"},r=n("p",{class:"hint-container-title"},"参考",-1),k={href:"https://juejin.cn/post/7128960112743415845",target:"_blank",rel:"noopener noreferrer"},v={href:"https://segmentfault.com/a/1190000012173419",target:"_blank",rel:"noopener noreferrer"},m=p(`<h2 id="解决spring-security自定义filter重复执行问题" tabindex="-1"><a class="header-anchor" href="#解决spring-security自定义filter重复执行问题" aria-hidden="true">#</a> 解决spring security自定义filter重复执行问题</h2><p><code>spring security</code>自定义<code>filter</code>非常容易出现的一个问题，那就是<code>filter</code>被执行两遍。</p><p>复现</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@EnableWebSecurity</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecurityConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebSecurityConfigurerAdapter</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">DemoFilter</span> <span class="token function">demoFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DemoFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">HttpSecurity</span> http<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        http
                <span class="token punctuation">.</span><span class="token function">addFilterBefore</span><span class="token punctuation">(</span><span class="token function">demoFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token class-name">AnonymousAuthenticationFilter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">authorizeRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">&quot;/login&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;/css/**&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/js/**&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;/fonts/**&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">anyRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中<code>DemoFilter</code>如下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoFilter</span> <span class="token keyword">extends</span> <span class="token class-name">GenericFilterBean</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> servletRequest<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> servletResponse<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> filterChain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>
        <span class="token comment">//do something</span>
        filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>servletRequest<span class="token punctuation">,</span> servletResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>原因</p><p>在<code>spring</code>容器托管的<code>GenericFilterBean</code>的<code>bean</code>，都会自动加入到<code>servlet</code>的<code>filter chain</code>，而上面的定义，还额外把<code>filter</code>加入到了<code>spring security</code>的 <code>AnonymousAuthenticationFilter</code>之前。而<code>spring security</code>也是一系列的<code>filter，</code>在<code>mvc</code>的<code>filter</code>之前执行。因此在鉴权通过的情况下，就会先后各执行一次。</p><h2 id="解决方案" tabindex="-1"><a class="header-anchor" href="#解决方案" aria-hidden="true">#</a> 解决方案</h2><h3 id="方案1" tabindex="-1"><a class="header-anchor" href="#方案1" aria-hidden="true">#</a> 方案1</h3><p>不把<code>filter</code>托管给<code>spring</code>，直接<code>new</code>，比如</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@EnableWebSecurity</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecurityConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebSecurityConfigurerAdapter</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">HttpSecurity</span> http<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        http
                <span class="token punctuation">.</span><span class="token function">addFilterBefore</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DemoFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token class-name">AnonymousAuthenticationFilter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">authorizeRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">&quot;/login&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;/css/**&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/js/**&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;/fonts/**&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">anyRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="方案2" tabindex="-1"><a class="header-anchor" href="#方案2" aria-hidden="true">#</a> 方案2</h3><p>有时候<code>filter</code>需要访问<code>spring</code>容器的资源，托管给容器可能好些，那么这个时候，就可以像<code>FilterSecurityInterceptor</code>做个标记<code>FILTER_APPLIED</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoFilter</span> <span class="token keyword">extends</span> <span class="token class-name">GenericFilterBean</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">FILTER_APPLIED</span> <span class="token operator">=</span> <span class="token string">&quot;__spring_security_demoFilter_filterApplied&quot;</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> servletRequest<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> servletResponse<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> filterChain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>servletRequest<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token constant">FILTER_APPLIED</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>servletRequest<span class="token punctuation">,</span> servletResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//do something</span>
        servletRequest<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token constant">FILTER_APPLIED</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>servletRequest<span class="token punctuation">,</span> servletResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="sso和oauth2的区别" tabindex="-1"><a class="header-anchor" href="#sso和oauth2的区别" aria-hidden="true">#</a> SSO和Oauth2的区别</h2><h3 id="简介和区别" tabindex="-1"><a class="header-anchor" href="#简介和区别" aria-hidden="true">#</a> 简介和区别</h3><p><code>SSO, single sign on,</code>单点登录。<code>sso</code>多用于多个应用之间的切换，在其中一个系统中登录， 切换到另一个系统的时候，不必再次输入用户名密码。 <code>oauth2.0</code>，开放授权，不兼容<code>oauth1.0</code>.允许第三方应用代表用户获得访问权限。可以作为web应用、桌面应用和手机等设备提供专门的认证流程。例如，用qq账号登录豆瓣、美团、大众点评；用支付宝账号登录淘宝、天猫等。 区别：<code>sso</code>和<code>oauth2.0</code>在应用场景上的区别在于，<code>SSO</code>是为了解决一个用户在鉴权服务器登陆过一次以后，可以在任何应用（通常是一个厂家的各个系统）中畅通无阻。<code>OAuth2.0</code>解决的是通过令牌<code>（token）</code>而不是密码获取某个系统的操作权限（不同厂家之间的账号共享）。</p><h2 id="sso-cas" tabindex="-1"><a class="header-anchor" href="#sso-cas" aria-hidden="true">#</a> SSO（CAS）</h2><pre><code>传统的多应用切换，面临 cookie 跨域和 session共享的问题，只要解决了上面两块问题都可以是实现SSO。

下面介绍了一种单点登录的方式CAS(中央认证服务\`Central Authentication Service\`)
</code></pre><h3 id="cas主要特征" tabindex="-1"><a class="header-anchor" href="#cas主要特征" aria-hidden="true">#</a> CAS主要特征：</h3><p><code>CAS</code>服务是保障各业务系统的用户资源的安全 。 各个业务系统获得的信息是，这个用户能不能访问我的资源。 单点登录，资源都在各个业务系统这边，不在<code>CAS</code>服务那一方。 用户在给<code>CAS</code>服务器提供了用户名密码后，作为业务系统并不知道这件事。<code>CAS</code>随便给业务系统一个<code>ST</code>，那么业务系统是不能确定这个<code>ST</code>是用户伪造的，还是真的有效，所以要拿着这个<code>ST</code>去<code>CAS</code>服务器再问一下，这个用户给我的<code>ST</code>是否有效，是有效的我才能让这个用户访问。</p><h3 id="cas实现流程" tabindex="-1"><a class="header-anchor" href="#cas实现流程" aria-hidden="true">#</a> CAS实现流程</h3><p><img src="`+l+'" alt="" loading="lazy"></p><p>上图是CAS官网上的标准流程，具体流程如下：</p><p>用户访问<code>app</code>系统，<code>app</code>系统是需要登录的，但用户现在没有登录。</p><p>跳转到<code>CAS server</code>，即<code>SSO</code>登录系统，以后图中的<code>CAS Server</code>我们统一叫做<code>SSO</code>系统。<code>SSO</code>系统也没有登录，弹出用户登录页。</p><p>用户填写用户名、密码，<code>SSO</code>系统进行认证后，将登录状态写入<code>SSO</code>的<code>session</code>，浏览器（<code>Browser</code>）中写入<code>SSO</code>域下的<code>Cookie。</code></p><p><code>SSO</code>系统登录完成后会生成一个<code>ST（Service Ticket）</code>，然后跳转到app系统，同时将ST作为参数传递给<code>app</code>系统。 <code>app</code>系统拿到<code>ST</code>后，从后台向<code>SSO</code>发送请求，验证<code>ST</code>是否有效。</p><p>验证通过后，<code>app</code>系统将登录状态写入<code>session</code>并设置<code>app</code>域下的<code>Cookie</code>。</p><p>至此，跨域单点登录就完成了。以后我们再访问<code>app</code>系统时，app就是登录的。接下来，我们再看看访问<code>app2</code>系统时的流程。</p><p>用户访问<code>app2</code>系统，<code>app2</code>系统没有登录，跳转到<code>SSO</code>。 由于<code>SSO</code>已经登录了，不需要重新登录认证。</p><p><code>SSO</code>生成<code>ST</code>，浏览器跳转到<code>app2</code>系统，并将ST作为参数传递给<code>app2</code>。 <code>app2</code>拿到<code>ST</code>，后台访问<code>SSO</code>，验证<code>ST</code>是否有效。</p><p>验证成功后，<code>app2</code>将登录状态写入<code>session</code>，并在<code>app2</code>域下写入<code>Cookie</code>。</p><p>这样，<code>app2</code>系统不需要走登录流程，就已经是登录了。<code>SSO</code>，<code>app</code>和<code>app2</code>在不同的域，它们之间的<code>session</code>不共享也是没问题的。 <code>302 </code>表示临时性重定向。访问一个<code>Url</code>时，被重定向到另一个<code>url</code>上，常用于页面跳转。</p><h2 id="oauth2" tabindex="-1"><a class="header-anchor" href="#oauth2" aria-hidden="true">#</a> Oauth2</h2><p><code>OAuth 2.0</code>授权框架支持第三方支持访问有限的HTTP服务，通过在资源所有者和HTTP服务之间进行一个批准交互来代表资源者去访问这些资源，或者通过允许第三方应用程序以自己的名义获取访问权限。</p><p>为了方便理解，可以想象<code>OAuth2.0</code>就是在用户资源和第三方应用之间的一个中间层，它把资源和第三方应用隔开，使得第三方应用无法直接访问资源，从而起到保护资源的作用。</p><p>为了访问这种受保护的资源，第三方应用（客户端）在访问的时候需要提供凭证。即，需要告诉<code>OAuth2.0</code>你是谁你要做什么。 你可以将用户名和密码告诉第三方应用，让第三方应用直接以你的名义去访问，也可以授权第三方应用去访问。</p><p>可以联想一下微信公众平台开发，在微信公众平台开发过程中当我们访问某个页面，页面可能弹出一个提示框应用需要获取我们的个人信息问是否允许，点确认其实就是授权第三方应用获取我们在微信公众平台的个人信息。这里微信网页授权就是使用的<code>OAuth2.0</code>。</p>',40);function h(b,S){const s=i("ExternalLinkIcon");return o(),c("div",null,[n("div",u,[r,n("p",null,[n("a",k,[a("SSO和Oauth2的区别 "),e(s)])]),n("p",null,[n("a",v,[a("解决spring security自定义filter重复执行问题"),e(s)])])]),m])}const y=t(d,[["render",h],["__file","info.html.vue"]]);export{y as default};
