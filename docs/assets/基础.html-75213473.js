import{_ as c,X as l,Y as i,Z as a,a1 as n,$ as s,a0 as r,a2 as p,C as t}from"./framework-0b23a550.js";const u={},d={class:"hint-container tip"},m=a("p",{class:"hint-container-title"},"参考",-1),k={href:"https://www.cnblogs.com/lys_013/p/13185940.html",target:"_blank",rel:"noopener noreferrer"},v={href:"https://www.cnblogs.com/zhaosq/p/10870762.html",target:"_blank",rel:"noopener noreferrer"},b={href:"https://juejin.cn/post/7130909498285228040",target:"_blank",rel:"noopener noreferrer"},h=p(`<p>1、方便微服务部署，减少繁杂的配置</p><p>2、方便项目启动，不需要单独下载web容器，如Tomcat，jetty等。</p><p>#云服务器配置12核心，24G内存，java启动jar命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>
<span class="token function">nohup</span> <span class="token variable">$JAVA_HOME</span>/bin/java <span class="token parameter variable">-server</span> <span class="token parameter variable">-Xms10240m</span> <span class="token parameter variable">-Xmx14336m</span> <span class="token parameter variable">-Xmn9216m</span> <span class="token parameter variable">-XX:MetaspaceSize</span><span class="token operator">=</span>400m <span class="token parameter variable">-XX:MaxMetaspaceSize</span><span class="token operator">=</span>5120m <span class="token parameter variable">-XX:-OmitStackTraceInFastThrow</span> <span class="token parameter variable">-XX:+PrintGCDetails</span> <span class="token parameter variable">-XX:+PrintGCDateStamps</span> <span class="token parameter variable">-XX:+PrintHeapAtGC</span> -Xloggc:./song_gc.log <span class="token parameter variable">-XX:ErrorFile</span><span class="token operator">=</span>./song_error.log <span class="token parameter variable">-jar</span> <span class="token variable">$APP_HOME</span>/<span class="token variable">$APP_MAINCLASS</span> <span class="token operator">&gt;&gt;</span> <span class="token variable">$LOG_FILE</span> <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token file-descriptor important">&amp;1</span> <span class="token operator">&amp;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>针对目前的容器优化，可以从以下几点考虑：</p><p>1、线程数</p><p>2、超时时间</p><p>3、JVM优化</p><p>首先，线程数是一个重点，每一次HTTP请求到达Web服务器，Web服务器都会创建一个线程来处理该请求，该参数决定了应用服务同时可以处理多少个HTTP请求。</p><p>比较重要的有两个：初始线程数 和 最大线程数。</p><p><u>初始线程数</u>：保障启动的时候，如果有大量用户访问，能够很稳定的接受请求。最大线程数：用来保证系统的稳定性。</p><p><u>超时时间</u>：用来保障连接数不容易被压垮。如果大批量的请求过来，延迟比较高，很容易把线程数用光，这时就需要提高超时时间。这种情况在生产中是比较常见的 ，一旦网络不稳定，宁愿丢包也不能把服务器压垮。</p><p><u><code>min-spare-threads</code>：最小备用线程数，tomcat启动时的初始化的线程数。</u></p>`,13),x=a("code",null,"max-threads",-1),g=p(`<p><code>accept-count</code>：当调用Web服务的HTTP请求数达到tomcat的最大线程数时，还有新的HTTP请求到来，这时tomcat会将该请求放在等待队列中，这个<code>acceptCount</code>就是指能够接受的最大等待数，默认100。如果等待队列也被放满了，这个时候再来新的请求就会被tomcat拒绝（<code>connection refused</code>）。</p><p><code>max-connections</code>：这个参数是指在同一时间，tomcat能够接受的最大连接数。一般这个值要大于<code>(max-threads)+(accept-count)</code>。</p><p><code>connection-timeout</code>：最长等待时间，如果没有数据进来，等待一段时间后断开连接，释放线程。</p><p>在<code>spring boot</code>配置文件中<code>application.yml</code>，添加以下配置：</p><p>这块对tomcat进行了一个优化配置，最大线程数是<code>2500</code>，初始化线程是<code>500</code>，超时时间是<code>12000ms</code>；</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment"># Tomcat</span>
<span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">tomcat</span><span class="token punctuation">:</span>
    <span class="token key atrule">uri-encoding</span><span class="token punctuation">:</span> UTF<span class="token punctuation">-</span><span class="token number">8</span>
    <span class="token comment">#最小线程数</span>
    <span class="token key atrule">min-spare-threads</span><span class="token punctuation">:</span> <span class="token number">500</span>
    <span class="token comment">#最大线程数</span>
    <span class="token key atrule">max-threads</span><span class="token punctuation">:</span> <span class="token number">2500</span>
    <span class="token comment">#最大链接数</span>
    <span class="token key atrule">max-connections</span><span class="token punctuation">:</span> <span class="token number">6500</span>
    <span class="token comment">#最大等待队列长度</span>
    <span class="token key atrule">accept-count</span><span class="token punctuation">:</span> <span class="token number">1000</span>
    <span class="token comment">#请求头最大长度kb</span>
    <span class="token key atrule">max-http-header-size</span><span class="token punctuation">:</span> <span class="token number">1048576</span>
    <span class="token comment">#请请求体最大长度kb</span>
    <span class="token comment">#max-http-post-size: 2097152</span>
  <span class="token comment">#链接建立超时时间</span>
  <span class="token key atrule">connection-timeout</span><span class="token punctuation">:</span> <span class="token number">12000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>JVM优化一般来说没有太多场景，无非就是加大初始的堆，和最大限制堆,当然也不能无限增大，要根据实际情况优化。</p><p>初始内存和最大内存基本会设置成一样的，具体大小根据场景设置，-server是一个必须要用的参数，至于收集器这些使用默认的就可以了，除非有特定需求。</p><p>1.使用-server模式：设置JVM使用server模式。64位JDK默认启动该模式。</p><p>2.指定堆参数：这个根据服务器的内存大小，来设置堆参数。</p><p>-Xms :设置Java堆栈的初始化大小</p><p>-Xmx :设置最大的java堆大小</p><p>设置初始化堆内存为10240MB，最大为14336MB。</p><h2 id="tomcat-配置" tabindex="-1"><a class="header-anchor" href="#tomcat-配置" aria-hidden="true">#</a> tomcat 配置</h2><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Connector</span> <span class="token attr-name">port</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>8080<span class="token punctuation">&quot;</span></span> <span class="token attr-name">protocol</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.apache.coyote.http11.Http11NioProtocol<span class="token punctuation">&quot;</span></span>       
 <span class="token attr-name">redirectPort</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>8443<span class="token punctuation">&quot;</span></span>        
  <span class="token attr-name">URIEncoding</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span>    
  <span class="token attr-name">minSpareThreads</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>100<span class="token punctuation">&quot;</span></span>       
  <span class="token attr-name">maxSpareThreads</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>500<span class="token punctuation">&quot;</span></span>     
  <span class="token attr-name">maxThreads</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1000<span class="token punctuation">&quot;</span></span>      
  <span class="token attr-name">acceptCount</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>700<span class="token punctuation">&quot;</span></span>        
  <span class="token attr-name">connectionTimeout</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>30000<span class="token punctuation">&quot;</span></span>   
  <span class="token attr-name">enableLookups</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>false<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参数说明" tabindex="-1"><a class="header-anchor" href="#参数说明" aria-hidden="true">#</a> 参数说明</h2><p><code>maxIdleTime：</code> 最大空闲时间，超过这个空闲时间，且线程数大于minSpareThreads的，都会被回收，默认值1分钟（60000ms）；</p><p><code>minSpareThreads：</code>最小空闲线程数，任何情况都会存活的线程数，即便超过了最大空闲时间，也不会被回收，默认值4；</p><p><code>maxSpareThreads</code>：最大空闲线程数，在最大空闲时间（maxIdleTime）内活跃过，此时空闲，当空闲时间大于maxIdleTime则被回收，小则继续存活，等待被调度，默认值50；</p><p><code>maxThreads：</code>最大线程数，大并发请求时，tomcat能创建来处理请求的最大线程数，超过则放入请求队列中进行排队，默认值为200；</p><p><code>acceptCount：</code>当最大线程数（maxThreads）被使用完时，可以放入请求队列排队个数，超过这个数返回connection refused（请求被拒绝），一般设置和maxThreads一样，不过这个具体需要根据自己的应用实际访问峰值和平均值来权衡，默认值为100；</p><p><code>connectionTimeout</code>：网络连接超时，假设设置为0表示永不超时，这样设置隐患巨大，通常可设置为30000ms，默认60000ms。</p><pre><code> Windows Tomcat允许每个进程maxThreads（最大线程数）2000
 Linux Tomcat允许每个进程maxThreads（最大线程数）1000
</code></pre><h2 id="springboot" tabindex="-1"><a class="header-anchor" href="#springboot" aria-hidden="true">#</a> springboot</h2><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code>
<span class="token comment"># Tomcat的 maxConnections、maxThreads、acceptCount 三大配置，</span>
<span class="token comment"># 分别表示最大连接数，最大线程数、最大的等待数，可以通过 application.yml配置文件来改变这个三个值，一个标准的示例如下：</span>
<span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">tomcat</span><span class="token punctuation">:</span>
    <span class="token key atrule">uri-encoding</span><span class="token punctuation">:</span> UTF<span class="token punctuation">-</span><span class="token number">8</span>
  <span class="token comment"># 思考问题：一台服务器配置多少线程合适？</span>
    <span class="token key atrule">accept-count</span><span class="token punctuation">:</span> <span class="token number">1000</span> <span class="token comment"># 等待队列最多允许 1000 个请求在队列中等待</span>
    <span class="token key atrule">max-connections</span><span class="token punctuation">:</span> <span class="token number">20000</span> <span class="token comment"># 最大允许 20000 个链接被建立</span>
  <span class="token comment">## 最大工作线程数，默认200, 4核8g内存，线程数经验值 1000</span>
    <span class="token key atrule">threads</span><span class="token punctuation">:</span>
       <span class="token key atrule">max</span><span class="token punctuation">:</span> <span class="token number">1000</span> <span class="token comment"># 并发处理创建的最大的线程数量</span>
       <span class="token key atrule">min-spare</span><span class="token punctuation">:</span> <span class="token number">100</span>  <span class="token comment"># 最大空闲连接数，防止突发流量</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="accept-count-最大等待数" tabindex="-1"><a class="header-anchor" href="#accept-count-最大等待数" aria-hidden="true">#</a> accept-count：最大等待数</h3><p>当调用HTTP请求数达到tomcat的最大线程数时，还有新的请求进来，这时tomcat会将该剩余请求放到等待队列中，acceptCount就是指队列能够接受的最大等待数。默认 100 ，如果等待队列超了，新的请求就会被拒绝（connection refused）。</p><h3 id="maxthreads-最大线程数" tabindex="-1"><a class="header-anchor" href="#maxthreads-最大线程数" aria-hidden="true">#</a> maxThreads：最大线程数</h3><p>每一次HTTP请求到达Web服务，tomcat都会创建一个线程来处理该请求。 最大线程数决定了Web服务容器可以同时处理多少个请求。默认是 200 。 当然最大线程数肯定建议增加越大越好。但是增加线程是有成本的，不能无限制增大。线程多不仅仅会带来线程上下文切换的成本，而且线程也需要消耗内存资源。JVM中默认情况下在创建新线程时会分配大小为1M的线程栈，所以，更多的线程异味着需要更多的内存。 线程数的经验值为： 1 核2g内存为 200 ，线程数经验值 200 ； 4 核8g内存，线程数经验值 1000 。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># java查看xss的值的命令</span>
<span class="token function">java</span> <span class="token parameter variable">-XX:+PrintFlagsFinal</span> <span class="token parameter variable">-version</span> <span class="token operator">|</span> <span class="token function">grep</span> ThreadStackSize

<span class="token comment"># 计算最大线程数的公式：</span>
Number of threads <span class="token operator">=</span> <span class="token punctuation">(</span>MaxProcess内存 - JVM内存 - ReservedOsMemory<span class="token punctuation">)</span> / <span class="token punctuation">(</span>ThreadStackSize<span class="token punctuation">)</span>

系统最大可创建的线程数量<span class="token operator">=</span><span class="token punctuation">(</span>机器本身可用内存 - <span class="token punctuation">(</span>JVM分配的堆内存+JVM元数据区<span class="token punctuation">))</span> / Xss的值
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="max-connections-最大连接数" tabindex="-1"><a class="header-anchor" href="#max-connections-最大连接数" aria-hidden="true">#</a> Max Connections：最大连接数</h3><p>最大连接数是指在同一时间，tomcat能够接受的最大连接数。如果设置为-1，则禁用Max Connections功能，不限制连接</p><p>对于Java的阻塞式BIO默认值是Max Threads的值；如果在BIO模式使用定制的Executor执行器，默认值将是执行器中Max Threads的值。 对于Java 新的NIO模式，Max Connections 默认值是 10000 对于Windows上APR/native IO模式，Max Connections默认值为 8192 ，这是出于性能原因，如果配置的值不是 1024 的倍数，Max Connections的实际值将减少到 1024 的最大倍数。</p><p>Max Connections和accept-count关系：当连接数达到最大值Max Connections后系统会继续接收连接，但不会超过acceptCount的限制。</p>`,34);function T(_,f){const e=t("ExternalLinkIcon"),o=t("font");return l(),i("div",null,[a("div",d,[m,a("p",null,[a("a",k,[n("实战Springboot内置Tomcat配置调优"),s(e)])]),a("p",null,[a("a",v,[n("一个Tomcat最多支持多少用户的并发？"),s(e)])]),a("p",null,[a("a",b,[n("服务端优化-Tomcat调优 "),s(e)])])]),h,a("p",null,[x,n("：Tomcat可创建的最大的线程数，每一个线程处理一个请求，超过这个请求数后，客户端请求只能排队，等有线程释放才能处理。 （"),s(o,{color:"red"},{default:r(()=>[n("建议这个配置数可以在服务器CUP核心数的200~250倍之间")]),_:1}),n("）")]),g])}const y=c(u,[["render",T],["__file","基础.html.vue"]]);export{y as default};
