import{_ as s,X as r,Y as a,Z as e,a1 as t,$ as n,C as c}from"./framework-0b23a550.js";const l={},p={class:"hint-container tip"},i=e("p",{class:"hint-container-title"},"参考",-1),_={href:"https://github.com/lojzes/middle-study/tree/master/Jasypt",target:"_blank",rel:"noopener noreferrer"},d={href:"https://github.com/ulisesbocchio/jasypt-spring-boot",target:"_blank",rel:"noopener noreferrer"},h={href:"https://blog.csdn.net/wangmx1993328/article/details/106421101",target:"_blank",rel:"noopener noreferrer"},u=e("h2",{id:"jasypt-加密概述",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#jasypt-加密概述","aria-hidden":"true"},"#"),t(" Jasypt 加密概述")],-1),y=e("p",null,"1、Jasypt Spring Boot 为 spring boot 应用程序中的属性源提供加密支持，出于安全考虑，Spring boot 配置文件中的敏感信息通常需要对它进行加密/脱敏处理，尽量不使用明文，要实现这一点，办法有很多，自己手动对敏感信息进行加解密也是可以的。",-1),f=e("p",null,"2、有需求就有人奉献，Jasypt 开源安全框架就是专门用于处理 Spring boot 属性加密的，在配置文件中使用特定格式直接配置密文，然后应用启动的时候，Jasypt 会自动将密码解密成明文供程序使用。",-1),m=e("pre",null,[e("code",null,`1）Jasypt 加密属性配置格式：secret.property=ENC(nrmZtkF7T0kjG/VodDvBw93Ct8EgjCA+)，ENC() 就是它的标识，程序启动的时候，会自动解密其中的内容，如果解密失败，则会报错。
2）所以获取这些属性值和平时没有区别，直接使用如 @Value("\${secret.property}") 获取即可，取值并不需要特殊处理。
`)],-1),g=e("p",null,"3、jasypt 同一个密钥（secretKey）对同一个内容执行加密，每次生成的密文都是不一样的，但是根据根据这些密文解密成原内容都是可以的.",-1);function b(j,k){const o=c("ExternalLinkIcon");return r(),a("div",null,[e("div",p,[i,e("p",null,[e("a",_,[t("源码"),n(o)])]),e("p",null,[e("a",d,[t("官网"),n(o)])]),e("p",null,[e("a",h,[t("Jasypt 开源加密库使用教程"),n(o)])])]),u,y,f,m,g])}const J=s(l,[["render",b],["__file","jasypt.html.vue"]]);export{J as default};
