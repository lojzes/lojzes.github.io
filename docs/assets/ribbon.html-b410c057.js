import{_ as r,X as d,Y as n,Z as t,a1 as i,$ as a,a2 as o,C as s}from"./framework-0b23a550.js";const l={},c={class:"hint-container tip"},h=t("p",{class:"hint-container-title"},"参考",-1),b={href:"https://www.jianshu.com/p/79b9cf0d0519",target:"_blank",rel:"noopener noreferrer"},R=o(`<h2 id="负载均衡有好几种实现策略-常见的有" tabindex="-1"><a class="header-anchor" href="#负载均衡有好几种实现策略-常见的有" aria-hidden="true">#</a> 负载均衡有好几种实现策略，常见的有：</h2><pre><code>随机 (Random)
轮询 (RoundRobin)
一致性哈希 (ConsistentHash)
哈希 (Hash)
加权（Weighted）
</code></pre><h2 id="ribbon的组成" tabindex="-1"><a class="header-anchor" href="#ribbon的组成" aria-hidden="true">#</a> Ribbon的组成：</h2><table><thead><tr><th>接口</th><th>作用</th><th>默认值</th></tr></thead><tbody><tr><td>IClientConfig</td><td>读取配置</td><td>DefaultClientConfigImpl</td></tr><tr><td>IRule</td><td>负载均衡规则，选择实例</td><td>ZoneAvoidanceRule</td></tr><tr><td>IPing</td><td>筛选掉ping不通的实例</td><td>DummyPing</td></tr><tr><td><code>ServerList&lt;Server&gt;</code></td><td>交给Ribbon的实例列表</td><td>Ribbon：ConfigurationBasedServerList Spring Cloud Alibaba NacosServerList</td></tr><tr><td><code>ServerListFilter&lt;Server&gt;</code></td><td>过滤掉不符合条件的实例</td><td>ZonePreferenceServerListFilter</td></tr><tr><td>ILoadBalance</td><td>Ribbon的入口</td><td>ZoneAwareLoadBalance</td></tr><tr><td>ServerListUpdater</td><td>更新交给Ribbon的List的策略</td><td>PollingServerListUpdater</td></tr></tbody></table><h2 id="ribbon内置的负载均衡规则" tabindex="-1"><a class="header-anchor" href="#ribbon内置的负载均衡规则" aria-hidden="true">#</a> Ribbon内置的负载均衡规则</h2><table><thead><tr><th>规则名称</th><th>特点</th></tr></thead><tbody><tr><td>AvailabilityFilteringRule</td><td>过滤掉一直连接失败的被标记为circuit tripped的后端Server，并过滤掉那些高并发的后端Server或者使用一个AvailabilityPredicate来包含过滤server的逻辑，其实就是检查status里记录的各个server的运行状态</td></tr><tr><td>BestAvailableRule</td><td>选择一个最小的并发请求的server，逐个考察server，如果Server被tripped了，则跳过</td></tr><tr><td>RandomRule</td><td>随机选择一个Server</td></tr><tr><td>ResponseTimeWeightedRule</td><td>已废弃，作用同WeightedResponseTimeRule</td></tr><tr><td>WeightedResponseTimeRule</td><td>根据响应时间加权，响应时间越长，权重越小，被选中的可能性越低</td></tr><tr><td>RetryRule</td><td>对选定的负载均衡策略加上重试机制，在一个配置时间段内当选择Server不成功，则一直尝试使用subRule的方式选择一个可用的Server</td></tr><tr><td>RoundRobinRule</td><td>轮询选择，轮询index，选择index对应位置的Server</td></tr><tr><td>ZoneAvoidanceRule</td><td>默认的负载均衡策略，即复合判断Server所在区域的性能和Server的可用性选择Server，在没有区域的环境下，类似于轮询(RandomRule)</td></tr></tbody></table><p>其中RandomRule表示随机策略、RoundRobinRule表示轮询策略、WeightedResponseTimeRule表示加权策略、BestAvailableRule表示请求数最少策略等等。</p>`,7);function u(v,p){const e=s("ExternalLinkIcon");return d(),n("div",null,[t("div",c,[h,t("p",null,[t("a",b,[i("Ribbon的负载均衡策略、原理和扩展"),a(e)])])]),R])}const S=r(l,[["render",u],["__file","ribbon.html.vue"]]);export{S as default};
